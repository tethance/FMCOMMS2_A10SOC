// ghrd_10as066n2_altera_mm_interconnect_161_3dkk5pi.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 203

`timescale 1 ps / 1 ps
module ghrd_10as066n2_altera_mm_interconnect_161_3dkk5pi (
		output wire [3:0]   arria10_hps_f2sdram0_data_awid,                                  //                                 arria10_hps_f2sdram0_data.awid
		output wire [31:0]  arria10_hps_f2sdram0_data_awaddr,                                //                                                          .awaddr
		output wire [3:0]   arria10_hps_f2sdram0_data_awlen,                                 //                                                          .awlen
		output wire [2:0]   arria10_hps_f2sdram0_data_awsize,                                //                                                          .awsize
		output wire [1:0]   arria10_hps_f2sdram0_data_awburst,                               //                                                          .awburst
		output wire [1:0]   arria10_hps_f2sdram0_data_awlock,                                //                                                          .awlock
		output wire [3:0]   arria10_hps_f2sdram0_data_awcache,                               //                                                          .awcache
		output wire [2:0]   arria10_hps_f2sdram0_data_awprot,                                //                                                          .awprot
		output wire [4:0]   arria10_hps_f2sdram0_data_awuser,                                //                                                          .awuser
		output wire         arria10_hps_f2sdram0_data_awvalid,                               //                                                          .awvalid
		input  wire         arria10_hps_f2sdram0_data_awready,                               //                                                          .awready
		output wire [3:0]   arria10_hps_f2sdram0_data_wid,                                   //                                                          .wid
		output wire [127:0] arria10_hps_f2sdram0_data_wdata,                                 //                                                          .wdata
		output wire [15:0]  arria10_hps_f2sdram0_data_wstrb,                                 //                                                          .wstrb
		output wire         arria10_hps_f2sdram0_data_wlast,                                 //                                                          .wlast
		output wire         arria10_hps_f2sdram0_data_wvalid,                                //                                                          .wvalid
		input  wire         arria10_hps_f2sdram0_data_wready,                                //                                                          .wready
		input  wire [3:0]   arria10_hps_f2sdram0_data_bid,                                   //                                                          .bid
		input  wire [1:0]   arria10_hps_f2sdram0_data_bresp,                                 //                                                          .bresp
		input  wire         arria10_hps_f2sdram0_data_bvalid,                                //                                                          .bvalid
		output wire         arria10_hps_f2sdram0_data_bready,                                //                                                          .bready
		output wire [3:0]   arria10_hps_f2sdram0_data_arid,                                  //                                                          .arid
		output wire [31:0]  arria10_hps_f2sdram0_data_araddr,                                //                                                          .araddr
		output wire [3:0]   arria10_hps_f2sdram0_data_arlen,                                 //                                                          .arlen
		output wire [2:0]   arria10_hps_f2sdram0_data_arsize,                                //                                                          .arsize
		output wire [1:0]   arria10_hps_f2sdram0_data_arburst,                               //                                                          .arburst
		output wire [1:0]   arria10_hps_f2sdram0_data_arlock,                                //                                                          .arlock
		output wire [3:0]   arria10_hps_f2sdram0_data_arcache,                               //                                                          .arcache
		output wire [2:0]   arria10_hps_f2sdram0_data_arprot,                                //                                                          .arprot
		output wire [4:0]   arria10_hps_f2sdram0_data_aruser,                                //                                                          .aruser
		output wire         arria10_hps_f2sdram0_data_arvalid,                               //                                                          .arvalid
		input  wire         arria10_hps_f2sdram0_data_arready,                               //                                                          .arready
		input  wire [3:0]   arria10_hps_f2sdram0_data_rid,                                   //                                                          .rid
		input  wire [127:0] arria10_hps_f2sdram0_data_rdata,                                 //                                                          .rdata
		input  wire [1:0]   arria10_hps_f2sdram0_data_rresp,                                 //                                                          .rresp
		input  wire         arria10_hps_f2sdram0_data_rlast,                                 //                                                          .rlast
		input  wire         arria10_hps_f2sdram0_data_rvalid,                                //                                                          .rvalid
		output wire         arria10_hps_f2sdram0_data_rready,                                //                                                          .rready
		input  wire [3:0]   sys_mem_interconnect_axi0_m0_awid,                               //                              sys_mem_interconnect_axi0_m0.awid
		input  wire [31:0]  sys_mem_interconnect_axi0_m0_awaddr,                             //                                                          .awaddr
		input  wire [3:0]   sys_mem_interconnect_axi0_m0_awlen,                              //                                                          .awlen
		input  wire [2:0]   sys_mem_interconnect_axi0_m0_awsize,                             //                                                          .awsize
		input  wire [1:0]   sys_mem_interconnect_axi0_m0_awburst,                            //                                                          .awburst
		input  wire [1:0]   sys_mem_interconnect_axi0_m0_awlock,                             //                                                          .awlock
		input  wire [3:0]   sys_mem_interconnect_axi0_m0_awcache,                            //                                                          .awcache
		input  wire [2:0]   sys_mem_interconnect_axi0_m0_awprot,                             //                                                          .awprot
		input  wire         sys_mem_interconnect_axi0_m0_awvalid,                            //                                                          .awvalid
		output wire         sys_mem_interconnect_axi0_m0_awready,                            //                                                          .awready
		input  wire [3:0]   sys_mem_interconnect_axi0_m0_wid,                                //                                                          .wid
		input  wire [63:0]  sys_mem_interconnect_axi0_m0_wdata,                              //                                                          .wdata
		input  wire [7:0]   sys_mem_interconnect_axi0_m0_wstrb,                              //                                                          .wstrb
		input  wire         sys_mem_interconnect_axi0_m0_wlast,                              //                                                          .wlast
		input  wire         sys_mem_interconnect_axi0_m0_wvalid,                             //                                                          .wvalid
		output wire         sys_mem_interconnect_axi0_m0_wready,                             //                                                          .wready
		output wire [3:0]   sys_mem_interconnect_axi0_m0_bid,                                //                                                          .bid
		output wire [1:0]   sys_mem_interconnect_axi0_m0_bresp,                              //                                                          .bresp
		output wire         sys_mem_interconnect_axi0_m0_bvalid,                             //                                                          .bvalid
		input  wire         sys_mem_interconnect_axi0_m0_bready,                             //                                                          .bready
		input  wire [3:0]   sys_mem_interconnect_axi0_m0_arid,                               //                                                          .arid
		input  wire [31:0]  sys_mem_interconnect_axi0_m0_araddr,                             //                                                          .araddr
		input  wire [3:0]   sys_mem_interconnect_axi0_m0_arlen,                              //                                                          .arlen
		input  wire [2:0]   sys_mem_interconnect_axi0_m0_arsize,                             //                                                          .arsize
		input  wire [1:0]   sys_mem_interconnect_axi0_m0_arburst,                            //                                                          .arburst
		input  wire [1:0]   sys_mem_interconnect_axi0_m0_arlock,                             //                                                          .arlock
		input  wire [3:0]   sys_mem_interconnect_axi0_m0_arcache,                            //                                                          .arcache
		input  wire [2:0]   sys_mem_interconnect_axi0_m0_arprot,                             //                                                          .arprot
		input  wire         sys_mem_interconnect_axi0_m0_arvalid,                            //                                                          .arvalid
		output wire         sys_mem_interconnect_axi0_m0_arready,                            //                                                          .arready
		output wire [3:0]   sys_mem_interconnect_axi0_m0_rid,                                //                                                          .rid
		output wire [63:0]  sys_mem_interconnect_axi0_m0_rdata,                              //                                                          .rdata
		output wire [1:0]   sys_mem_interconnect_axi0_m0_rresp,                              //                                                          .rresp
		output wire         sys_mem_interconnect_axi0_m0_rlast,                              //                                                          .rlast
		output wire         sys_mem_interconnect_axi0_m0_rvalid,                             //                                                          .rvalid
		input  wire         sys_mem_interconnect_axi0_m0_rready,                             //                                                          .rready
		input  wire         clk_0_clk_clk,                                                   //                                                 clk_0_clk.clk
		input  wire         sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset  // sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset.reset
	);

	wire    [1:0] sys_mem_interconnect_axi0_m0_id_pad_m0_awburst;                   // sys_mem_interconnect_axi0_m0_id_pad:m0_awburst -> sys_mem_interconnect_axi0_m0_agent:awburst
	wire    [4:0] sys_mem_interconnect_axi0_m0_id_pad_m0_awuser;                    // sys_mem_interconnect_axi0_m0_id_pad:m0_awuser -> sys_mem_interconnect_axi0_m0_agent:awuser
	wire    [3:0] sys_mem_interconnect_axi0_m0_id_pad_m0_arlen;                     // sys_mem_interconnect_axi0_m0_id_pad:m0_arlen -> sys_mem_interconnect_axi0_m0_agent:arlen
	wire    [7:0] sys_mem_interconnect_axi0_m0_id_pad_m0_wstrb;                     // sys_mem_interconnect_axi0_m0_id_pad:m0_wstrb -> sys_mem_interconnect_axi0_m0_agent:wstrb
	wire          sys_mem_interconnect_axi0_m0_id_pad_m0_wready;                    // sys_mem_interconnect_axi0_m0_agent:wready -> sys_mem_interconnect_axi0_m0_id_pad:m0_wready
	wire    [3:0] sys_mem_interconnect_axi0_m0_id_pad_m0_rid;                       // sys_mem_interconnect_axi0_m0_agent:rid -> sys_mem_interconnect_axi0_m0_id_pad:m0_rid
	wire          sys_mem_interconnect_axi0_m0_id_pad_m0_rready;                    // sys_mem_interconnect_axi0_m0_id_pad:m0_rready -> sys_mem_interconnect_axi0_m0_agent:rready
	wire    [3:0] sys_mem_interconnect_axi0_m0_id_pad_m0_awlen;                     // sys_mem_interconnect_axi0_m0_id_pad:m0_awlen -> sys_mem_interconnect_axi0_m0_agent:awlen
	wire    [3:0] sys_mem_interconnect_axi0_m0_id_pad_m0_wid;                       // sys_mem_interconnect_axi0_m0_id_pad:m0_wid -> sys_mem_interconnect_axi0_m0_agent:wid
	wire    [3:0] sys_mem_interconnect_axi0_m0_id_pad_m0_arcache;                   // sys_mem_interconnect_axi0_m0_id_pad:m0_arcache -> sys_mem_interconnect_axi0_m0_agent:arcache
	wire          sys_mem_interconnect_axi0_m0_id_pad_m0_wvalid;                    // sys_mem_interconnect_axi0_m0_id_pad:m0_wvalid -> sys_mem_interconnect_axi0_m0_agent:wvalid
	wire   [31:0] sys_mem_interconnect_axi0_m0_id_pad_m0_araddr;                    // sys_mem_interconnect_axi0_m0_id_pad:m0_araddr -> sys_mem_interconnect_axi0_m0_agent:araddr
	wire    [2:0] sys_mem_interconnect_axi0_m0_id_pad_m0_arprot;                    // sys_mem_interconnect_axi0_m0_id_pad:m0_arprot -> sys_mem_interconnect_axi0_m0_agent:arprot
	wire    [2:0] sys_mem_interconnect_axi0_m0_id_pad_m0_awprot;                    // sys_mem_interconnect_axi0_m0_id_pad:m0_awprot -> sys_mem_interconnect_axi0_m0_agent:awprot
	wire   [63:0] sys_mem_interconnect_axi0_m0_id_pad_m0_wdata;                     // sys_mem_interconnect_axi0_m0_id_pad:m0_wdata -> sys_mem_interconnect_axi0_m0_agent:wdata
	wire          sys_mem_interconnect_axi0_m0_id_pad_m0_arvalid;                   // sys_mem_interconnect_axi0_m0_id_pad:m0_arvalid -> sys_mem_interconnect_axi0_m0_agent:arvalid
	wire    [3:0] sys_mem_interconnect_axi0_m0_id_pad_m0_awcache;                   // sys_mem_interconnect_axi0_m0_id_pad:m0_awcache -> sys_mem_interconnect_axi0_m0_agent:awcache
	wire    [3:0] sys_mem_interconnect_axi0_m0_id_pad_m0_arid;                      // sys_mem_interconnect_axi0_m0_id_pad:m0_arid -> sys_mem_interconnect_axi0_m0_agent:arid
	wire    [1:0] sys_mem_interconnect_axi0_m0_id_pad_m0_arlock;                    // sys_mem_interconnect_axi0_m0_id_pad:m0_arlock -> sys_mem_interconnect_axi0_m0_agent:arlock
	wire    [1:0] sys_mem_interconnect_axi0_m0_id_pad_m0_awlock;                    // sys_mem_interconnect_axi0_m0_id_pad:m0_awlock -> sys_mem_interconnect_axi0_m0_agent:awlock
	wire   [31:0] sys_mem_interconnect_axi0_m0_id_pad_m0_awaddr;                    // sys_mem_interconnect_axi0_m0_id_pad:m0_awaddr -> sys_mem_interconnect_axi0_m0_agent:awaddr
	wire    [1:0] sys_mem_interconnect_axi0_m0_id_pad_m0_bresp;                     // sys_mem_interconnect_axi0_m0_agent:bresp -> sys_mem_interconnect_axi0_m0_id_pad:m0_bresp
	wire          sys_mem_interconnect_axi0_m0_id_pad_m0_arready;                   // sys_mem_interconnect_axi0_m0_agent:arready -> sys_mem_interconnect_axi0_m0_id_pad:m0_arready
	wire   [63:0] sys_mem_interconnect_axi0_m0_id_pad_m0_rdata;                     // sys_mem_interconnect_axi0_m0_agent:rdata -> sys_mem_interconnect_axi0_m0_id_pad:m0_rdata
	wire          sys_mem_interconnect_axi0_m0_id_pad_m0_awready;                   // sys_mem_interconnect_axi0_m0_agent:awready -> sys_mem_interconnect_axi0_m0_id_pad:m0_awready
	wire    [1:0] sys_mem_interconnect_axi0_m0_id_pad_m0_arburst;                   // sys_mem_interconnect_axi0_m0_id_pad:m0_arburst -> sys_mem_interconnect_axi0_m0_agent:arburst
	wire    [2:0] sys_mem_interconnect_axi0_m0_id_pad_m0_arsize;                    // sys_mem_interconnect_axi0_m0_id_pad:m0_arsize -> sys_mem_interconnect_axi0_m0_agent:arsize
	wire          sys_mem_interconnect_axi0_m0_id_pad_m0_bready;                    // sys_mem_interconnect_axi0_m0_id_pad:m0_bready -> sys_mem_interconnect_axi0_m0_agent:bready
	wire          sys_mem_interconnect_axi0_m0_id_pad_m0_rlast;                     // sys_mem_interconnect_axi0_m0_agent:rlast -> sys_mem_interconnect_axi0_m0_id_pad:m0_rlast
	wire          sys_mem_interconnect_axi0_m0_id_pad_m0_wlast;                     // sys_mem_interconnect_axi0_m0_id_pad:m0_wlast -> sys_mem_interconnect_axi0_m0_agent:wlast
	wire    [1:0] sys_mem_interconnect_axi0_m0_id_pad_m0_rresp;                     // sys_mem_interconnect_axi0_m0_agent:rresp -> sys_mem_interconnect_axi0_m0_id_pad:m0_rresp
	wire    [3:0] sys_mem_interconnect_axi0_m0_id_pad_m0_awid;                      // sys_mem_interconnect_axi0_m0_id_pad:m0_awid -> sys_mem_interconnect_axi0_m0_agent:awid
	wire    [3:0] sys_mem_interconnect_axi0_m0_id_pad_m0_bid;                       // sys_mem_interconnect_axi0_m0_agent:bid -> sys_mem_interconnect_axi0_m0_id_pad:m0_bid
	wire          sys_mem_interconnect_axi0_m0_id_pad_m0_bvalid;                    // sys_mem_interconnect_axi0_m0_agent:bvalid -> sys_mem_interconnect_axi0_m0_id_pad:m0_bvalid
	wire    [2:0] sys_mem_interconnect_axi0_m0_id_pad_m0_awsize;                    // sys_mem_interconnect_axi0_m0_id_pad:m0_awsize -> sys_mem_interconnect_axi0_m0_agent:awsize
	wire          sys_mem_interconnect_axi0_m0_id_pad_m0_awvalid;                   // sys_mem_interconnect_axi0_m0_id_pad:m0_awvalid -> sys_mem_interconnect_axi0_m0_agent:awvalid
	wire    [4:0] sys_mem_interconnect_axi0_m0_id_pad_m0_aruser;                    // sys_mem_interconnect_axi0_m0_id_pad:m0_aruser -> sys_mem_interconnect_axi0_m0_agent:aruser
	wire          sys_mem_interconnect_axi0_m0_id_pad_m0_rvalid;                    // sys_mem_interconnect_axi0_m0_agent:rvalid -> sys_mem_interconnect_axi0_m0_id_pad:m0_rvalid
	wire          rsp_mux_src_valid;                                                // rsp_mux:src_valid -> sys_mem_interconnect_axi0_m0_agent:write_rp_valid
	wire  [158:0] rsp_mux_src_data;                                                 // rsp_mux:src_data -> sys_mem_interconnect_axi0_m0_agent:write_rp_data
	wire          rsp_mux_src_ready;                                                // sys_mem_interconnect_axi0_m0_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                              // rsp_mux:src_channel -> sys_mem_interconnect_axi0_m0_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                        // rsp_mux:src_startofpacket -> sys_mem_interconnect_axi0_m0_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                          // rsp_mux:src_endofpacket -> sys_mem_interconnect_axi0_m0_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                            // rsp_mux_001:src_valid -> sys_mem_interconnect_axi0_m0_agent:read_rp_valid
	wire  [158:0] rsp_mux_001_src_data;                                             // rsp_mux_001:src_data -> sys_mem_interconnect_axi0_m0_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                            // sys_mem_interconnect_axi0_m0_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                          // rsp_mux_001:src_channel -> sys_mem_interconnect_axi0_m0_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                    // rsp_mux_001:src_startofpacket -> sys_mem_interconnect_axi0_m0_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                      // rsp_mux_001:src_endofpacket -> sys_mem_interconnect_axi0_m0_agent:read_rp_endofpacket
	wire          sys_mem_interconnect_axi0_m0_agent_write_cp_valid;                // sys_mem_interconnect_axi0_m0_agent:write_cp_valid -> router:sink_valid
	wire  [158:0] sys_mem_interconnect_axi0_m0_agent_write_cp_data;                 // sys_mem_interconnect_axi0_m0_agent:write_cp_data -> router:sink_data
	wire          sys_mem_interconnect_axi0_m0_agent_write_cp_ready;                // router:sink_ready -> sys_mem_interconnect_axi0_m0_agent:write_cp_ready
	wire          sys_mem_interconnect_axi0_m0_agent_write_cp_startofpacket;        // sys_mem_interconnect_axi0_m0_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          sys_mem_interconnect_axi0_m0_agent_write_cp_endofpacket;          // sys_mem_interconnect_axi0_m0_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                 // router:src_valid -> cmd_demux:sink_valid
	wire  [158:0] router_src_data;                                                  // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                 // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                               // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                         // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                           // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          sys_mem_interconnect_axi0_m0_agent_read_cp_valid;                 // sys_mem_interconnect_axi0_m0_agent:read_cp_valid -> router_001:sink_valid
	wire  [158:0] sys_mem_interconnect_axi0_m0_agent_read_cp_data;                  // sys_mem_interconnect_axi0_m0_agent:read_cp_data -> router_001:sink_data
	wire          sys_mem_interconnect_axi0_m0_agent_read_cp_ready;                 // router_001:sink_ready -> sys_mem_interconnect_axi0_m0_agent:read_cp_ready
	wire          sys_mem_interconnect_axi0_m0_agent_read_cp_startofpacket;         // sys_mem_interconnect_axi0_m0_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          sys_mem_interconnect_axi0_m0_agent_read_cp_endofpacket;           // sys_mem_interconnect_axi0_m0_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                             // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [158:0] router_001_src_data;                                              // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                             // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                           // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                     // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                       // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          cmd_mux_src_valid;                                                // cmd_mux:src_valid -> arria10_hps_f2sdram0_data_wr_cmd_width_adapter:in_valid
	wire  [158:0] cmd_mux_src_data;                                                 // cmd_mux:src_data -> arria10_hps_f2sdram0_data_wr_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                // arria10_hps_f2sdram0_data_wr_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                              // cmd_mux:src_channel -> arria10_hps_f2sdram0_data_wr_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                        // cmd_mux:src_startofpacket -> arria10_hps_f2sdram0_data_wr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                          // cmd_mux:src_endofpacket -> arria10_hps_f2sdram0_data_wr_cmd_width_adapter:in_endofpacket
	wire          cmd_mux_001_src_valid;                                            // cmd_mux_001:src_valid -> arria10_hps_f2sdram0_data_rd_cmd_width_adapter:in_valid
	wire  [158:0] cmd_mux_001_src_data;                                             // cmd_mux_001:src_data -> arria10_hps_f2sdram0_data_rd_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                            // arria10_hps_f2sdram0_data_rd_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                          // cmd_mux_001:src_channel -> arria10_hps_f2sdram0_data_rd_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                    // cmd_mux_001:src_startofpacket -> arria10_hps_f2sdram0_data_rd_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                      // cmd_mux_001:src_endofpacket -> arria10_hps_f2sdram0_data_rd_cmd_width_adapter:in_endofpacket
	wire          router_002_src_valid;                                             // router_002:src_valid -> arria10_hps_f2sdram0_data_wr_rsp_width_adapter:in_valid
	wire  [230:0] router_002_src_data;                                              // router_002:src_data -> arria10_hps_f2sdram0_data_wr_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                             // arria10_hps_f2sdram0_data_wr_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                           // router_002:src_channel -> arria10_hps_f2sdram0_data_wr_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                     // router_002:src_startofpacket -> arria10_hps_f2sdram0_data_wr_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                       // router_002:src_endofpacket -> arria10_hps_f2sdram0_data_wr_rsp_width_adapter:in_endofpacket
	wire          arria10_hps_f2sdram0_data_wr_rsp_width_adapter_src_valid;         // arria10_hps_f2sdram0_data_wr_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [158:0] arria10_hps_f2sdram0_data_wr_rsp_width_adapter_src_data;          // arria10_hps_f2sdram0_data_wr_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          arria10_hps_f2sdram0_data_wr_rsp_width_adapter_src_ready;         // rsp_demux:sink_ready -> arria10_hps_f2sdram0_data_wr_rsp_width_adapter:out_ready
	wire    [1:0] arria10_hps_f2sdram0_data_wr_rsp_width_adapter_src_channel;       // arria10_hps_f2sdram0_data_wr_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          arria10_hps_f2sdram0_data_wr_rsp_width_adapter_src_startofpacket; // arria10_hps_f2sdram0_data_wr_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          arria10_hps_f2sdram0_data_wr_rsp_width_adapter_src_endofpacket;   // arria10_hps_f2sdram0_data_wr_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_003_src_valid;                                             // router_003:src_valid -> arria10_hps_f2sdram0_data_rd_rsp_width_adapter:in_valid
	wire  [230:0] router_003_src_data;                                              // router_003:src_data -> arria10_hps_f2sdram0_data_rd_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                             // arria10_hps_f2sdram0_data_rd_rsp_width_adapter:in_ready -> router_003:src_ready
	wire    [1:0] router_003_src_channel;                                           // router_003:src_channel -> arria10_hps_f2sdram0_data_rd_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                     // router_003:src_startofpacket -> arria10_hps_f2sdram0_data_rd_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                       // router_003:src_endofpacket -> arria10_hps_f2sdram0_data_rd_rsp_width_adapter:in_endofpacket
	wire          arria10_hps_f2sdram0_data_rd_rsp_width_adapter_src_valid;         // arria10_hps_f2sdram0_data_rd_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [158:0] arria10_hps_f2sdram0_data_rd_rsp_width_adapter_src_data;          // arria10_hps_f2sdram0_data_rd_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          arria10_hps_f2sdram0_data_rd_rsp_width_adapter_src_ready;         // rsp_demux_001:sink_ready -> arria10_hps_f2sdram0_data_rd_rsp_width_adapter:out_ready
	wire    [1:0] arria10_hps_f2sdram0_data_rd_rsp_width_adapter_src_channel;       // arria10_hps_f2sdram0_data_rd_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          arria10_hps_f2sdram0_data_rd_rsp_width_adapter_src_startofpacket; // arria10_hps_f2sdram0_data_rd_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          arria10_hps_f2sdram0_data_rd_rsp_width_adapter_src_endofpacket;   // arria10_hps_f2sdram0_data_rd_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          arria10_hps_f2sdram0_data_wr_cmd_width_adapter_src_valid;         // arria10_hps_f2sdram0_data_wr_cmd_width_adapter:out_valid -> agent_pipeline:in_valid
	wire  [230:0] arria10_hps_f2sdram0_data_wr_cmd_width_adapter_src_data;          // arria10_hps_f2sdram0_data_wr_cmd_width_adapter:out_data -> agent_pipeline:in_data
	wire          arria10_hps_f2sdram0_data_wr_cmd_width_adapter_src_ready;         // agent_pipeline:in_ready -> arria10_hps_f2sdram0_data_wr_cmd_width_adapter:out_ready
	wire    [1:0] arria10_hps_f2sdram0_data_wr_cmd_width_adapter_src_channel;       // arria10_hps_f2sdram0_data_wr_cmd_width_adapter:out_channel -> agent_pipeline:in_channel
	wire          arria10_hps_f2sdram0_data_wr_cmd_width_adapter_src_startofpacket; // arria10_hps_f2sdram0_data_wr_cmd_width_adapter:out_startofpacket -> agent_pipeline:in_startofpacket
	wire          arria10_hps_f2sdram0_data_wr_cmd_width_adapter_src_endofpacket;   // arria10_hps_f2sdram0_data_wr_cmd_width_adapter:out_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                     // agent_pipeline:out_valid -> arria10_hps_f2sdram0_data_agent:write_cp_valid
	wire  [230:0] agent_pipeline_source0_data;                                      // agent_pipeline:out_data -> arria10_hps_f2sdram0_data_agent:write_cp_data
	wire          agent_pipeline_source0_ready;                                     // arria10_hps_f2sdram0_data_agent:write_cp_ready -> agent_pipeline:out_ready
	wire    [1:0] agent_pipeline_source0_channel;                                   // agent_pipeline:out_channel -> arria10_hps_f2sdram0_data_agent:write_cp_channel
	wire          agent_pipeline_source0_startofpacket;                             // agent_pipeline:out_startofpacket -> arria10_hps_f2sdram0_data_agent:write_cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                               // agent_pipeline:out_endofpacket -> arria10_hps_f2sdram0_data_agent:write_cp_endofpacket
	wire          arria10_hps_f2sdram0_data_rd_cmd_width_adapter_src_valid;         // arria10_hps_f2sdram0_data_rd_cmd_width_adapter:out_valid -> agent_pipeline_001:in_valid
	wire  [230:0] arria10_hps_f2sdram0_data_rd_cmd_width_adapter_src_data;          // arria10_hps_f2sdram0_data_rd_cmd_width_adapter:out_data -> agent_pipeline_001:in_data
	wire          arria10_hps_f2sdram0_data_rd_cmd_width_adapter_src_ready;         // agent_pipeline_001:in_ready -> arria10_hps_f2sdram0_data_rd_cmd_width_adapter:out_ready
	wire    [1:0] arria10_hps_f2sdram0_data_rd_cmd_width_adapter_src_channel;       // arria10_hps_f2sdram0_data_rd_cmd_width_adapter:out_channel -> agent_pipeline_001:in_channel
	wire          arria10_hps_f2sdram0_data_rd_cmd_width_adapter_src_startofpacket; // arria10_hps_f2sdram0_data_rd_cmd_width_adapter:out_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          arria10_hps_f2sdram0_data_rd_cmd_width_adapter_src_endofpacket;   // arria10_hps_f2sdram0_data_rd_cmd_width_adapter:out_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                 // agent_pipeline_001:out_valid -> arria10_hps_f2sdram0_data_agent:read_cp_valid
	wire  [230:0] agent_pipeline_001_source0_data;                                  // agent_pipeline_001:out_data -> arria10_hps_f2sdram0_data_agent:read_cp_data
	wire          agent_pipeline_001_source0_ready;                                 // arria10_hps_f2sdram0_data_agent:read_cp_ready -> agent_pipeline_001:out_ready
	wire    [1:0] agent_pipeline_001_source0_channel;                               // agent_pipeline_001:out_channel -> arria10_hps_f2sdram0_data_agent:read_cp_channel
	wire          agent_pipeline_001_source0_startofpacket;                         // agent_pipeline_001:out_startofpacket -> arria10_hps_f2sdram0_data_agent:read_cp_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                           // agent_pipeline_001:out_endofpacket -> arria10_hps_f2sdram0_data_agent:read_cp_endofpacket
	wire          arria10_hps_f2sdram0_data_agent_write_rp_valid;                   // arria10_hps_f2sdram0_data_agent:write_rp_valid -> agent_pipeline_002:in_valid
	wire  [230:0] arria10_hps_f2sdram0_data_agent_write_rp_data;                    // arria10_hps_f2sdram0_data_agent:write_rp_data -> agent_pipeline_002:in_data
	wire          arria10_hps_f2sdram0_data_agent_write_rp_ready;                   // agent_pipeline_002:in_ready -> arria10_hps_f2sdram0_data_agent:write_rp_ready
	wire          arria10_hps_f2sdram0_data_agent_write_rp_startofpacket;           // arria10_hps_f2sdram0_data_agent:write_rp_startofpacket -> agent_pipeline_002:in_startofpacket
	wire          arria10_hps_f2sdram0_data_agent_write_rp_endofpacket;             // arria10_hps_f2sdram0_data_agent:write_rp_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          agent_pipeline_002_source0_valid;                                 // agent_pipeline_002:out_valid -> router_002:sink_valid
	wire  [230:0] agent_pipeline_002_source0_data;                                  // agent_pipeline_002:out_data -> router_002:sink_data
	wire          agent_pipeline_002_source0_ready;                                 // router_002:sink_ready -> agent_pipeline_002:out_ready
	wire          agent_pipeline_002_source0_startofpacket;                         // agent_pipeline_002:out_startofpacket -> router_002:sink_startofpacket
	wire          agent_pipeline_002_source0_endofpacket;                           // agent_pipeline_002:out_endofpacket -> router_002:sink_endofpacket
	wire          arria10_hps_f2sdram0_data_agent_read_rp_valid;                    // arria10_hps_f2sdram0_data_agent:read_rp_valid -> agent_pipeline_003:in_valid
	wire  [230:0] arria10_hps_f2sdram0_data_agent_read_rp_data;                     // arria10_hps_f2sdram0_data_agent:read_rp_data -> agent_pipeline_003:in_data
	wire          arria10_hps_f2sdram0_data_agent_read_rp_ready;                    // agent_pipeline_003:in_ready -> arria10_hps_f2sdram0_data_agent:read_rp_ready
	wire          arria10_hps_f2sdram0_data_agent_read_rp_startofpacket;            // arria10_hps_f2sdram0_data_agent:read_rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire          arria10_hps_f2sdram0_data_agent_read_rp_endofpacket;              // arria10_hps_f2sdram0_data_agent:read_rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          agent_pipeline_003_source0_valid;                                 // agent_pipeline_003:out_valid -> router_003:sink_valid
	wire  [230:0] agent_pipeline_003_source0_data;                                  // agent_pipeline_003:out_data -> router_003:sink_data
	wire          agent_pipeline_003_source0_ready;                                 // router_003:sink_ready -> agent_pipeline_003:out_ready
	wire          agent_pipeline_003_source0_startofpacket;                         // agent_pipeline_003:out_startofpacket -> router_003:sink_startofpacket
	wire          agent_pipeline_003_source0_endofpacket;                           // agent_pipeline_003:out_endofpacket -> router_003:sink_endofpacket
	wire          cmd_demux_src0_valid;                                             // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [158:0] cmd_demux_src0_data;                                              // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                             // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                           // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                     // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                       // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                       // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [158:0] mux_pipeline_source0_data;                                        // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                       // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire    [1:0] mux_pipeline_source0_channel;                                     // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                               // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                 // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                         // cmd_demux_001:src0_valid -> mux_pipeline_001:in_valid
	wire  [158:0] cmd_demux_001_src0_data;                                          // cmd_demux_001:src0_data -> mux_pipeline_001:in_data
	wire          cmd_demux_001_src0_ready;                                         // mux_pipeline_001:in_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                       // cmd_demux_001:src0_channel -> mux_pipeline_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                 // cmd_demux_001:src0_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                   // cmd_demux_001:src0_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                   // mux_pipeline_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [158:0] mux_pipeline_001_source0_data;                                    // mux_pipeline_001:out_data -> cmd_mux_001:sink0_data
	wire          mux_pipeline_001_source0_ready;                                   // cmd_mux_001:sink0_ready -> mux_pipeline_001:out_ready
	wire    [1:0] mux_pipeline_001_source0_channel;                                 // mux_pipeline_001:out_channel -> cmd_mux_001:sink0_channel
	wire          mux_pipeline_001_source0_startofpacket;                           // mux_pipeline_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                             // mux_pipeline_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                             // rsp_demux:src0_valid -> mux_pipeline_002:in_valid
	wire  [158:0] rsp_demux_src0_data;                                              // rsp_demux:src0_data -> mux_pipeline_002:in_data
	wire          rsp_demux_src0_ready;                                             // mux_pipeline_002:in_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                           // rsp_demux:src0_channel -> mux_pipeline_002:in_channel
	wire          rsp_demux_src0_startofpacket;                                     // rsp_demux:src0_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                       // rsp_demux:src0_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                                   // mux_pipeline_002:out_valid -> rsp_mux:sink0_valid
	wire  [158:0] mux_pipeline_002_source0_data;                                    // mux_pipeline_002:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_002_source0_ready;                                   // rsp_mux:sink0_ready -> mux_pipeline_002:out_ready
	wire    [1:0] mux_pipeline_002_source0_channel;                                 // mux_pipeline_002:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_002_source0_startofpacket;                           // mux_pipeline_002:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                             // mux_pipeline_002:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                         // rsp_demux_001:src0_valid -> mux_pipeline_003:in_valid
	wire  [158:0] rsp_demux_001_src0_data;                                          // rsp_demux_001:src0_data -> mux_pipeline_003:in_data
	wire          rsp_demux_001_src0_ready;                                         // mux_pipeline_003:in_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                                       // rsp_demux_001:src0_channel -> mux_pipeline_003:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                 // rsp_demux_001:src0_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                   // rsp_demux_001:src0_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                                   // mux_pipeline_003:out_valid -> rsp_mux_001:sink0_valid
	wire  [158:0] mux_pipeline_003_source0_data;                                    // mux_pipeline_003:out_data -> rsp_mux_001:sink0_data
	wire          mux_pipeline_003_source0_ready;                                   // rsp_mux_001:sink0_ready -> mux_pipeline_003:out_ready
	wire    [1:0] mux_pipeline_003_source0_channel;                                 // mux_pipeline_003:out_channel -> rsp_mux_001:sink0_channel
	wire          mux_pipeline_003_source0_startofpacket;                           // mux_pipeline_003:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                             // mux_pipeline_003:out_endofpacket -> rsp_mux_001:sink0_endofpacket

	altera_merlin_axi_translator #(
		.USE_S0_AWID                       (1),
		.USE_S0_AWREGION                   (0),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (1),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (0),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (1),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (1),
		.USE_S0_ARREGION                   (0),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (1),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (0),
		.USE_S0_RID                        (1),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (4),
		.DATA_WIDTH                        (64),
		.S0_ID_WIDTH                       (4),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (5),
		.M0_READ_ADDR_USER_WIDTH           (5),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (0),
		.USE_S0_ARUSER                     (0),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (0),
		.USE_M0_RUSER                      (0),
		.USE_M0_BUSER                      (0),
		.M0_AXI_VERSION                    ("AXI3"),
		.M0_BURST_LENGTH_WIDTH             (4),
		.S0_BURST_LENGTH_WIDTH             (4),
		.M0_LOCK_WIDTH                     (2),
		.S0_LOCK_WIDTH                     (2),
		.S0_AXI_VERSION                    ("AXI3")
	) sys_mem_interconnect_axi0_m0_id_pad (
		.aclk        (clk_0_clk_clk),                                                        //       clk.clk
		.aresetn     (~sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset),     // clk_reset.reset_n
		.m0_awid     (sys_mem_interconnect_axi0_m0_id_pad_m0_awid),                          //        m0.awid
		.m0_awaddr   (sys_mem_interconnect_axi0_m0_id_pad_m0_awaddr),                        //          .awaddr
		.m0_awlen    (sys_mem_interconnect_axi0_m0_id_pad_m0_awlen),                         //          .awlen
		.m0_awsize   (sys_mem_interconnect_axi0_m0_id_pad_m0_awsize),                        //          .awsize
		.m0_awburst  (sys_mem_interconnect_axi0_m0_id_pad_m0_awburst),                       //          .awburst
		.m0_awlock   (sys_mem_interconnect_axi0_m0_id_pad_m0_awlock),                        //          .awlock
		.m0_awcache  (sys_mem_interconnect_axi0_m0_id_pad_m0_awcache),                       //          .awcache
		.m0_awprot   (sys_mem_interconnect_axi0_m0_id_pad_m0_awprot),                        //          .awprot
		.m0_awuser   (sys_mem_interconnect_axi0_m0_id_pad_m0_awuser),                        //          .awuser
		.m0_awvalid  (sys_mem_interconnect_axi0_m0_id_pad_m0_awvalid),                       //          .awvalid
		.m0_awready  (sys_mem_interconnect_axi0_m0_id_pad_m0_awready),                       //          .awready
		.m0_wid      (sys_mem_interconnect_axi0_m0_id_pad_m0_wid),                           //          .wid
		.m0_wdata    (sys_mem_interconnect_axi0_m0_id_pad_m0_wdata),                         //          .wdata
		.m0_wstrb    (sys_mem_interconnect_axi0_m0_id_pad_m0_wstrb),                         //          .wstrb
		.m0_wlast    (sys_mem_interconnect_axi0_m0_id_pad_m0_wlast),                         //          .wlast
		.m0_wvalid   (sys_mem_interconnect_axi0_m0_id_pad_m0_wvalid),                        //          .wvalid
		.m0_wready   (sys_mem_interconnect_axi0_m0_id_pad_m0_wready),                        //          .wready
		.m0_bid      (sys_mem_interconnect_axi0_m0_id_pad_m0_bid),                           //          .bid
		.m0_bresp    (sys_mem_interconnect_axi0_m0_id_pad_m0_bresp),                         //          .bresp
		.m0_bvalid   (sys_mem_interconnect_axi0_m0_id_pad_m0_bvalid),                        //          .bvalid
		.m0_bready   (sys_mem_interconnect_axi0_m0_id_pad_m0_bready),                        //          .bready
		.m0_arid     (sys_mem_interconnect_axi0_m0_id_pad_m0_arid),                          //          .arid
		.m0_araddr   (sys_mem_interconnect_axi0_m0_id_pad_m0_araddr),                        //          .araddr
		.m0_arlen    (sys_mem_interconnect_axi0_m0_id_pad_m0_arlen),                         //          .arlen
		.m0_arsize   (sys_mem_interconnect_axi0_m0_id_pad_m0_arsize),                        //          .arsize
		.m0_arburst  (sys_mem_interconnect_axi0_m0_id_pad_m0_arburst),                       //          .arburst
		.m0_arlock   (sys_mem_interconnect_axi0_m0_id_pad_m0_arlock),                        //          .arlock
		.m0_arcache  (sys_mem_interconnect_axi0_m0_id_pad_m0_arcache),                       //          .arcache
		.m0_arprot   (sys_mem_interconnect_axi0_m0_id_pad_m0_arprot),                        //          .arprot
		.m0_aruser   (sys_mem_interconnect_axi0_m0_id_pad_m0_aruser),                        //          .aruser
		.m0_arvalid  (sys_mem_interconnect_axi0_m0_id_pad_m0_arvalid),                       //          .arvalid
		.m0_arready  (sys_mem_interconnect_axi0_m0_id_pad_m0_arready),                       //          .arready
		.m0_rid      (sys_mem_interconnect_axi0_m0_id_pad_m0_rid),                           //          .rid
		.m0_rdata    (sys_mem_interconnect_axi0_m0_id_pad_m0_rdata),                         //          .rdata
		.m0_rresp    (sys_mem_interconnect_axi0_m0_id_pad_m0_rresp),                         //          .rresp
		.m0_rlast    (sys_mem_interconnect_axi0_m0_id_pad_m0_rlast),                         //          .rlast
		.m0_rvalid   (sys_mem_interconnect_axi0_m0_id_pad_m0_rvalid),                        //          .rvalid
		.m0_rready   (sys_mem_interconnect_axi0_m0_id_pad_m0_rready),                        //          .rready
		.s0_awid     (sys_mem_interconnect_axi0_m0_awid),                                    //        s0.awid
		.s0_awaddr   (sys_mem_interconnect_axi0_m0_awaddr),                                  //          .awaddr
		.s0_awlen    (sys_mem_interconnect_axi0_m0_awlen),                                   //          .awlen
		.s0_awsize   (sys_mem_interconnect_axi0_m0_awsize),                                  //          .awsize
		.s0_awburst  (sys_mem_interconnect_axi0_m0_awburst),                                 //          .awburst
		.s0_awlock   (sys_mem_interconnect_axi0_m0_awlock),                                  //          .awlock
		.s0_awcache  (sys_mem_interconnect_axi0_m0_awcache),                                 //          .awcache
		.s0_awprot   (sys_mem_interconnect_axi0_m0_awprot),                                  //          .awprot
		.s0_awvalid  (sys_mem_interconnect_axi0_m0_awvalid),                                 //          .awvalid
		.s0_awready  (sys_mem_interconnect_axi0_m0_awready),                                 //          .awready
		.s0_wid      (sys_mem_interconnect_axi0_m0_wid),                                     //          .wid
		.s0_wdata    (sys_mem_interconnect_axi0_m0_wdata),                                   //          .wdata
		.s0_wstrb    (sys_mem_interconnect_axi0_m0_wstrb),                                   //          .wstrb
		.s0_wlast    (sys_mem_interconnect_axi0_m0_wlast),                                   //          .wlast
		.s0_wvalid   (sys_mem_interconnect_axi0_m0_wvalid),                                  //          .wvalid
		.s0_wready   (sys_mem_interconnect_axi0_m0_wready),                                  //          .wready
		.s0_bid      (sys_mem_interconnect_axi0_m0_bid),                                     //          .bid
		.s0_bresp    (sys_mem_interconnect_axi0_m0_bresp),                                   //          .bresp
		.s0_bvalid   (sys_mem_interconnect_axi0_m0_bvalid),                                  //          .bvalid
		.s0_bready   (sys_mem_interconnect_axi0_m0_bready),                                  //          .bready
		.s0_arid     (sys_mem_interconnect_axi0_m0_arid),                                    //          .arid
		.s0_araddr   (sys_mem_interconnect_axi0_m0_araddr),                                  //          .araddr
		.s0_arlen    (sys_mem_interconnect_axi0_m0_arlen),                                   //          .arlen
		.s0_arsize   (sys_mem_interconnect_axi0_m0_arsize),                                  //          .arsize
		.s0_arburst  (sys_mem_interconnect_axi0_m0_arburst),                                 //          .arburst
		.s0_arlock   (sys_mem_interconnect_axi0_m0_arlock),                                  //          .arlock
		.s0_arcache  (sys_mem_interconnect_axi0_m0_arcache),                                 //          .arcache
		.s0_arprot   (sys_mem_interconnect_axi0_m0_arprot),                                  //          .arprot
		.s0_arvalid  (sys_mem_interconnect_axi0_m0_arvalid),                                 //          .arvalid
		.s0_arready  (sys_mem_interconnect_axi0_m0_arready),                                 //          .arready
		.s0_rid      (sys_mem_interconnect_axi0_m0_rid),                                     //          .rid
		.s0_rdata    (sys_mem_interconnect_axi0_m0_rdata),                                   //          .rdata
		.s0_rresp    (sys_mem_interconnect_axi0_m0_rresp),                                   //          .rresp
		.s0_rlast    (sys_mem_interconnect_axi0_m0_rlast),                                   //          .rlast
		.s0_rvalid   (sys_mem_interconnect_axi0_m0_rvalid),                                  //          .rvalid
		.s0_rready   (sys_mem_interconnect_axi0_m0_rready),                                  //          .rready
		.s0_awuser   (1'b0),                                                                 // (terminated)
		.s0_aruser   (1'b0),                                                                 // (terminated)
		.s0_awqos    (4'b0000),                                                              // (terminated)
		.s0_arqos    (4'b0000),                                                              // (terminated)
		.s0_awregion (4'b0000),                                                              // (terminated)
		.s0_arregion (4'b0000),                                                              // (terminated)
		.s0_wuser    (64'b0000000000000000000000000000000000000000000000000000000000000000), // (terminated)
		.s0_ruser    (),                                                                     // (terminated)
		.s0_buser    (),                                                                     // (terminated)
		.m0_awqos    (),                                                                     // (terminated)
		.m0_arqos    (),                                                                     // (terminated)
		.m0_awregion (),                                                                     // (terminated)
		.m0_arregion (),                                                                     // (terminated)
		.m0_wuser    (),                                                                     // (terminated)
		.m0_ruser    (64'b0000000000000000000000000000000000000000000000000000000000000000), // (terminated)
		.m0_buser    (64'b0000000000000000000000000000000000000000000000000000000000000000)  // (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (4),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (64),
		.WDATA_WIDTH               (64),
		.ADDR_USER_WIDTH           (5),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (16),
		.READ_ISSUING_CAPABILITY   (16),
		.PKT_BEGIN_BURST           (139),
		.PKT_CACHE_H               (153),
		.PKT_CACHE_L               (150),
		.PKT_ADDR_SIDEBAND_H       (137),
		.PKT_ADDR_SIDEBAND_L       (133),
		.PKT_PROTECTION_H          (149),
		.PKT_PROTECTION_L          (147),
		.PKT_BURST_SIZE_H          (130),
		.PKT_BURST_SIZE_L          (128),
		.PKT_BURST_TYPE_H          (132),
		.PKT_BURST_TYPE_L          (131),
		.PKT_RESPONSE_STATUS_L     (154),
		.PKT_RESPONSE_STATUS_H     (155),
		.PKT_BURSTWRAP_H           (127),
		.PKT_BURSTWRAP_L           (119),
		.PKT_BYTE_CNT_H            (118),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (141),
		.PKT_SRC_ID_L              (141),
		.PKT_DEST_ID_H             (142),
		.PKT_DEST_ID_L             (142),
		.PKT_THREAD_ID_H           (146),
		.PKT_THREAD_ID_L           (143),
		.PKT_QOS_L                 (140),
		.PKT_QOS_H                 (140),
		.PKT_ORI_BURST_SIZE_L      (156),
		.PKT_ORI_BURST_SIZE_H      (158),
		.PKT_DATA_SIDEBAND_H       (138),
		.PKT_DATA_SIDEBAND_L       (138),
		.ST_DATA_W                 (159),
		.ST_CHANNEL_W              (2),
		.ID                        (0)
	) sys_mem_interconnect_axi0_m0_agent (
		.aclk                   (clk_0_clk_clk),                                                    //              clk.clk
		.aresetn                (~sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (sys_mem_interconnect_axi0_m0_agent_write_cp_valid),                //         write_cp.valid
		.write_cp_data          (sys_mem_interconnect_axi0_m0_agent_write_cp_data),                 //                 .data
		.write_cp_startofpacket (sys_mem_interconnect_axi0_m0_agent_write_cp_startofpacket),        //                 .startofpacket
		.write_cp_endofpacket   (sys_mem_interconnect_axi0_m0_agent_write_cp_endofpacket),          //                 .endofpacket
		.write_cp_ready         (sys_mem_interconnect_axi0_m0_agent_write_cp_ready),                //                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                                //         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                                 //                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                              //                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                        //                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                          //                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                                //                 .ready
		.read_cp_valid          (sys_mem_interconnect_axi0_m0_agent_read_cp_valid),                 //          read_cp.valid
		.read_cp_data           (sys_mem_interconnect_axi0_m0_agent_read_cp_data),                  //                 .data
		.read_cp_startofpacket  (sys_mem_interconnect_axi0_m0_agent_read_cp_startofpacket),         //                 .startofpacket
		.read_cp_endofpacket    (sys_mem_interconnect_axi0_m0_agent_read_cp_endofpacket),           //                 .endofpacket
		.read_cp_ready          (sys_mem_interconnect_axi0_m0_agent_read_cp_ready),                 //                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                            //          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                             //                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                          //                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                                    //                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                                      //                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                            //                 .ready
		.awid                   (sys_mem_interconnect_axi0_m0_id_pad_m0_awid),                      // altera_axi_slave.awid
		.awaddr                 (sys_mem_interconnect_axi0_m0_id_pad_m0_awaddr),                    //                 .awaddr
		.awlen                  (sys_mem_interconnect_axi0_m0_id_pad_m0_awlen),                     //                 .awlen
		.awsize                 (sys_mem_interconnect_axi0_m0_id_pad_m0_awsize),                    //                 .awsize
		.awburst                (sys_mem_interconnect_axi0_m0_id_pad_m0_awburst),                   //                 .awburst
		.awlock                 (sys_mem_interconnect_axi0_m0_id_pad_m0_awlock),                    //                 .awlock
		.awcache                (sys_mem_interconnect_axi0_m0_id_pad_m0_awcache),                   //                 .awcache
		.awprot                 (sys_mem_interconnect_axi0_m0_id_pad_m0_awprot),                    //                 .awprot
		.awuser                 (sys_mem_interconnect_axi0_m0_id_pad_m0_awuser),                    //                 .awuser
		.awvalid                (sys_mem_interconnect_axi0_m0_id_pad_m0_awvalid),                   //                 .awvalid
		.awready                (sys_mem_interconnect_axi0_m0_id_pad_m0_awready),                   //                 .awready
		.wid                    (sys_mem_interconnect_axi0_m0_id_pad_m0_wid),                       //                 .wid
		.wdata                  (sys_mem_interconnect_axi0_m0_id_pad_m0_wdata),                     //                 .wdata
		.wstrb                  (sys_mem_interconnect_axi0_m0_id_pad_m0_wstrb),                     //                 .wstrb
		.wlast                  (sys_mem_interconnect_axi0_m0_id_pad_m0_wlast),                     //                 .wlast
		.wvalid                 (sys_mem_interconnect_axi0_m0_id_pad_m0_wvalid),                    //                 .wvalid
		.wready                 (sys_mem_interconnect_axi0_m0_id_pad_m0_wready),                    //                 .wready
		.bid                    (sys_mem_interconnect_axi0_m0_id_pad_m0_bid),                       //                 .bid
		.bresp                  (sys_mem_interconnect_axi0_m0_id_pad_m0_bresp),                     //                 .bresp
		.bvalid                 (sys_mem_interconnect_axi0_m0_id_pad_m0_bvalid),                    //                 .bvalid
		.bready                 (sys_mem_interconnect_axi0_m0_id_pad_m0_bready),                    //                 .bready
		.arid                   (sys_mem_interconnect_axi0_m0_id_pad_m0_arid),                      //                 .arid
		.araddr                 (sys_mem_interconnect_axi0_m0_id_pad_m0_araddr),                    //                 .araddr
		.arlen                  (sys_mem_interconnect_axi0_m0_id_pad_m0_arlen),                     //                 .arlen
		.arsize                 (sys_mem_interconnect_axi0_m0_id_pad_m0_arsize),                    //                 .arsize
		.arburst                (sys_mem_interconnect_axi0_m0_id_pad_m0_arburst),                   //                 .arburst
		.arlock                 (sys_mem_interconnect_axi0_m0_id_pad_m0_arlock),                    //                 .arlock
		.arcache                (sys_mem_interconnect_axi0_m0_id_pad_m0_arcache),                   //                 .arcache
		.arprot                 (sys_mem_interconnect_axi0_m0_id_pad_m0_arprot),                    //                 .arprot
		.aruser                 (sys_mem_interconnect_axi0_m0_id_pad_m0_aruser),                    //                 .aruser
		.arvalid                (sys_mem_interconnect_axi0_m0_id_pad_m0_arvalid),                   //                 .arvalid
		.arready                (sys_mem_interconnect_axi0_m0_id_pad_m0_arready),                   //                 .arready
		.rid                    (sys_mem_interconnect_axi0_m0_id_pad_m0_rid),                       //                 .rid
		.rdata                  (sys_mem_interconnect_axi0_m0_id_pad_m0_rdata),                     //                 .rdata
		.rresp                  (sys_mem_interconnect_axi0_m0_id_pad_m0_rresp),                     //                 .rresp
		.rlast                  (sys_mem_interconnect_axi0_m0_id_pad_m0_rlast),                     //                 .rlast
		.rvalid                 (sys_mem_interconnect_axi0_m0_id_pad_m0_rvalid),                    //                 .rvalid
		.rready                 (sys_mem_interconnect_axi0_m0_id_pad_m0_rready),                    //                 .rready
		.awqos                  (4'b0000),                                                          //      (terminated)
		.arqos                  (4'b0000),                                                          //      (terminated)
		.awregion               (4'b0000),                                                          //      (terminated)
		.arregion               (4'b0000),                                                          //      (terminated)
		.wuser                  (1'b0),                                                             //      (terminated)
		.ruser                  (),                                                                 //      (terminated)
		.buser                  ()                                                                  //      (terminated)
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (212),
		.PKT_QOS_L                   (212),
		.PKT_THREAD_ID_H             (218),
		.PKT_THREAD_ID_L             (215),
		.PKT_RESPONSE_STATUS_H       (227),
		.PKT_RESPONSE_STATUS_L       (226),
		.PKT_BEGIN_BURST             (211),
		.PKT_CACHE_H                 (225),
		.PKT_CACHE_L                 (222),
		.PKT_DATA_SIDEBAND_H         (210),
		.PKT_DATA_SIDEBAND_L         (210),
		.PKT_ADDR_SIDEBAND_H         (209),
		.PKT_ADDR_SIDEBAND_L         (205),
		.PKT_BURST_TYPE_H            (204),
		.PKT_BURST_TYPE_L            (203),
		.PKT_PROTECTION_H            (221),
		.PKT_PROTECTION_L            (219),
		.PKT_BURST_SIZE_H            (202),
		.PKT_BURST_SIZE_L            (200),
		.PKT_BURSTWRAP_H             (199),
		.PKT_BURSTWRAP_L             (191),
		.PKT_BYTE_CNT_H              (190),
		.PKT_BYTE_CNT_L              (182),
		.PKT_ADDR_H                  (175),
		.PKT_ADDR_L                  (144),
		.PKT_TRANS_EXCLUSIVE         (181),
		.PKT_TRANS_LOCK              (180),
		.PKT_TRANS_COMPRESSED_READ   (176),
		.PKT_TRANS_POSTED            (177),
		.PKT_TRANS_WRITE             (178),
		.PKT_TRANS_READ              (179),
		.PKT_DATA_H                  (127),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (143),
		.PKT_BYTEEN_L                (128),
		.PKT_SRC_ID_H                (213),
		.PKT_SRC_ID_L                (213),
		.PKT_DEST_ID_H               (214),
		.PKT_DEST_ID_L               (214),
		.PKT_ORI_BURST_SIZE_L        (228),
		.PKT_ORI_BURST_SIZE_H        (230),
		.ADDR_USER_WIDTH             (5),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (231),
		.ADDR_WIDTH                  (32),
		.RDATA_WIDTH                 (128),
		.WDATA_WIDTH                 (128),
		.ST_CHANNEL_W                (2),
		.AXI_SLAVE_ID_W              (4),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI3"),
		.WRITE_ACCEPTANCE_CAPABILITY (8),
		.READ_ACCEPTANCE_CAPABILITY  (8)
	) arria10_hps_f2sdram0_data_agent (
		.aclk                   (clk_0_clk_clk),                                                    //        clock_sink.clk
		.aresetn                (~sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), //        reset_sink.reset_n
		.read_cp_valid          (agent_pipeline_001_source0_valid),                                 //           read_cp.valid
		.read_cp_ready          (agent_pipeline_001_source0_ready),                                 //                  .ready
		.read_cp_data           (agent_pipeline_001_source0_data),                                  //                  .data
		.read_cp_channel        (agent_pipeline_001_source0_channel),                               //                  .channel
		.read_cp_startofpacket  (agent_pipeline_001_source0_startofpacket),                         //                  .startofpacket
		.read_cp_endofpacket    (agent_pipeline_001_source0_endofpacket),                           //                  .endofpacket
		.write_cp_ready         (agent_pipeline_source0_ready),                                     //          write_cp.ready
		.write_cp_valid         (agent_pipeline_source0_valid),                                     //                  .valid
		.write_cp_data          (agent_pipeline_source0_data),                                      //                  .data
		.write_cp_channel       (agent_pipeline_source0_channel),                                   //                  .channel
		.write_cp_startofpacket (agent_pipeline_source0_startofpacket),                             //                  .startofpacket
		.write_cp_endofpacket   (agent_pipeline_source0_endofpacket),                               //                  .endofpacket
		.read_rp_ready          (arria10_hps_f2sdram0_data_agent_read_rp_ready),                    //           read_rp.ready
		.read_rp_valid          (arria10_hps_f2sdram0_data_agent_read_rp_valid),                    //                  .valid
		.read_rp_data           (arria10_hps_f2sdram0_data_agent_read_rp_data),                     //                  .data
		.read_rp_startofpacket  (arria10_hps_f2sdram0_data_agent_read_rp_startofpacket),            //                  .startofpacket
		.read_rp_endofpacket    (arria10_hps_f2sdram0_data_agent_read_rp_endofpacket),              //                  .endofpacket
		.write_rp_ready         (arria10_hps_f2sdram0_data_agent_write_rp_ready),                   //          write_rp.ready
		.write_rp_valid         (arria10_hps_f2sdram0_data_agent_write_rp_valid),                   //                  .valid
		.write_rp_data          (arria10_hps_f2sdram0_data_agent_write_rp_data),                    //                  .data
		.write_rp_startofpacket (arria10_hps_f2sdram0_data_agent_write_rp_startofpacket),           //                  .startofpacket
		.write_rp_endofpacket   (arria10_hps_f2sdram0_data_agent_write_rp_endofpacket),             //                  .endofpacket
		.awid                   (arria10_hps_f2sdram0_data_awid),                                   // altera_axi_master.awid
		.awaddr                 (arria10_hps_f2sdram0_data_awaddr),                                 //                  .awaddr
		.awlen                  (arria10_hps_f2sdram0_data_awlen),                                  //                  .awlen
		.awsize                 (arria10_hps_f2sdram0_data_awsize),                                 //                  .awsize
		.awburst                (arria10_hps_f2sdram0_data_awburst),                                //                  .awburst
		.awlock                 (arria10_hps_f2sdram0_data_awlock),                                 //                  .awlock
		.awcache                (arria10_hps_f2sdram0_data_awcache),                                //                  .awcache
		.awprot                 (arria10_hps_f2sdram0_data_awprot),                                 //                  .awprot
		.awuser                 (arria10_hps_f2sdram0_data_awuser),                                 //                  .awuser
		.awvalid                (arria10_hps_f2sdram0_data_awvalid),                                //                  .awvalid
		.awready                (arria10_hps_f2sdram0_data_awready),                                //                  .awready
		.wid                    (arria10_hps_f2sdram0_data_wid),                                    //                  .wid
		.wdata                  (arria10_hps_f2sdram0_data_wdata),                                  //                  .wdata
		.wstrb                  (arria10_hps_f2sdram0_data_wstrb),                                  //                  .wstrb
		.wlast                  (arria10_hps_f2sdram0_data_wlast),                                  //                  .wlast
		.wvalid                 (arria10_hps_f2sdram0_data_wvalid),                                 //                  .wvalid
		.wready                 (arria10_hps_f2sdram0_data_wready),                                 //                  .wready
		.bid                    (arria10_hps_f2sdram0_data_bid),                                    //                  .bid
		.bresp                  (arria10_hps_f2sdram0_data_bresp),                                  //                  .bresp
		.bvalid                 (arria10_hps_f2sdram0_data_bvalid),                                 //                  .bvalid
		.bready                 (arria10_hps_f2sdram0_data_bready),                                 //                  .bready
		.arid                   (arria10_hps_f2sdram0_data_arid),                                   //                  .arid
		.araddr                 (arria10_hps_f2sdram0_data_araddr),                                 //                  .araddr
		.arlen                  (arria10_hps_f2sdram0_data_arlen),                                  //                  .arlen
		.arsize                 (arria10_hps_f2sdram0_data_arsize),                                 //                  .arsize
		.arburst                (arria10_hps_f2sdram0_data_arburst),                                //                  .arburst
		.arlock                 (arria10_hps_f2sdram0_data_arlock),                                 //                  .arlock
		.arcache                (arria10_hps_f2sdram0_data_arcache),                                //                  .arcache
		.arprot                 (arria10_hps_f2sdram0_data_arprot),                                 //                  .arprot
		.aruser                 (arria10_hps_f2sdram0_data_aruser),                                 //                  .aruser
		.arvalid                (arria10_hps_f2sdram0_data_arvalid),                                //                  .arvalid
		.arready                (arria10_hps_f2sdram0_data_arready),                                //                  .arready
		.rid                    (arria10_hps_f2sdram0_data_rid),                                    //                  .rid
		.rdata                  (arria10_hps_f2sdram0_data_rdata),                                  //                  .rdata
		.rresp                  (arria10_hps_f2sdram0_data_rresp),                                  //                  .rresp
		.rlast                  (arria10_hps_f2sdram0_data_rlast),                                  //                  .rlast
		.rvalid                 (arria10_hps_f2sdram0_data_rvalid),                                 //                  .rvalid
		.rready                 (arria10_hps_f2sdram0_data_rready)                                  //                  .rready
	);

	ghrd_10as066n2_altera_merlin_router_161_ujcnlfq router (
		.sink_ready         (sys_mem_interconnect_axi0_m0_agent_write_cp_ready),               //      sink.ready
		.sink_valid         (sys_mem_interconnect_axi0_m0_agent_write_cp_valid),               //          .valid
		.sink_data          (sys_mem_interconnect_axi0_m0_agent_write_cp_data),                //          .data
		.sink_startofpacket (sys_mem_interconnect_axi0_m0_agent_write_cp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (sys_mem_interconnect_axi0_m0_agent_write_cp_endofpacket),         //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                //       src.ready
		.src_valid          (router_src_valid),                                                //          .valid
		.src_data           (router_src_data),                                                 //          .data
		.src_channel        (router_src_channel),                                              //          .channel
		.src_startofpacket  (router_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                           //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_zvbuxiy router_001 (
		.sink_ready         (sys_mem_interconnect_axi0_m0_agent_read_cp_ready),                //      sink.ready
		.sink_valid         (sys_mem_interconnect_axi0_m0_agent_read_cp_valid),                //          .valid
		.sink_data          (sys_mem_interconnect_axi0_m0_agent_read_cp_data),                 //          .data
		.sink_startofpacket (sys_mem_interconnect_axi0_m0_agent_read_cp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (sys_mem_interconnect_axi0_m0_agent_read_cp_endofpacket),          //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                            //       src.ready
		.src_valid          (router_001_src_valid),                                            //          .valid
		.src_data           (router_001_src_data),                                             //          .data
		.src_channel        (router_001_src_channel),                                          //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                       //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_zd4cbxi router_002 (
		.sink_ready         (agent_pipeline_002_source0_ready),                                //      sink.ready
		.sink_valid         (agent_pipeline_002_source0_valid),                                //          .valid
		.sink_data          (agent_pipeline_002_source0_data),                                 //          .data
		.sink_startofpacket (agent_pipeline_002_source0_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (agent_pipeline_002_source0_endofpacket),                          //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                            //       src.ready
		.src_valid          (router_002_src_valid),                                            //          .valid
		.src_data           (router_002_src_data),                                             //          .data
		.src_channel        (router_002_src_channel),                                          //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                       //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_ltyfvwa router_003 (
		.sink_ready         (agent_pipeline_003_source0_ready),                                //      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),                                //          .valid
		.sink_data          (agent_pipeline_003_source0_data),                                 //          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),                          //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                            //       src.ready
		.src_valid          (router_003_src_valid),                                            //          .valid
		.src_data           (router_003_src_data),                                             //          .data
		.src_channel        (router_003_src_channel),                                          //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                       //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_kezl4iy cmd_demux (
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                                //      sink.ready
		.sink_channel       (router_src_channel),                                              //          .channel
		.sink_data          (router_src_data),                                                 //          .data
		.sink_startofpacket (router_src_startofpacket),                                        //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                          //          .endofpacket
		.sink_valid         (router_src_valid),                                                //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                            //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                            //          .valid
		.src0_data          (cmd_demux_src0_data),                                             //          .data
		.src0_channel       (cmd_demux_src0_channel),                                          //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                       //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_kezl4iy cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                            //      sink.ready
		.sink_channel       (router_001_src_channel),                                          //          .channel
		.sink_data          (router_001_src_data),                                             //          .data
		.sink_startofpacket (router_001_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_001_src_valid),                                            //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                        //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                        //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                         //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                      //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                   //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_4khdawa cmd_mux (
		.clk                 (clk_0_clk_clk),                                                   //       clk.clk
		.reset               (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                               //       src.ready
		.src_valid           (cmd_mux_src_valid),                                               //          .valid
		.src_data            (cmd_mux_src_data),                                                //          .data
		.src_channel         (cmd_mux_src_channel),                                             //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                                      //     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                                      //          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                                    //          .channel
		.sink0_data          (mux_pipeline_source0_data),                                       //          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket)                                 //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_4khdawa cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                                   //       clk.clk
		.reset               (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                           //          .valid
		.src_data            (cmd_mux_001_src_data),                                            //          .data
		.src_channel         (cmd_mux_001_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (mux_pipeline_001_source0_ready),                                  //     sink0.ready
		.sink0_valid         (mux_pipeline_001_source0_valid),                                  //          .valid
		.sink0_channel       (mux_pipeline_001_source0_channel),                                //          .channel
		.sink0_data          (mux_pipeline_001_source0_data),                                   //          .data
		.sink0_startofpacket (mux_pipeline_001_source0_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_001_source0_endofpacket)                             //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_kezl4iy rsp_demux (
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.sink_ready         (arria10_hps_f2sdram0_data_wr_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (arria10_hps_f2sdram0_data_wr_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (arria10_hps_f2sdram0_data_wr_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (arria10_hps_f2sdram0_data_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (arria10_hps_f2sdram0_data_wr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (arria10_hps_f2sdram0_data_wr_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                             //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                             //          .valid
		.src0_data          (rsp_demux_src0_data),                                              //          .data
		.src0_channel       (rsp_demux_src0_channel),                                           //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                        //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_kezl4iy rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.sink_ready         (arria10_hps_f2sdram0_data_rd_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (arria10_hps_f2sdram0_data_rd_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (arria10_hps_f2sdram0_data_rd_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (arria10_hps_f2sdram0_data_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (arria10_hps_f2sdram0_data_rd_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (arria10_hps_f2sdram0_data_rd_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                    //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_utjzd6y rsp_mux (
		.clk                 (clk_0_clk_clk),                                                   //       clk.clk
		.reset               (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                               //       src.ready
		.src_valid           (rsp_mux_src_valid),                                               //          .valid
		.src_data            (rsp_mux_src_data),                                                //          .data
		.src_channel         (rsp_mux_src_channel),                                             //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (mux_pipeline_002_source0_ready),                                  //     sink0.ready
		.sink0_valid         (mux_pipeline_002_source0_valid),                                  //          .valid
		.sink0_channel       (mux_pipeline_002_source0_channel),                                //          .channel
		.sink0_data          (mux_pipeline_002_source0_data),                                   //          .data
		.sink0_startofpacket (mux_pipeline_002_source0_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_002_source0_endofpacket)                             //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_utjzd6y rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                                   //       clk.clk
		.reset               (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                           //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                           //          .valid
		.src_data            (rsp_mux_001_src_data),                                            //          .data
		.src_channel         (rsp_mux_001_src_channel),                                         //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (mux_pipeline_003_source0_ready),                                  //     sink0.ready
		.sink0_valid         (mux_pipeline_003_source0_valid),                                  //          .valid
		.sink0_channel       (mux_pipeline_003_source0_channel),                                //          .channel
		.sink0_data          (mux_pipeline_003_source0_data),                                   //          .data
		.sink0_startofpacket (mux_pipeline_003_source0_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_003_source0_endofpacket)                             //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (118),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (127),
		.IN_PKT_BURSTWRAP_L            (119),
		.IN_PKT_BURST_SIZE_H           (130),
		.IN_PKT_BURST_SIZE_L           (128),
		.IN_PKT_RESPONSE_STATUS_H      (155),
		.IN_PKT_RESPONSE_STATUS_L      (154),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (132),
		.IN_PKT_BURST_TYPE_L           (131),
		.IN_PKT_ORI_BURST_SIZE_L       (156),
		.IN_PKT_ORI_BURST_SIZE_H       (158),
		.IN_ST_DATA_W                  (159),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (227),
		.OUT_PKT_RESPONSE_STATUS_L     (226),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (228),
		.OUT_PKT_ORI_BURST_SIZE_H      (230),
		.OUT_ST_DATA_W                 (231),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) arria10_hps_f2sdram0_data_wr_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                              //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                          //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                //          .ready
		.in_data              (cmd_mux_src_data),                                                 //          .data
		.out_endofpacket      (arria10_hps_f2sdram0_data_wr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (arria10_hps_f2sdram0_data_wr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (arria10_hps_f2sdram0_data_wr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (arria10_hps_f2sdram0_data_wr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (arria10_hps_f2sdram0_data_wr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (arria10_hps_f2sdram0_data_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (118),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (127),
		.IN_PKT_BURSTWRAP_L            (119),
		.IN_PKT_BURST_SIZE_H           (130),
		.IN_PKT_BURST_SIZE_L           (128),
		.IN_PKT_RESPONSE_STATUS_H      (155),
		.IN_PKT_RESPONSE_STATUS_L      (154),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (132),
		.IN_PKT_BURST_TYPE_L           (131),
		.IN_PKT_ORI_BURST_SIZE_L       (156),
		.IN_PKT_ORI_BURST_SIZE_H       (158),
		.IN_ST_DATA_W                  (159),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (227),
		.OUT_PKT_RESPONSE_STATUS_L     (226),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (228),
		.OUT_PKT_ORI_BURST_SIZE_H      (230),
		.OUT_ST_DATA_W                 (231),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) arria10_hps_f2sdram0_data_rd_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                            //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                          //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                      //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                            //          .ready
		.in_data              (cmd_mux_001_src_data),                                             //          .data
		.out_endofpacket      (arria10_hps_f2sdram0_data_rd_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (arria10_hps_f2sdram0_data_rd_cmd_width_adapter_src_data),          //          .data
		.out_channel          (arria10_hps_f2sdram0_data_rd_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (arria10_hps_f2sdram0_data_rd_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (arria10_hps_f2sdram0_data_rd_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (arria10_hps_f2sdram0_data_rd_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (227),
		.IN_PKT_RESPONSE_STATUS_L      (226),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (228),
		.IN_PKT_ORI_BURST_SIZE_H       (230),
		.IN_ST_DATA_W                  (231),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (118),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (130),
		.OUT_PKT_BURST_SIZE_L          (128),
		.OUT_PKT_RESPONSE_STATUS_H     (155),
		.OUT_PKT_RESPONSE_STATUS_L     (154),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (132),
		.OUT_PKT_BURST_TYPE_L          (131),
		.OUT_PKT_ORI_BURST_SIZE_L      (156),
		.OUT_PKT_ORI_BURST_SIZE_H      (158),
		.OUT_ST_DATA_W                 (159),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) arria10_hps_f2sdram0_data_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (router_002_src_valid),                                             //      sink.valid
		.in_channel           (router_002_src_channel),                                           //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                       //          .endofpacket
		.in_ready             (router_002_src_ready),                                             //          .ready
		.in_data              (router_002_src_data),                                              //          .data
		.out_endofpacket      (arria10_hps_f2sdram0_data_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (arria10_hps_f2sdram0_data_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (arria10_hps_f2sdram0_data_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (arria10_hps_f2sdram0_data_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (arria10_hps_f2sdram0_data_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (arria10_hps_f2sdram0_data_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (227),
		.IN_PKT_RESPONSE_STATUS_L      (226),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (228),
		.IN_PKT_ORI_BURST_SIZE_H       (230),
		.IN_ST_DATA_W                  (231),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (118),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (130),
		.OUT_PKT_BURST_SIZE_L          (128),
		.OUT_PKT_RESPONSE_STATUS_H     (155),
		.OUT_PKT_RESPONSE_STATUS_L     (154),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (132),
		.OUT_PKT_BURST_TYPE_L          (131),
		.OUT_PKT_ORI_BURST_SIZE_L      (156),
		.OUT_PKT_ORI_BURST_SIZE_H      (158),
		.OUT_ST_DATA_W                 (159),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) arria10_hps_f2sdram0_data_rd_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (router_003_src_valid),                                             //      sink.valid
		.in_channel           (router_003_src_channel),                                           //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                                       //          .endofpacket
		.in_ready             (router_003_src_ready),                                             //          .ready
		.in_data              (router_003_src_data),                                              //          .data
		.out_endofpacket      (arria10_hps_f2sdram0_data_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (arria10_hps_f2sdram0_data_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (arria10_hps_f2sdram0_data_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (arria10_hps_f2sdram0_data_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (arria10_hps_f2sdram0_data_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (arria10_hps_f2sdram0_data_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (231),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (clk_0_clk_clk),                                                    //       cr0.clk
		.reset             (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (arria10_hps_f2sdram0_data_wr_cmd_width_adapter_src_ready),         //     sink0.ready
		.in_valid          (arria10_hps_f2sdram0_data_wr_cmd_width_adapter_src_valid),         //          .valid
		.in_startofpacket  (arria10_hps_f2sdram0_data_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_endofpacket    (arria10_hps_f2sdram0_data_wr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.in_data           (arria10_hps_f2sdram0_data_wr_cmd_width_adapter_src_data),          //          .data
		.in_channel        (arria10_hps_f2sdram0_data_wr_cmd_width_adapter_src_channel),       //          .channel
		.out_ready         (agent_pipeline_source0_ready),                                     //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                                     //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                             //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                               //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                                      //          .data
		.out_channel       (agent_pipeline_source0_channel),                                   //          .channel
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (231),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (clk_0_clk_clk),                                                    //       cr0.clk
		.reset             (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (arria10_hps_f2sdram0_data_rd_cmd_width_adapter_src_ready),         //     sink0.ready
		.in_valid          (arria10_hps_f2sdram0_data_rd_cmd_width_adapter_src_valid),         //          .valid
		.in_startofpacket  (arria10_hps_f2sdram0_data_rd_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_endofpacket    (arria10_hps_f2sdram0_data_rd_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.in_data           (arria10_hps_f2sdram0_data_rd_cmd_width_adapter_src_data),          //          .data
		.in_channel        (arria10_hps_f2sdram0_data_rd_cmd_width_adapter_src_channel),       //          .channel
		.out_ready         (agent_pipeline_001_source0_ready),                                 //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                                 //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),                         //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),                           //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                                  //          .data
		.out_channel       (agent_pipeline_001_source0_channel),                               //          .channel
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (231),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_002 (
		.clk               (clk_0_clk_clk),                                                   //       cr0.clk
		.reset             (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (arria10_hps_f2sdram0_data_agent_write_rp_ready),                  //     sink0.ready
		.in_valid          (arria10_hps_f2sdram0_data_agent_write_rp_valid),                  //          .valid
		.in_startofpacket  (arria10_hps_f2sdram0_data_agent_write_rp_startofpacket),          //          .startofpacket
		.in_endofpacket    (arria10_hps_f2sdram0_data_agent_write_rp_endofpacket),            //          .endofpacket
		.in_data           (arria10_hps_f2sdram0_data_agent_write_rp_data),                   //          .data
		.out_ready         (agent_pipeline_002_source0_ready),                                //   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),                                //          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket),                        //          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),                          //          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),                                 //          .data
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_channel       (),                                                                // (terminated)
		.in_channel        (1'b0)                                                             // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (231),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_003 (
		.clk               (clk_0_clk_clk),                                                   //       cr0.clk
		.reset             (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (arria10_hps_f2sdram0_data_agent_read_rp_ready),                   //     sink0.ready
		.in_valid          (arria10_hps_f2sdram0_data_agent_read_rp_valid),                   //          .valid
		.in_startofpacket  (arria10_hps_f2sdram0_data_agent_read_rp_startofpacket),           //          .startofpacket
		.in_endofpacket    (arria10_hps_f2sdram0_data_agent_read_rp_endofpacket),             //          .endofpacket
		.in_data           (arria10_hps_f2sdram0_data_agent_read_rp_data),                    //          .data
		.out_ready         (agent_pipeline_003_source0_ready),                                //   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),                                //          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket),                        //          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),                          //          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),                                 //          .data
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_channel       (),                                                                // (terminated)
		.in_channel        (1'b0)                                                             // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (159),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline (
		.clk               (clk_0_clk_clk),                                                   //       cr0.clk
		.reset             (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                            //     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                                            //          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                    //          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                      //          .endofpacket
		.in_data           (cmd_demux_src0_data),                                             //          .data
		.in_channel        (cmd_demux_src0_channel),                                          //          .channel
		.out_ready         (mux_pipeline_source0_ready),                                      //   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                                      //          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),                              //          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),                                //          .endofpacket
		.out_data          (mux_pipeline_source0_data),                                       //          .data
		.out_channel       (mux_pipeline_source0_channel),                                    //          .channel
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_error          (1'b0)                                                             // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (159),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_001 (
		.clk               (clk_0_clk_clk),                                                   //       cr0.clk
		.reset             (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                        //     sink0.ready
		.in_valid          (cmd_demux_001_src0_valid),                                        //          .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_demux_001_src0_data),                                         //          .data
		.in_channel        (cmd_demux_001_src0_channel),                                      //          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                                  //   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                                  //          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),                          //          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),                            //          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                                   //          .data
		.out_channel       (mux_pipeline_001_source0_channel),                                //          .channel
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_error          (1'b0)                                                             // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (159),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_002 (
		.clk               (clk_0_clk_clk),                                                   //       cr0.clk
		.reset             (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                            //     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                                            //          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                    //          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                      //          .endofpacket
		.in_data           (rsp_demux_src0_data),                                             //          .data
		.in_channel        (rsp_demux_src0_channel),                                          //          .channel
		.out_ready         (mux_pipeline_002_source0_ready),                                  //   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),                                  //          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),                          //          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),                            //          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),                                   //          .data
		.out_channel       (mux_pipeline_002_source0_channel),                                //          .channel
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_error          (1'b0)                                                             // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (159),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_003 (
		.clk               (clk_0_clk_clk),                                                   //       cr0.clk
		.reset             (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                        //     sink0.ready
		.in_valid          (rsp_demux_001_src0_valid),                                        //          .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                                //          .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                                  //          .endofpacket
		.in_data           (rsp_demux_001_src0_data),                                         //          .data
		.in_channel        (rsp_demux_001_src0_channel),                                      //          .channel
		.out_ready         (mux_pipeline_003_source0_ready),                                  //   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),                                  //          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),                          //          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),                            //          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),                                   //          .data
		.out_channel       (mux_pipeline_003_source0_channel),                                //          .channel
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_error          (1'b0)                                                             // (terminated)
	);

endmodule
