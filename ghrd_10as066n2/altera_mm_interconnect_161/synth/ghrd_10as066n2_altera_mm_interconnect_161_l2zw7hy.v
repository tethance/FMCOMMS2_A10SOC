// ghrd_10as066n2_altera_mm_interconnect_161_l2zw7hy.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 203

`timescale 1 ps / 1 ps
module ghrd_10as066n2_altera_mm_interconnect_161_l2zw7hy (
		output wire [13:0] fmcomms2_axi_ad9361_adc_dma_s_axi_awaddr,                   //                    fmcomms2_axi_ad9361_adc_dma_s_axi.awaddr
		output wire [2:0]  fmcomms2_axi_ad9361_adc_dma_s_axi_awprot,                   //                                                     .awprot
		output wire        fmcomms2_axi_ad9361_adc_dma_s_axi_awvalid,                  //                                                     .awvalid
		input  wire        fmcomms2_axi_ad9361_adc_dma_s_axi_awready,                  //                                                     .awready
		output wire [31:0] fmcomms2_axi_ad9361_adc_dma_s_axi_wdata,                    //                                                     .wdata
		output wire [3:0]  fmcomms2_axi_ad9361_adc_dma_s_axi_wstrb,                    //                                                     .wstrb
		output wire        fmcomms2_axi_ad9361_adc_dma_s_axi_wvalid,                   //                                                     .wvalid
		input  wire        fmcomms2_axi_ad9361_adc_dma_s_axi_wready,                   //                                                     .wready
		input  wire [1:0]  fmcomms2_axi_ad9361_adc_dma_s_axi_bresp,                    //                                                     .bresp
		input  wire        fmcomms2_axi_ad9361_adc_dma_s_axi_bvalid,                   //                                                     .bvalid
		output wire        fmcomms2_axi_ad9361_adc_dma_s_axi_bready,                   //                                                     .bready
		output wire [13:0] fmcomms2_axi_ad9361_adc_dma_s_axi_araddr,                   //                                                     .araddr
		output wire [2:0]  fmcomms2_axi_ad9361_adc_dma_s_axi_arprot,                   //                                                     .arprot
		output wire        fmcomms2_axi_ad9361_adc_dma_s_axi_arvalid,                  //                                                     .arvalid
		input  wire        fmcomms2_axi_ad9361_adc_dma_s_axi_arready,                  //                                                     .arready
		input  wire [31:0] fmcomms2_axi_ad9361_adc_dma_s_axi_rdata,                    //                                                     .rdata
		input  wire [1:0]  fmcomms2_axi_ad9361_adc_dma_s_axi_rresp,                    //                                                     .rresp
		input  wire        fmcomms2_axi_ad9361_adc_dma_s_axi_rvalid,                   //                                                     .rvalid
		output wire        fmcomms2_axi_ad9361_adc_dma_s_axi_rready,                   //                                                     .rready
		output wire [13:0] fmcomms2_axi_ad9361_dac_dma_s_axi_awaddr,                   //                    fmcomms2_axi_ad9361_dac_dma_s_axi.awaddr
		output wire [2:0]  fmcomms2_axi_ad9361_dac_dma_s_axi_awprot,                   //                                                     .awprot
		output wire        fmcomms2_axi_ad9361_dac_dma_s_axi_awvalid,                  //                                                     .awvalid
		input  wire        fmcomms2_axi_ad9361_dac_dma_s_axi_awready,                  //                                                     .awready
		output wire [31:0] fmcomms2_axi_ad9361_dac_dma_s_axi_wdata,                    //                                                     .wdata
		output wire [3:0]  fmcomms2_axi_ad9361_dac_dma_s_axi_wstrb,                    //                                                     .wstrb
		output wire        fmcomms2_axi_ad9361_dac_dma_s_axi_wvalid,                   //                                                     .wvalid
		input  wire        fmcomms2_axi_ad9361_dac_dma_s_axi_wready,                   //                                                     .wready
		input  wire [1:0]  fmcomms2_axi_ad9361_dac_dma_s_axi_bresp,                    //                                                     .bresp
		input  wire        fmcomms2_axi_ad9361_dac_dma_s_axi_bvalid,                   //                                                     .bvalid
		output wire        fmcomms2_axi_ad9361_dac_dma_s_axi_bready,                   //                                                     .bready
		output wire [13:0] fmcomms2_axi_ad9361_dac_dma_s_axi_araddr,                   //                                                     .araddr
		output wire [2:0]  fmcomms2_axi_ad9361_dac_dma_s_axi_arprot,                   //                                                     .arprot
		output wire        fmcomms2_axi_ad9361_dac_dma_s_axi_arvalid,                  //                                                     .arvalid
		input  wire        fmcomms2_axi_ad9361_dac_dma_s_axi_arready,                  //                                                     .arready
		input  wire [31:0] fmcomms2_axi_ad9361_dac_dma_s_axi_rdata,                    //                                                     .rdata
		input  wire [1:0]  fmcomms2_axi_ad9361_dac_dma_s_axi_rresp,                    //                                                     .rresp
		input  wire        fmcomms2_axi_ad9361_dac_dma_s_axi_rvalid,                   //                                                     .rvalid
		output wire        fmcomms2_axi_ad9361_dac_dma_s_axi_rready,                   //                                                     .rready
		output wire [15:0] fmcomms2_axi_ad9361_s_axi_awaddr,                           //                            fmcomms2_axi_ad9361_s_axi.awaddr
		output wire [2:0]  fmcomms2_axi_ad9361_s_axi_awprot,                           //                                                     .awprot
		output wire        fmcomms2_axi_ad9361_s_axi_awvalid,                          //                                                     .awvalid
		input  wire        fmcomms2_axi_ad9361_s_axi_awready,                          //                                                     .awready
		output wire [31:0] fmcomms2_axi_ad9361_s_axi_wdata,                            //                                                     .wdata
		output wire [3:0]  fmcomms2_axi_ad9361_s_axi_wstrb,                            //                                                     .wstrb
		output wire        fmcomms2_axi_ad9361_s_axi_wvalid,                           //                                                     .wvalid
		input  wire        fmcomms2_axi_ad9361_s_axi_wready,                           //                                                     .wready
		input  wire [1:0]  fmcomms2_axi_ad9361_s_axi_bresp,                            //                                                     .bresp
		input  wire        fmcomms2_axi_ad9361_s_axi_bvalid,                           //                                                     .bvalid
		output wire        fmcomms2_axi_ad9361_s_axi_bready,                           //                                                     .bready
		output wire [15:0] fmcomms2_axi_ad9361_s_axi_araddr,                           //                                                     .araddr
		output wire [2:0]  fmcomms2_axi_ad9361_s_axi_arprot,                           //                                                     .arprot
		output wire        fmcomms2_axi_ad9361_s_axi_arvalid,                          //                                                     .arvalid
		input  wire        fmcomms2_axi_ad9361_s_axi_arready,                          //                                                     .arready
		input  wire [31:0] fmcomms2_axi_ad9361_s_axi_rdata,                            //                                                     .rdata
		input  wire [1:0]  fmcomms2_axi_ad9361_s_axi_rresp,                            //                                                     .rresp
		input  wire        fmcomms2_axi_ad9361_s_axi_rvalid,                           //                                                     .rvalid
		output wire        fmcomms2_axi_ad9361_s_axi_rready,                           //                                                     .rready
		input  wire [11:0] sys_cpu_interconnect_m0_awid,                               //                              sys_cpu_interconnect_m0.awid
		input  wire [19:0] sys_cpu_interconnect_m0_awaddr,                             //                                                     .awaddr
		input  wire [3:0]  sys_cpu_interconnect_m0_awlen,                              //                                                     .awlen
		input  wire [2:0]  sys_cpu_interconnect_m0_awsize,                             //                                                     .awsize
		input  wire [1:0]  sys_cpu_interconnect_m0_awburst,                            //                                                     .awburst
		input  wire [1:0]  sys_cpu_interconnect_m0_awlock,                             //                                                     .awlock
		input  wire [3:0]  sys_cpu_interconnect_m0_awcache,                            //                                                     .awcache
		input  wire [2:0]  sys_cpu_interconnect_m0_awprot,                             //                                                     .awprot
		input  wire        sys_cpu_interconnect_m0_awvalid,                            //                                                     .awvalid
		output wire        sys_cpu_interconnect_m0_awready,                            //                                                     .awready
		input  wire [11:0] sys_cpu_interconnect_m0_wid,                                //                                                     .wid
		input  wire [31:0] sys_cpu_interconnect_m0_wdata,                              //                                                     .wdata
		input  wire [3:0]  sys_cpu_interconnect_m0_wstrb,                              //                                                     .wstrb
		input  wire        sys_cpu_interconnect_m0_wlast,                              //                                                     .wlast
		input  wire        sys_cpu_interconnect_m0_wvalid,                             //                                                     .wvalid
		output wire        sys_cpu_interconnect_m0_wready,                             //                                                     .wready
		output wire [11:0] sys_cpu_interconnect_m0_bid,                                //                                                     .bid
		output wire [1:0]  sys_cpu_interconnect_m0_bresp,                              //                                                     .bresp
		output wire        sys_cpu_interconnect_m0_bvalid,                             //                                                     .bvalid
		input  wire        sys_cpu_interconnect_m0_bready,                             //                                                     .bready
		input  wire [11:0] sys_cpu_interconnect_m0_arid,                               //                                                     .arid
		input  wire [19:0] sys_cpu_interconnect_m0_araddr,                             //                                                     .araddr
		input  wire [3:0]  sys_cpu_interconnect_m0_arlen,                              //                                                     .arlen
		input  wire [2:0]  sys_cpu_interconnect_m0_arsize,                             //                                                     .arsize
		input  wire [1:0]  sys_cpu_interconnect_m0_arburst,                            //                                                     .arburst
		input  wire [1:0]  sys_cpu_interconnect_m0_arlock,                             //                                                     .arlock
		input  wire [3:0]  sys_cpu_interconnect_m0_arcache,                            //                                                     .arcache
		input  wire [2:0]  sys_cpu_interconnect_m0_arprot,                             //                                                     .arprot
		input  wire        sys_cpu_interconnect_m0_arvalid,                            //                                                     .arvalid
		output wire        sys_cpu_interconnect_m0_arready,                            //                                                     .arready
		output wire [11:0] sys_cpu_interconnect_m0_rid,                                //                                                     .rid
		output wire [31:0] sys_cpu_interconnect_m0_rdata,                              //                                                     .rdata
		output wire [1:0]  sys_cpu_interconnect_m0_rresp,                              //                                                     .rresp
		output wire        sys_cpu_interconnect_m0_rlast,                              //                                                     .rlast
		output wire        sys_cpu_interconnect_m0_rvalid,                             //                                                     .rvalid
		input  wire        sys_cpu_interconnect_m0_rready,                             //                                                     .rready
		input  wire        clk_0_clk_clk,                                              //                                            clk_0_clk.clk
		input  wire        fmcomms2_sys_rst_reset_bridge_in_reset_reset,               //               fmcomms2_sys_rst_reset_bridge_in_reset.reset
		input  wire        sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset  // sys_cpu_interconnect_clk_reset_reset_bridge_in_reset.reset
	);

	wire          sys_cpu_interconnect_m0_agent_write_cp_valid;                             // sys_cpu_interconnect_m0_agent:write_cp_valid -> router:sink_valid
	wire  [112:0] sys_cpu_interconnect_m0_agent_write_cp_data;                              // sys_cpu_interconnect_m0_agent:write_cp_data -> router:sink_data
	wire          sys_cpu_interconnect_m0_agent_write_cp_ready;                             // router:sink_ready -> sys_cpu_interconnect_m0_agent:write_cp_ready
	wire          sys_cpu_interconnect_m0_agent_write_cp_startofpacket;                     // sys_cpu_interconnect_m0_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          sys_cpu_interconnect_m0_agent_write_cp_endofpacket;                       // sys_cpu_interconnect_m0_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          sys_cpu_interconnect_m0_agent_read_cp_valid;                              // sys_cpu_interconnect_m0_agent:read_cp_valid -> router_001:sink_valid
	wire  [112:0] sys_cpu_interconnect_m0_agent_read_cp_data;                               // sys_cpu_interconnect_m0_agent:read_cp_data -> router_001:sink_data
	wire          sys_cpu_interconnect_m0_agent_read_cp_ready;                              // router_001:sink_ready -> sys_cpu_interconnect_m0_agent:read_cp_ready
	wire          sys_cpu_interconnect_m0_agent_read_cp_startofpacket;                      // sys_cpu_interconnect_m0_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          sys_cpu_interconnect_m0_agent_read_cp_endofpacket;                        // sys_cpu_interconnect_m0_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_002_src_valid;                                                     // router_002:src_valid -> rsp_demux:sink_valid
	wire  [112:0] router_002_src_data;                                                      // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                     // rsp_demux:sink_ready -> router_002:src_ready
	wire    [5:0] router_002_src_channel;                                                   // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                             // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                               // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_003_src_valid;                                                     // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [112:0] router_003_src_data;                                                      // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                     // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [5:0] router_003_src_channel;                                                   // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                             // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                               // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_004_src_valid;                                                     // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [112:0] router_004_src_data;                                                      // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                     // rsp_demux_002:sink_ready -> router_004:src_ready
	wire    [5:0] router_004_src_channel;                                                   // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                             // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                               // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_005_src_valid;                                                     // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [112:0] router_005_src_data;                                                      // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                     // rsp_demux_003:sink_ready -> router_005:src_ready
	wire    [5:0] router_005_src_channel;                                                   // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                             // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                               // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_006_src_valid;                                                     // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [112:0] router_006_src_data;                                                      // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                     // rsp_demux_004:sink_ready -> router_006:src_ready
	wire    [5:0] router_006_src_channel;                                                   // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                             // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                               // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_007_src_valid;                                                     // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [112:0] router_007_src_data;                                                      // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                     // rsp_demux_005:sink_ready -> router_007:src_ready
	wire    [5:0] router_007_src_channel;                                                   // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                             // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                               // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_src_valid;                                                         // router:src_valid -> sys_cpu_interconnect_m0_wr_limiter:cmd_sink_valid
	wire  [112:0] router_src_data;                                                          // router:src_data -> sys_cpu_interconnect_m0_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                         // sys_cpu_interconnect_m0_wr_limiter:cmd_sink_ready -> router:src_ready
	wire    [5:0] router_src_channel;                                                       // router:src_channel -> sys_cpu_interconnect_m0_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                 // router:src_startofpacket -> sys_cpu_interconnect_m0_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                   // router:src_endofpacket -> sys_cpu_interconnect_m0_wr_limiter:cmd_sink_endofpacket
	wire          sys_cpu_interconnect_m0_wr_limiter_rsp_src_valid;                         // sys_cpu_interconnect_m0_wr_limiter:rsp_src_valid -> sys_cpu_interconnect_m0_agent:write_rp_valid
	wire  [112:0] sys_cpu_interconnect_m0_wr_limiter_rsp_src_data;                          // sys_cpu_interconnect_m0_wr_limiter:rsp_src_data -> sys_cpu_interconnect_m0_agent:write_rp_data
	wire          sys_cpu_interconnect_m0_wr_limiter_rsp_src_ready;                         // sys_cpu_interconnect_m0_agent:write_rp_ready -> sys_cpu_interconnect_m0_wr_limiter:rsp_src_ready
	wire    [5:0] sys_cpu_interconnect_m0_wr_limiter_rsp_src_channel;                       // sys_cpu_interconnect_m0_wr_limiter:rsp_src_channel -> sys_cpu_interconnect_m0_agent:write_rp_channel
	wire          sys_cpu_interconnect_m0_wr_limiter_rsp_src_startofpacket;                 // sys_cpu_interconnect_m0_wr_limiter:rsp_src_startofpacket -> sys_cpu_interconnect_m0_agent:write_rp_startofpacket
	wire          sys_cpu_interconnect_m0_wr_limiter_rsp_src_endofpacket;                   // sys_cpu_interconnect_m0_wr_limiter:rsp_src_endofpacket -> sys_cpu_interconnect_m0_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                                     // router_001:src_valid -> sys_cpu_interconnect_m0_rd_limiter:cmd_sink_valid
	wire  [112:0] router_001_src_data;                                                      // router_001:src_data -> sys_cpu_interconnect_m0_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                     // sys_cpu_interconnect_m0_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [5:0] router_001_src_channel;                                                   // router_001:src_channel -> sys_cpu_interconnect_m0_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                             // router_001:src_startofpacket -> sys_cpu_interconnect_m0_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                               // router_001:src_endofpacket -> sys_cpu_interconnect_m0_rd_limiter:cmd_sink_endofpacket
	wire          sys_cpu_interconnect_m0_rd_limiter_rsp_src_valid;                         // sys_cpu_interconnect_m0_rd_limiter:rsp_src_valid -> sys_cpu_interconnect_m0_agent:read_rp_valid
	wire  [112:0] sys_cpu_interconnect_m0_rd_limiter_rsp_src_data;                          // sys_cpu_interconnect_m0_rd_limiter:rsp_src_data -> sys_cpu_interconnect_m0_agent:read_rp_data
	wire          sys_cpu_interconnect_m0_rd_limiter_rsp_src_ready;                         // sys_cpu_interconnect_m0_agent:read_rp_ready -> sys_cpu_interconnect_m0_rd_limiter:rsp_src_ready
	wire    [5:0] sys_cpu_interconnect_m0_rd_limiter_rsp_src_channel;                       // sys_cpu_interconnect_m0_rd_limiter:rsp_src_channel -> sys_cpu_interconnect_m0_agent:read_rp_channel
	wire          sys_cpu_interconnect_m0_rd_limiter_rsp_src_startofpacket;                 // sys_cpu_interconnect_m0_rd_limiter:rsp_src_startofpacket -> sys_cpu_interconnect_m0_agent:read_rp_startofpacket
	wire          sys_cpu_interconnect_m0_rd_limiter_rsp_src_endofpacket;                   // sys_cpu_interconnect_m0_rd_limiter:rsp_src_endofpacket -> sys_cpu_interconnect_m0_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                        // cmd_mux:src_valid -> fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter:sink0_valid
	wire  [112:0] cmd_mux_src_data;                                                         // cmd_mux:src_data -> fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                        // fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [5:0] cmd_mux_src_channel;                                                      // cmd_mux:src_channel -> fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                // cmd_mux:src_startofpacket -> fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                  // cmd_mux:src_endofpacket -> fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                                    // cmd_mux_001:src_valid -> fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter:sink0_valid
	wire  [112:0] cmd_mux_001_src_data;                                                     // cmd_mux_001:src_data -> fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                    // fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [5:0] cmd_mux_001_src_channel;                                                  // cmd_mux_001:src_channel -> fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                            // cmd_mux_001:src_startofpacket -> fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                              // cmd_mux_001:src_endofpacket -> fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter:sink0_endofpacket
	wire          cmd_mux_002_src_valid;                                                    // cmd_mux_002:src_valid -> fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter:sink0_valid
	wire  [112:0] cmd_mux_002_src_data;                                                     // cmd_mux_002:src_data -> fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                    // fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [5:0] cmd_mux_002_src_channel;                                                  // cmd_mux_002:src_channel -> fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                            // cmd_mux_002:src_startofpacket -> fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                              // cmd_mux_002:src_endofpacket -> fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                                    // cmd_mux_003:src_valid -> fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter:sink0_valid
	wire  [112:0] cmd_mux_003_src_data;                                                     // cmd_mux_003:src_data -> fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                    // fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire    [5:0] cmd_mux_003_src_channel;                                                  // cmd_mux_003:src_channel -> fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                            // cmd_mux_003:src_startofpacket -> fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                              // cmd_mux_003:src_endofpacket -> fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter:sink0_endofpacket
	wire          cmd_mux_004_src_valid;                                                    // cmd_mux_004:src_valid -> fmcomms2_axi_ad9361_s_axi_wr_burst_adapter:sink0_valid
	wire  [112:0] cmd_mux_004_src_data;                                                     // cmd_mux_004:src_data -> fmcomms2_axi_ad9361_s_axi_wr_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                    // fmcomms2_axi_ad9361_s_axi_wr_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire    [5:0] cmd_mux_004_src_channel;                                                  // cmd_mux_004:src_channel -> fmcomms2_axi_ad9361_s_axi_wr_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                            // cmd_mux_004:src_startofpacket -> fmcomms2_axi_ad9361_s_axi_wr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                              // cmd_mux_004:src_endofpacket -> fmcomms2_axi_ad9361_s_axi_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_005_src_valid;                                                    // cmd_mux_005:src_valid -> fmcomms2_axi_ad9361_s_axi_rd_burst_adapter:sink0_valid
	wire  [112:0] cmd_mux_005_src_data;                                                     // cmd_mux_005:src_data -> fmcomms2_axi_ad9361_s_axi_rd_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                    // fmcomms2_axi_ad9361_s_axi_rd_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire    [5:0] cmd_mux_005_src_channel;                                                  // cmd_mux_005:src_channel -> fmcomms2_axi_ad9361_s_axi_rd_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                            // cmd_mux_005:src_startofpacket -> fmcomms2_axi_ad9361_s_axi_rd_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                              // cmd_mux_005:src_endofpacket -> fmcomms2_axi_ad9361_s_axi_rd_burst_adapter:sink0_endofpacket
	wire    [0:0] sys_cpu_interconnect_m0_wr_limiter_cmd_src_valid;                         // sys_cpu_interconnect_m0_wr_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [112:0] sys_cpu_interconnect_m0_wr_limiter_cmd_src_data;                          // sys_cpu_interconnect_m0_wr_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          sys_cpu_interconnect_m0_wr_limiter_cmd_src_ready;                         // limiter_pipeline:in_ready -> sys_cpu_interconnect_m0_wr_limiter:cmd_src_ready
	wire    [5:0] sys_cpu_interconnect_m0_wr_limiter_cmd_src_channel;                       // sys_cpu_interconnect_m0_wr_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          sys_cpu_interconnect_m0_wr_limiter_cmd_src_startofpacket;                 // sys_cpu_interconnect_m0_wr_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          sys_cpu_interconnect_m0_wr_limiter_cmd_src_endofpacket;                   // sys_cpu_interconnect_m0_wr_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                                           // limiter_pipeline:out_valid -> cmd_demux:sink_valid
	wire  [112:0] limiter_pipeline_source0_data;                                            // limiter_pipeline:out_data -> cmd_demux:sink_data
	wire          limiter_pipeline_source0_ready;                                           // cmd_demux:sink_ready -> limiter_pipeline:out_ready
	wire    [5:0] limiter_pipeline_source0_channel;                                         // limiter_pipeline:out_channel -> cmd_demux:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                                   // limiter_pipeline:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                                     // limiter_pipeline:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                        // rsp_mux:src_valid -> limiter_pipeline_001:in_valid
	wire  [112:0] rsp_mux_src_data;                                                         // rsp_mux:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_src_ready;                                                        // limiter_pipeline_001:in_ready -> rsp_mux:src_ready
	wire    [5:0] rsp_mux_src_channel;                                                      // rsp_mux:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_src_startofpacket;                                                // rsp_mux:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                                  // rsp_mux:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                                       // limiter_pipeline_001:out_valid -> sys_cpu_interconnect_m0_wr_limiter:rsp_sink_valid
	wire  [112:0] limiter_pipeline_001_source0_data;                                        // limiter_pipeline_001:out_data -> sys_cpu_interconnect_m0_wr_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                                       // sys_cpu_interconnect_m0_wr_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire    [5:0] limiter_pipeline_001_source0_channel;                                     // limiter_pipeline_001:out_channel -> sys_cpu_interconnect_m0_wr_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                               // limiter_pipeline_001:out_startofpacket -> sys_cpu_interconnect_m0_wr_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                                 // limiter_pipeline_001:out_endofpacket -> sys_cpu_interconnect_m0_wr_limiter:rsp_sink_endofpacket
	wire    [0:0] sys_cpu_interconnect_m0_rd_limiter_cmd_src_valid;                         // sys_cpu_interconnect_m0_rd_limiter:cmd_src_valid -> limiter_pipeline_002:in_valid
	wire  [112:0] sys_cpu_interconnect_m0_rd_limiter_cmd_src_data;                          // sys_cpu_interconnect_m0_rd_limiter:cmd_src_data -> limiter_pipeline_002:in_data
	wire          sys_cpu_interconnect_m0_rd_limiter_cmd_src_ready;                         // limiter_pipeline_002:in_ready -> sys_cpu_interconnect_m0_rd_limiter:cmd_src_ready
	wire    [5:0] sys_cpu_interconnect_m0_rd_limiter_cmd_src_channel;                       // sys_cpu_interconnect_m0_rd_limiter:cmd_src_channel -> limiter_pipeline_002:in_channel
	wire          sys_cpu_interconnect_m0_rd_limiter_cmd_src_startofpacket;                 // sys_cpu_interconnect_m0_rd_limiter:cmd_src_startofpacket -> limiter_pipeline_002:in_startofpacket
	wire          sys_cpu_interconnect_m0_rd_limiter_cmd_src_endofpacket;                   // sys_cpu_interconnect_m0_rd_limiter:cmd_src_endofpacket -> limiter_pipeline_002:in_endofpacket
	wire          limiter_pipeline_002_source0_valid;                                       // limiter_pipeline_002:out_valid -> cmd_demux_001:sink_valid
	wire  [112:0] limiter_pipeline_002_source0_data;                                        // limiter_pipeline_002:out_data -> cmd_demux_001:sink_data
	wire          limiter_pipeline_002_source0_ready;                                       // cmd_demux_001:sink_ready -> limiter_pipeline_002:out_ready
	wire    [5:0] limiter_pipeline_002_source0_channel;                                     // limiter_pipeline_002:out_channel -> cmd_demux_001:sink_channel
	wire          limiter_pipeline_002_source0_startofpacket;                               // limiter_pipeline_002:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          limiter_pipeline_002_source0_endofpacket;                                 // limiter_pipeline_002:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                    // rsp_mux_001:src_valid -> limiter_pipeline_003:in_valid
	wire  [112:0] rsp_mux_001_src_data;                                                     // rsp_mux_001:src_data -> limiter_pipeline_003:in_data
	wire          rsp_mux_001_src_ready;                                                    // limiter_pipeline_003:in_ready -> rsp_mux_001:src_ready
	wire    [5:0] rsp_mux_001_src_channel;                                                  // rsp_mux_001:src_channel -> limiter_pipeline_003:in_channel
	wire          rsp_mux_001_src_startofpacket;                                            // rsp_mux_001:src_startofpacket -> limiter_pipeline_003:in_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                              // rsp_mux_001:src_endofpacket -> limiter_pipeline_003:in_endofpacket
	wire          limiter_pipeline_003_source0_valid;                                       // limiter_pipeline_003:out_valid -> sys_cpu_interconnect_m0_rd_limiter:rsp_sink_valid
	wire  [112:0] limiter_pipeline_003_source0_data;                                        // limiter_pipeline_003:out_data -> sys_cpu_interconnect_m0_rd_limiter:rsp_sink_data
	wire          limiter_pipeline_003_source0_ready;                                       // sys_cpu_interconnect_m0_rd_limiter:rsp_sink_ready -> limiter_pipeline_003:out_ready
	wire    [5:0] limiter_pipeline_003_source0_channel;                                     // limiter_pipeline_003:out_channel -> sys_cpu_interconnect_m0_rd_limiter:rsp_sink_channel
	wire          limiter_pipeline_003_source0_startofpacket;                               // limiter_pipeline_003:out_startofpacket -> sys_cpu_interconnect_m0_rd_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_003_source0_endofpacket;                                 // limiter_pipeline_003:out_endofpacket -> sys_cpu_interconnect_m0_rd_limiter:rsp_sink_endofpacket
	wire          fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter_source0_valid;         // fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter:source0_valid -> agent_pipeline:in_valid
	wire  [112:0] fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter_source0_data;          // fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter:source0_data -> agent_pipeline:in_data
	wire          fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter_source0_ready;         // agent_pipeline:in_ready -> fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter:source0_ready
	wire    [5:0] fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter_source0_channel;       // fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter:source0_channel -> agent_pipeline:in_channel
	wire          fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter_source0_startofpacket; // fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter:source0_startofpacket -> agent_pipeline:in_startofpacket
	wire          fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter_source0_endofpacket;   // fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter:source0_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                             // agent_pipeline:out_valid -> fmcomms2_axi_ad9361_adc_dma_s_axi_agent:write_cp_valid
	wire  [112:0] agent_pipeline_source0_data;                                              // agent_pipeline:out_data -> fmcomms2_axi_ad9361_adc_dma_s_axi_agent:write_cp_data
	wire          agent_pipeline_source0_ready;                                             // fmcomms2_axi_ad9361_adc_dma_s_axi_agent:write_cp_ready -> agent_pipeline:out_ready
	wire    [5:0] agent_pipeline_source0_channel;                                           // agent_pipeline:out_channel -> fmcomms2_axi_ad9361_adc_dma_s_axi_agent:write_cp_channel
	wire          agent_pipeline_source0_startofpacket;                                     // agent_pipeline:out_startofpacket -> fmcomms2_axi_ad9361_adc_dma_s_axi_agent:write_cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                       // agent_pipeline:out_endofpacket -> fmcomms2_axi_ad9361_adc_dma_s_axi_agent:write_cp_endofpacket
	wire          fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter_source0_valid;         // fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter:source0_valid -> agent_pipeline_001:in_valid
	wire  [112:0] fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter_source0_data;          // fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter:source0_data -> agent_pipeline_001:in_data
	wire          fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter_source0_ready;         // agent_pipeline_001:in_ready -> fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter:source0_ready
	wire    [5:0] fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter_source0_channel;       // fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter:source0_channel -> agent_pipeline_001:in_channel
	wire          fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter_source0_startofpacket; // fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter:source0_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter_source0_endofpacket;   // fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter:source0_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                         // agent_pipeline_001:out_valid -> fmcomms2_axi_ad9361_adc_dma_s_axi_agent:read_cp_valid
	wire  [112:0] agent_pipeline_001_source0_data;                                          // agent_pipeline_001:out_data -> fmcomms2_axi_ad9361_adc_dma_s_axi_agent:read_cp_data
	wire          agent_pipeline_001_source0_ready;                                         // fmcomms2_axi_ad9361_adc_dma_s_axi_agent:read_cp_ready -> agent_pipeline_001:out_ready
	wire    [5:0] agent_pipeline_001_source0_channel;                                       // agent_pipeline_001:out_channel -> fmcomms2_axi_ad9361_adc_dma_s_axi_agent:read_cp_channel
	wire          agent_pipeline_001_source0_startofpacket;                                 // agent_pipeline_001:out_startofpacket -> fmcomms2_axi_ad9361_adc_dma_s_axi_agent:read_cp_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                                   // agent_pipeline_001:out_endofpacket -> fmcomms2_axi_ad9361_adc_dma_s_axi_agent:read_cp_endofpacket
	wire          fmcomms2_axi_ad9361_adc_dma_s_axi_agent_write_rp_valid;                   // fmcomms2_axi_ad9361_adc_dma_s_axi_agent:write_rp_valid -> agent_pipeline_002:in_valid
	wire  [112:0] fmcomms2_axi_ad9361_adc_dma_s_axi_agent_write_rp_data;                    // fmcomms2_axi_ad9361_adc_dma_s_axi_agent:write_rp_data -> agent_pipeline_002:in_data
	wire          fmcomms2_axi_ad9361_adc_dma_s_axi_agent_write_rp_ready;                   // agent_pipeline_002:in_ready -> fmcomms2_axi_ad9361_adc_dma_s_axi_agent:write_rp_ready
	wire          fmcomms2_axi_ad9361_adc_dma_s_axi_agent_write_rp_startofpacket;           // fmcomms2_axi_ad9361_adc_dma_s_axi_agent:write_rp_startofpacket -> agent_pipeline_002:in_startofpacket
	wire          fmcomms2_axi_ad9361_adc_dma_s_axi_agent_write_rp_endofpacket;             // fmcomms2_axi_ad9361_adc_dma_s_axi_agent:write_rp_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          agent_pipeline_002_source0_valid;                                         // agent_pipeline_002:out_valid -> router_002:sink_valid
	wire  [112:0] agent_pipeline_002_source0_data;                                          // agent_pipeline_002:out_data -> router_002:sink_data
	wire          agent_pipeline_002_source0_ready;                                         // router_002:sink_ready -> agent_pipeline_002:out_ready
	wire          agent_pipeline_002_source0_startofpacket;                                 // agent_pipeline_002:out_startofpacket -> router_002:sink_startofpacket
	wire          agent_pipeline_002_source0_endofpacket;                                   // agent_pipeline_002:out_endofpacket -> router_002:sink_endofpacket
	wire          fmcomms2_axi_ad9361_adc_dma_s_axi_agent_read_rp_valid;                    // fmcomms2_axi_ad9361_adc_dma_s_axi_agent:read_rp_valid -> agent_pipeline_003:in_valid
	wire  [112:0] fmcomms2_axi_ad9361_adc_dma_s_axi_agent_read_rp_data;                     // fmcomms2_axi_ad9361_adc_dma_s_axi_agent:read_rp_data -> agent_pipeline_003:in_data
	wire          fmcomms2_axi_ad9361_adc_dma_s_axi_agent_read_rp_ready;                    // agent_pipeline_003:in_ready -> fmcomms2_axi_ad9361_adc_dma_s_axi_agent:read_rp_ready
	wire          fmcomms2_axi_ad9361_adc_dma_s_axi_agent_read_rp_startofpacket;            // fmcomms2_axi_ad9361_adc_dma_s_axi_agent:read_rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire          fmcomms2_axi_ad9361_adc_dma_s_axi_agent_read_rp_endofpacket;              // fmcomms2_axi_ad9361_adc_dma_s_axi_agent:read_rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          agent_pipeline_003_source0_valid;                                         // agent_pipeline_003:out_valid -> router_003:sink_valid
	wire  [112:0] agent_pipeline_003_source0_data;                                          // agent_pipeline_003:out_data -> router_003:sink_data
	wire          agent_pipeline_003_source0_ready;                                         // router_003:sink_ready -> agent_pipeline_003:out_ready
	wire          agent_pipeline_003_source0_startofpacket;                                 // agent_pipeline_003:out_startofpacket -> router_003:sink_startofpacket
	wire          agent_pipeline_003_source0_endofpacket;                                   // agent_pipeline_003:out_endofpacket -> router_003:sink_endofpacket
	wire          fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter_source0_valid;         // fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter:source0_valid -> agent_pipeline_004:in_valid
	wire  [112:0] fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter_source0_data;          // fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter:source0_data -> agent_pipeline_004:in_data
	wire          fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter_source0_ready;         // agent_pipeline_004:in_ready -> fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter:source0_ready
	wire    [5:0] fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter_source0_channel;       // fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter:source0_channel -> agent_pipeline_004:in_channel
	wire          fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter_source0_startofpacket; // fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter:source0_startofpacket -> agent_pipeline_004:in_startofpacket
	wire          fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter_source0_endofpacket;   // fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter:source0_endofpacket -> agent_pipeline_004:in_endofpacket
	wire          agent_pipeline_004_source0_valid;                                         // agent_pipeline_004:out_valid -> fmcomms2_axi_ad9361_dac_dma_s_axi_agent:write_cp_valid
	wire  [112:0] agent_pipeline_004_source0_data;                                          // agent_pipeline_004:out_data -> fmcomms2_axi_ad9361_dac_dma_s_axi_agent:write_cp_data
	wire          agent_pipeline_004_source0_ready;                                         // fmcomms2_axi_ad9361_dac_dma_s_axi_agent:write_cp_ready -> agent_pipeline_004:out_ready
	wire    [5:0] agent_pipeline_004_source0_channel;                                       // agent_pipeline_004:out_channel -> fmcomms2_axi_ad9361_dac_dma_s_axi_agent:write_cp_channel
	wire          agent_pipeline_004_source0_startofpacket;                                 // agent_pipeline_004:out_startofpacket -> fmcomms2_axi_ad9361_dac_dma_s_axi_agent:write_cp_startofpacket
	wire          agent_pipeline_004_source0_endofpacket;                                   // agent_pipeline_004:out_endofpacket -> fmcomms2_axi_ad9361_dac_dma_s_axi_agent:write_cp_endofpacket
	wire          fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter_source0_valid;         // fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter:source0_valid -> agent_pipeline_005:in_valid
	wire  [112:0] fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter_source0_data;          // fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter:source0_data -> agent_pipeline_005:in_data
	wire          fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter_source0_ready;         // agent_pipeline_005:in_ready -> fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter:source0_ready
	wire    [5:0] fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter_source0_channel;       // fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter:source0_channel -> agent_pipeline_005:in_channel
	wire          fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter_source0_startofpacket; // fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter:source0_startofpacket -> agent_pipeline_005:in_startofpacket
	wire          fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter_source0_endofpacket;   // fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter:source0_endofpacket -> agent_pipeline_005:in_endofpacket
	wire          agent_pipeline_005_source0_valid;                                         // agent_pipeline_005:out_valid -> fmcomms2_axi_ad9361_dac_dma_s_axi_agent:read_cp_valid
	wire  [112:0] agent_pipeline_005_source0_data;                                          // agent_pipeline_005:out_data -> fmcomms2_axi_ad9361_dac_dma_s_axi_agent:read_cp_data
	wire          agent_pipeline_005_source0_ready;                                         // fmcomms2_axi_ad9361_dac_dma_s_axi_agent:read_cp_ready -> agent_pipeline_005:out_ready
	wire    [5:0] agent_pipeline_005_source0_channel;                                       // agent_pipeline_005:out_channel -> fmcomms2_axi_ad9361_dac_dma_s_axi_agent:read_cp_channel
	wire          agent_pipeline_005_source0_startofpacket;                                 // agent_pipeline_005:out_startofpacket -> fmcomms2_axi_ad9361_dac_dma_s_axi_agent:read_cp_startofpacket
	wire          agent_pipeline_005_source0_endofpacket;                                   // agent_pipeline_005:out_endofpacket -> fmcomms2_axi_ad9361_dac_dma_s_axi_agent:read_cp_endofpacket
	wire          fmcomms2_axi_ad9361_dac_dma_s_axi_agent_write_rp_valid;                   // fmcomms2_axi_ad9361_dac_dma_s_axi_agent:write_rp_valid -> agent_pipeline_006:in_valid
	wire  [112:0] fmcomms2_axi_ad9361_dac_dma_s_axi_agent_write_rp_data;                    // fmcomms2_axi_ad9361_dac_dma_s_axi_agent:write_rp_data -> agent_pipeline_006:in_data
	wire          fmcomms2_axi_ad9361_dac_dma_s_axi_agent_write_rp_ready;                   // agent_pipeline_006:in_ready -> fmcomms2_axi_ad9361_dac_dma_s_axi_agent:write_rp_ready
	wire          fmcomms2_axi_ad9361_dac_dma_s_axi_agent_write_rp_startofpacket;           // fmcomms2_axi_ad9361_dac_dma_s_axi_agent:write_rp_startofpacket -> agent_pipeline_006:in_startofpacket
	wire          fmcomms2_axi_ad9361_dac_dma_s_axi_agent_write_rp_endofpacket;             // fmcomms2_axi_ad9361_dac_dma_s_axi_agent:write_rp_endofpacket -> agent_pipeline_006:in_endofpacket
	wire          agent_pipeline_006_source0_valid;                                         // agent_pipeline_006:out_valid -> router_004:sink_valid
	wire  [112:0] agent_pipeline_006_source0_data;                                          // agent_pipeline_006:out_data -> router_004:sink_data
	wire          agent_pipeline_006_source0_ready;                                         // router_004:sink_ready -> agent_pipeline_006:out_ready
	wire          agent_pipeline_006_source0_startofpacket;                                 // agent_pipeline_006:out_startofpacket -> router_004:sink_startofpacket
	wire          agent_pipeline_006_source0_endofpacket;                                   // agent_pipeline_006:out_endofpacket -> router_004:sink_endofpacket
	wire          fmcomms2_axi_ad9361_dac_dma_s_axi_agent_read_rp_valid;                    // fmcomms2_axi_ad9361_dac_dma_s_axi_agent:read_rp_valid -> agent_pipeline_007:in_valid
	wire  [112:0] fmcomms2_axi_ad9361_dac_dma_s_axi_agent_read_rp_data;                     // fmcomms2_axi_ad9361_dac_dma_s_axi_agent:read_rp_data -> agent_pipeline_007:in_data
	wire          fmcomms2_axi_ad9361_dac_dma_s_axi_agent_read_rp_ready;                    // agent_pipeline_007:in_ready -> fmcomms2_axi_ad9361_dac_dma_s_axi_agent:read_rp_ready
	wire          fmcomms2_axi_ad9361_dac_dma_s_axi_agent_read_rp_startofpacket;            // fmcomms2_axi_ad9361_dac_dma_s_axi_agent:read_rp_startofpacket -> agent_pipeline_007:in_startofpacket
	wire          fmcomms2_axi_ad9361_dac_dma_s_axi_agent_read_rp_endofpacket;              // fmcomms2_axi_ad9361_dac_dma_s_axi_agent:read_rp_endofpacket -> agent_pipeline_007:in_endofpacket
	wire          agent_pipeline_007_source0_valid;                                         // agent_pipeline_007:out_valid -> router_005:sink_valid
	wire  [112:0] agent_pipeline_007_source0_data;                                          // agent_pipeline_007:out_data -> router_005:sink_data
	wire          agent_pipeline_007_source0_ready;                                         // router_005:sink_ready -> agent_pipeline_007:out_ready
	wire          agent_pipeline_007_source0_startofpacket;                                 // agent_pipeline_007:out_startofpacket -> router_005:sink_startofpacket
	wire          agent_pipeline_007_source0_endofpacket;                                   // agent_pipeline_007:out_endofpacket -> router_005:sink_endofpacket
	wire          fmcomms2_axi_ad9361_s_axi_wr_burst_adapter_source0_valid;                 // fmcomms2_axi_ad9361_s_axi_wr_burst_adapter:source0_valid -> agent_pipeline_008:in_valid
	wire  [112:0] fmcomms2_axi_ad9361_s_axi_wr_burst_adapter_source0_data;                  // fmcomms2_axi_ad9361_s_axi_wr_burst_adapter:source0_data -> agent_pipeline_008:in_data
	wire          fmcomms2_axi_ad9361_s_axi_wr_burst_adapter_source0_ready;                 // agent_pipeline_008:in_ready -> fmcomms2_axi_ad9361_s_axi_wr_burst_adapter:source0_ready
	wire    [5:0] fmcomms2_axi_ad9361_s_axi_wr_burst_adapter_source0_channel;               // fmcomms2_axi_ad9361_s_axi_wr_burst_adapter:source0_channel -> agent_pipeline_008:in_channel
	wire          fmcomms2_axi_ad9361_s_axi_wr_burst_adapter_source0_startofpacket;         // fmcomms2_axi_ad9361_s_axi_wr_burst_adapter:source0_startofpacket -> agent_pipeline_008:in_startofpacket
	wire          fmcomms2_axi_ad9361_s_axi_wr_burst_adapter_source0_endofpacket;           // fmcomms2_axi_ad9361_s_axi_wr_burst_adapter:source0_endofpacket -> agent_pipeline_008:in_endofpacket
	wire          agent_pipeline_008_source0_valid;                                         // agent_pipeline_008:out_valid -> fmcomms2_axi_ad9361_s_axi_agent:write_cp_valid
	wire  [112:0] agent_pipeline_008_source0_data;                                          // agent_pipeline_008:out_data -> fmcomms2_axi_ad9361_s_axi_agent:write_cp_data
	wire          agent_pipeline_008_source0_ready;                                         // fmcomms2_axi_ad9361_s_axi_agent:write_cp_ready -> agent_pipeline_008:out_ready
	wire    [5:0] agent_pipeline_008_source0_channel;                                       // agent_pipeline_008:out_channel -> fmcomms2_axi_ad9361_s_axi_agent:write_cp_channel
	wire          agent_pipeline_008_source0_startofpacket;                                 // agent_pipeline_008:out_startofpacket -> fmcomms2_axi_ad9361_s_axi_agent:write_cp_startofpacket
	wire          agent_pipeline_008_source0_endofpacket;                                   // agent_pipeline_008:out_endofpacket -> fmcomms2_axi_ad9361_s_axi_agent:write_cp_endofpacket
	wire          fmcomms2_axi_ad9361_s_axi_rd_burst_adapter_source0_valid;                 // fmcomms2_axi_ad9361_s_axi_rd_burst_adapter:source0_valid -> agent_pipeline_009:in_valid
	wire  [112:0] fmcomms2_axi_ad9361_s_axi_rd_burst_adapter_source0_data;                  // fmcomms2_axi_ad9361_s_axi_rd_burst_adapter:source0_data -> agent_pipeline_009:in_data
	wire          fmcomms2_axi_ad9361_s_axi_rd_burst_adapter_source0_ready;                 // agent_pipeline_009:in_ready -> fmcomms2_axi_ad9361_s_axi_rd_burst_adapter:source0_ready
	wire    [5:0] fmcomms2_axi_ad9361_s_axi_rd_burst_adapter_source0_channel;               // fmcomms2_axi_ad9361_s_axi_rd_burst_adapter:source0_channel -> agent_pipeline_009:in_channel
	wire          fmcomms2_axi_ad9361_s_axi_rd_burst_adapter_source0_startofpacket;         // fmcomms2_axi_ad9361_s_axi_rd_burst_adapter:source0_startofpacket -> agent_pipeline_009:in_startofpacket
	wire          fmcomms2_axi_ad9361_s_axi_rd_burst_adapter_source0_endofpacket;           // fmcomms2_axi_ad9361_s_axi_rd_burst_adapter:source0_endofpacket -> agent_pipeline_009:in_endofpacket
	wire          agent_pipeline_009_source0_valid;                                         // agent_pipeline_009:out_valid -> fmcomms2_axi_ad9361_s_axi_agent:read_cp_valid
	wire  [112:0] agent_pipeline_009_source0_data;                                          // agent_pipeline_009:out_data -> fmcomms2_axi_ad9361_s_axi_agent:read_cp_data
	wire          agent_pipeline_009_source0_ready;                                         // fmcomms2_axi_ad9361_s_axi_agent:read_cp_ready -> agent_pipeline_009:out_ready
	wire    [5:0] agent_pipeline_009_source0_channel;                                       // agent_pipeline_009:out_channel -> fmcomms2_axi_ad9361_s_axi_agent:read_cp_channel
	wire          agent_pipeline_009_source0_startofpacket;                                 // agent_pipeline_009:out_startofpacket -> fmcomms2_axi_ad9361_s_axi_agent:read_cp_startofpacket
	wire          agent_pipeline_009_source0_endofpacket;                                   // agent_pipeline_009:out_endofpacket -> fmcomms2_axi_ad9361_s_axi_agent:read_cp_endofpacket
	wire          fmcomms2_axi_ad9361_s_axi_agent_write_rp_valid;                           // fmcomms2_axi_ad9361_s_axi_agent:write_rp_valid -> agent_pipeline_010:in_valid
	wire  [112:0] fmcomms2_axi_ad9361_s_axi_agent_write_rp_data;                            // fmcomms2_axi_ad9361_s_axi_agent:write_rp_data -> agent_pipeline_010:in_data
	wire          fmcomms2_axi_ad9361_s_axi_agent_write_rp_ready;                           // agent_pipeline_010:in_ready -> fmcomms2_axi_ad9361_s_axi_agent:write_rp_ready
	wire          fmcomms2_axi_ad9361_s_axi_agent_write_rp_startofpacket;                   // fmcomms2_axi_ad9361_s_axi_agent:write_rp_startofpacket -> agent_pipeline_010:in_startofpacket
	wire          fmcomms2_axi_ad9361_s_axi_agent_write_rp_endofpacket;                     // fmcomms2_axi_ad9361_s_axi_agent:write_rp_endofpacket -> agent_pipeline_010:in_endofpacket
	wire          agent_pipeline_010_source0_valid;                                         // agent_pipeline_010:out_valid -> router_006:sink_valid
	wire  [112:0] agent_pipeline_010_source0_data;                                          // agent_pipeline_010:out_data -> router_006:sink_data
	wire          agent_pipeline_010_source0_ready;                                         // router_006:sink_ready -> agent_pipeline_010:out_ready
	wire          agent_pipeline_010_source0_startofpacket;                                 // agent_pipeline_010:out_startofpacket -> router_006:sink_startofpacket
	wire          agent_pipeline_010_source0_endofpacket;                                   // agent_pipeline_010:out_endofpacket -> router_006:sink_endofpacket
	wire          fmcomms2_axi_ad9361_s_axi_agent_read_rp_valid;                            // fmcomms2_axi_ad9361_s_axi_agent:read_rp_valid -> agent_pipeline_011:in_valid
	wire  [112:0] fmcomms2_axi_ad9361_s_axi_agent_read_rp_data;                             // fmcomms2_axi_ad9361_s_axi_agent:read_rp_data -> agent_pipeline_011:in_data
	wire          fmcomms2_axi_ad9361_s_axi_agent_read_rp_ready;                            // agent_pipeline_011:in_ready -> fmcomms2_axi_ad9361_s_axi_agent:read_rp_ready
	wire          fmcomms2_axi_ad9361_s_axi_agent_read_rp_startofpacket;                    // fmcomms2_axi_ad9361_s_axi_agent:read_rp_startofpacket -> agent_pipeline_011:in_startofpacket
	wire          fmcomms2_axi_ad9361_s_axi_agent_read_rp_endofpacket;                      // fmcomms2_axi_ad9361_s_axi_agent:read_rp_endofpacket -> agent_pipeline_011:in_endofpacket
	wire          agent_pipeline_011_source0_valid;                                         // agent_pipeline_011:out_valid -> router_007:sink_valid
	wire  [112:0] agent_pipeline_011_source0_data;                                          // agent_pipeline_011:out_data -> router_007:sink_data
	wire          agent_pipeline_011_source0_ready;                                         // router_007:sink_ready -> agent_pipeline_011:out_ready
	wire          agent_pipeline_011_source0_startofpacket;                                 // agent_pipeline_011:out_startofpacket -> router_007:sink_startofpacket
	wire          agent_pipeline_011_source0_endofpacket;                                   // agent_pipeline_011:out_endofpacket -> router_007:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                     // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [112:0] cmd_demux_src0_data;                                                      // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                                     // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire    [5:0] cmd_demux_src0_channel;                                                   // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                             // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                               // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                               // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [112:0] mux_pipeline_source0_data;                                                // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                               // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire    [5:0] mux_pipeline_source0_channel;                                             // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                                       // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                         // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                 // cmd_demux_001:src0_valid -> mux_pipeline_001:in_valid
	wire  [112:0] cmd_demux_001_src0_data;                                                  // cmd_demux_001:src0_data -> mux_pipeline_001:in_data
	wire          cmd_demux_001_src0_ready;                                                 // mux_pipeline_001:in_ready -> cmd_demux_001:src0_ready
	wire    [5:0] cmd_demux_001_src0_channel;                                               // cmd_demux_001:src0_channel -> mux_pipeline_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                         // cmd_demux_001:src0_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                           // cmd_demux_001:src0_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                           // mux_pipeline_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [112:0] mux_pipeline_001_source0_data;                                            // mux_pipeline_001:out_data -> cmd_mux_001:sink0_data
	wire          mux_pipeline_001_source0_ready;                                           // cmd_mux_001:sink0_ready -> mux_pipeline_001:out_ready
	wire    [5:0] mux_pipeline_001_source0_channel;                                         // mux_pipeline_001:out_channel -> cmd_mux_001:sink0_channel
	wire          mux_pipeline_001_source0_startofpacket;                                   // mux_pipeline_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                                     // mux_pipeline_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                     // cmd_demux:src1_valid -> mux_pipeline_002:in_valid
	wire  [112:0] cmd_demux_src1_data;                                                      // cmd_demux:src1_data -> mux_pipeline_002:in_data
	wire          cmd_demux_src1_ready;                                                     // mux_pipeline_002:in_ready -> cmd_demux:src1_ready
	wire    [5:0] cmd_demux_src1_channel;                                                   // cmd_demux:src1_channel -> mux_pipeline_002:in_channel
	wire          cmd_demux_src1_startofpacket;                                             // cmd_demux:src1_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                               // cmd_demux:src1_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                                           // mux_pipeline_002:out_valid -> cmd_mux_002:sink0_valid
	wire  [112:0] mux_pipeline_002_source0_data;                                            // mux_pipeline_002:out_data -> cmd_mux_002:sink0_data
	wire          mux_pipeline_002_source0_ready;                                           // cmd_mux_002:sink0_ready -> mux_pipeline_002:out_ready
	wire    [5:0] mux_pipeline_002_source0_channel;                                         // mux_pipeline_002:out_channel -> cmd_mux_002:sink0_channel
	wire          mux_pipeline_002_source0_startofpacket;                                   // mux_pipeline_002:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                                     // mux_pipeline_002:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                                 // cmd_demux_001:src1_valid -> mux_pipeline_003:in_valid
	wire  [112:0] cmd_demux_001_src1_data;                                                  // cmd_demux_001:src1_data -> mux_pipeline_003:in_data
	wire          cmd_demux_001_src1_ready;                                                 // mux_pipeline_003:in_ready -> cmd_demux_001:src1_ready
	wire    [5:0] cmd_demux_001_src1_channel;                                               // cmd_demux_001:src1_channel -> mux_pipeline_003:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                         // cmd_demux_001:src1_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                           // cmd_demux_001:src1_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                                           // mux_pipeline_003:out_valid -> cmd_mux_003:sink0_valid
	wire  [112:0] mux_pipeline_003_source0_data;                                            // mux_pipeline_003:out_data -> cmd_mux_003:sink0_data
	wire          mux_pipeline_003_source0_ready;                                           // cmd_mux_003:sink0_ready -> mux_pipeline_003:out_ready
	wire    [5:0] mux_pipeline_003_source0_channel;                                         // mux_pipeline_003:out_channel -> cmd_mux_003:sink0_channel
	wire          mux_pipeline_003_source0_startofpacket;                                   // mux_pipeline_003:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                                     // mux_pipeline_003:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                     // cmd_demux:src2_valid -> mux_pipeline_004:in_valid
	wire  [112:0] cmd_demux_src2_data;                                                      // cmd_demux:src2_data -> mux_pipeline_004:in_data
	wire          cmd_demux_src2_ready;                                                     // mux_pipeline_004:in_ready -> cmd_demux:src2_ready
	wire    [5:0] cmd_demux_src2_channel;                                                   // cmd_demux:src2_channel -> mux_pipeline_004:in_channel
	wire          cmd_demux_src2_startofpacket;                                             // cmd_demux:src2_startofpacket -> mux_pipeline_004:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                               // cmd_demux:src2_endofpacket -> mux_pipeline_004:in_endofpacket
	wire          mux_pipeline_004_source0_valid;                                           // mux_pipeline_004:out_valid -> cmd_mux_004:sink0_valid
	wire  [112:0] mux_pipeline_004_source0_data;                                            // mux_pipeline_004:out_data -> cmd_mux_004:sink0_data
	wire          mux_pipeline_004_source0_ready;                                           // cmd_mux_004:sink0_ready -> mux_pipeline_004:out_ready
	wire    [5:0] mux_pipeline_004_source0_channel;                                         // mux_pipeline_004:out_channel -> cmd_mux_004:sink0_channel
	wire          mux_pipeline_004_source0_startofpacket;                                   // mux_pipeline_004:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          mux_pipeline_004_source0_endofpacket;                                     // mux_pipeline_004:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src2_valid;                                                 // cmd_demux_001:src2_valid -> mux_pipeline_005:in_valid
	wire  [112:0] cmd_demux_001_src2_data;                                                  // cmd_demux_001:src2_data -> mux_pipeline_005:in_data
	wire          cmd_demux_001_src2_ready;                                                 // mux_pipeline_005:in_ready -> cmd_demux_001:src2_ready
	wire    [5:0] cmd_demux_001_src2_channel;                                               // cmd_demux_001:src2_channel -> mux_pipeline_005:in_channel
	wire          cmd_demux_001_src2_startofpacket;                                         // cmd_demux_001:src2_startofpacket -> mux_pipeline_005:in_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                           // cmd_demux_001:src2_endofpacket -> mux_pipeline_005:in_endofpacket
	wire          mux_pipeline_005_source0_valid;                                           // mux_pipeline_005:out_valid -> cmd_mux_005:sink0_valid
	wire  [112:0] mux_pipeline_005_source0_data;                                            // mux_pipeline_005:out_data -> cmd_mux_005:sink0_data
	wire          mux_pipeline_005_source0_ready;                                           // cmd_mux_005:sink0_ready -> mux_pipeline_005:out_ready
	wire    [5:0] mux_pipeline_005_source0_channel;                                         // mux_pipeline_005:out_channel -> cmd_mux_005:sink0_channel
	wire          mux_pipeline_005_source0_startofpacket;                                   // mux_pipeline_005:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          mux_pipeline_005_source0_endofpacket;                                     // mux_pipeline_005:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                     // rsp_demux:src0_valid -> mux_pipeline_006:in_valid
	wire  [112:0] rsp_demux_src0_data;                                                      // rsp_demux:src0_data -> mux_pipeline_006:in_data
	wire          rsp_demux_src0_ready;                                                     // mux_pipeline_006:in_ready -> rsp_demux:src0_ready
	wire    [5:0] rsp_demux_src0_channel;                                                   // rsp_demux:src0_channel -> mux_pipeline_006:in_channel
	wire          rsp_demux_src0_startofpacket;                                             // rsp_demux:src0_startofpacket -> mux_pipeline_006:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                               // rsp_demux:src0_endofpacket -> mux_pipeline_006:in_endofpacket
	wire          mux_pipeline_006_source0_valid;                                           // mux_pipeline_006:out_valid -> rsp_mux:sink0_valid
	wire  [112:0] mux_pipeline_006_source0_data;                                            // mux_pipeline_006:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_006_source0_ready;                                           // rsp_mux:sink0_ready -> mux_pipeline_006:out_ready
	wire    [5:0] mux_pipeline_006_source0_channel;                                         // mux_pipeline_006:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_006_source0_startofpacket;                                   // mux_pipeline_006:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_006_source0_endofpacket;                                     // mux_pipeline_006:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                 // rsp_demux_002:src0_valid -> mux_pipeline_007:in_valid
	wire  [112:0] rsp_demux_002_src0_data;                                                  // rsp_demux_002:src0_data -> mux_pipeline_007:in_data
	wire          rsp_demux_002_src0_ready;                                                 // mux_pipeline_007:in_ready -> rsp_demux_002:src0_ready
	wire    [5:0] rsp_demux_002_src0_channel;                                               // rsp_demux_002:src0_channel -> mux_pipeline_007:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                         // rsp_demux_002:src0_startofpacket -> mux_pipeline_007:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                           // rsp_demux_002:src0_endofpacket -> mux_pipeline_007:in_endofpacket
	wire          mux_pipeline_007_source0_valid;                                           // mux_pipeline_007:out_valid -> rsp_mux:sink1_valid
	wire  [112:0] mux_pipeline_007_source0_data;                                            // mux_pipeline_007:out_data -> rsp_mux:sink1_data
	wire          mux_pipeline_007_source0_ready;                                           // rsp_mux:sink1_ready -> mux_pipeline_007:out_ready
	wire    [5:0] mux_pipeline_007_source0_channel;                                         // mux_pipeline_007:out_channel -> rsp_mux:sink1_channel
	wire          mux_pipeline_007_source0_startofpacket;                                   // mux_pipeline_007:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          mux_pipeline_007_source0_endofpacket;                                     // mux_pipeline_007:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_004_src0_valid;                                                 // rsp_demux_004:src0_valid -> mux_pipeline_008:in_valid
	wire  [112:0] rsp_demux_004_src0_data;                                                  // rsp_demux_004:src0_data -> mux_pipeline_008:in_data
	wire          rsp_demux_004_src0_ready;                                                 // mux_pipeline_008:in_ready -> rsp_demux_004:src0_ready
	wire    [5:0] rsp_demux_004_src0_channel;                                               // rsp_demux_004:src0_channel -> mux_pipeline_008:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                         // rsp_demux_004:src0_startofpacket -> mux_pipeline_008:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                           // rsp_demux_004:src0_endofpacket -> mux_pipeline_008:in_endofpacket
	wire          mux_pipeline_008_source0_valid;                                           // mux_pipeline_008:out_valid -> rsp_mux:sink2_valid
	wire  [112:0] mux_pipeline_008_source0_data;                                            // mux_pipeline_008:out_data -> rsp_mux:sink2_data
	wire          mux_pipeline_008_source0_ready;                                           // rsp_mux:sink2_ready -> mux_pipeline_008:out_ready
	wire    [5:0] mux_pipeline_008_source0_channel;                                         // mux_pipeline_008:out_channel -> rsp_mux:sink2_channel
	wire          mux_pipeline_008_source0_startofpacket;                                   // mux_pipeline_008:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          mux_pipeline_008_source0_endofpacket;                                     // mux_pipeline_008:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_001_src0_valid;                                                 // rsp_demux_001:src0_valid -> mux_pipeline_009:in_valid
	wire  [112:0] rsp_demux_001_src0_data;                                                  // rsp_demux_001:src0_data -> mux_pipeline_009:in_data
	wire          rsp_demux_001_src0_ready;                                                 // mux_pipeline_009:in_ready -> rsp_demux_001:src0_ready
	wire    [5:0] rsp_demux_001_src0_channel;                                               // rsp_demux_001:src0_channel -> mux_pipeline_009:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                         // rsp_demux_001:src0_startofpacket -> mux_pipeline_009:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                           // rsp_demux_001:src0_endofpacket -> mux_pipeline_009:in_endofpacket
	wire          mux_pipeline_009_source0_valid;                                           // mux_pipeline_009:out_valid -> rsp_mux_001:sink0_valid
	wire  [112:0] mux_pipeline_009_source0_data;                                            // mux_pipeline_009:out_data -> rsp_mux_001:sink0_data
	wire          mux_pipeline_009_source0_ready;                                           // rsp_mux_001:sink0_ready -> mux_pipeline_009:out_ready
	wire    [5:0] mux_pipeline_009_source0_channel;                                         // mux_pipeline_009:out_channel -> rsp_mux_001:sink0_channel
	wire          mux_pipeline_009_source0_startofpacket;                                   // mux_pipeline_009:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          mux_pipeline_009_source0_endofpacket;                                     // mux_pipeline_009:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_003_src0_valid;                                                 // rsp_demux_003:src0_valid -> mux_pipeline_010:in_valid
	wire  [112:0] rsp_demux_003_src0_data;                                                  // rsp_demux_003:src0_data -> mux_pipeline_010:in_data
	wire          rsp_demux_003_src0_ready;                                                 // mux_pipeline_010:in_ready -> rsp_demux_003:src0_ready
	wire    [5:0] rsp_demux_003_src0_channel;                                               // rsp_demux_003:src0_channel -> mux_pipeline_010:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                         // rsp_demux_003:src0_startofpacket -> mux_pipeline_010:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                           // rsp_demux_003:src0_endofpacket -> mux_pipeline_010:in_endofpacket
	wire          mux_pipeline_010_source0_valid;                                           // mux_pipeline_010:out_valid -> rsp_mux_001:sink1_valid
	wire  [112:0] mux_pipeline_010_source0_data;                                            // mux_pipeline_010:out_data -> rsp_mux_001:sink1_data
	wire          mux_pipeline_010_source0_ready;                                           // rsp_mux_001:sink1_ready -> mux_pipeline_010:out_ready
	wire    [5:0] mux_pipeline_010_source0_channel;                                         // mux_pipeline_010:out_channel -> rsp_mux_001:sink1_channel
	wire          mux_pipeline_010_source0_startofpacket;                                   // mux_pipeline_010:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          mux_pipeline_010_source0_endofpacket;                                     // mux_pipeline_010:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_005_src0_valid;                                                 // rsp_demux_005:src0_valid -> mux_pipeline_011:in_valid
	wire  [112:0] rsp_demux_005_src0_data;                                                  // rsp_demux_005:src0_data -> mux_pipeline_011:in_data
	wire          rsp_demux_005_src0_ready;                                                 // mux_pipeline_011:in_ready -> rsp_demux_005:src0_ready
	wire    [5:0] rsp_demux_005_src0_channel;                                               // rsp_demux_005:src0_channel -> mux_pipeline_011:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                         // rsp_demux_005:src0_startofpacket -> mux_pipeline_011:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                           // rsp_demux_005:src0_endofpacket -> mux_pipeline_011:in_endofpacket
	wire          mux_pipeline_011_source0_valid;                                           // mux_pipeline_011:out_valid -> rsp_mux_001:sink2_valid
	wire  [112:0] mux_pipeline_011_source0_data;                                            // mux_pipeline_011:out_data -> rsp_mux_001:sink2_data
	wire          mux_pipeline_011_source0_ready;                                           // rsp_mux_001:sink2_ready -> mux_pipeline_011:out_ready
	wire    [5:0] mux_pipeline_011_source0_channel;                                         // mux_pipeline_011:out_channel -> rsp_mux_001:sink2_channel
	wire          mux_pipeline_011_source0_startofpacket;                                   // mux_pipeline_011:out_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          mux_pipeline_011_source0_endofpacket;                                     // mux_pipeline_011:out_endofpacket -> rsp_mux_001:sink2_endofpacket

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (20),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (16),
		.READ_ISSUING_CAPABILITY   (16),
		.PKT_BEGIN_BURST           (83),
		.PKT_CACHE_H               (107),
		.PKT_CACHE_L               (104),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (69),
		.PKT_BYTE_CNT_H            (68),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (61),
		.PKT_TRANS_LOCK            (60),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (87),
		.PKT_THREAD_ID_H           (100),
		.PKT_THREAD_ID_L           (89),
		.PKT_QOS_L                 (84),
		.PKT_QOS_H                 (84),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (6),
		.ID                        (0)
	) sys_cpu_interconnect_m0_agent (
		.aclk                   (clk_0_clk_clk),                                               //              clk.clk
		.aresetn                (~sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (sys_cpu_interconnect_m0_agent_write_cp_valid),                //         write_cp.valid
		.write_cp_data          (sys_cpu_interconnect_m0_agent_write_cp_data),                 //                 .data
		.write_cp_startofpacket (sys_cpu_interconnect_m0_agent_write_cp_startofpacket),        //                 .startofpacket
		.write_cp_endofpacket   (sys_cpu_interconnect_m0_agent_write_cp_endofpacket),          //                 .endofpacket
		.write_cp_ready         (sys_cpu_interconnect_m0_agent_write_cp_ready),                //                 .ready
		.write_rp_valid         (sys_cpu_interconnect_m0_wr_limiter_rsp_src_valid),            //         write_rp.valid
		.write_rp_data          (sys_cpu_interconnect_m0_wr_limiter_rsp_src_data),             //                 .data
		.write_rp_channel       (sys_cpu_interconnect_m0_wr_limiter_rsp_src_channel),          //                 .channel
		.write_rp_startofpacket (sys_cpu_interconnect_m0_wr_limiter_rsp_src_startofpacket),    //                 .startofpacket
		.write_rp_endofpacket   (sys_cpu_interconnect_m0_wr_limiter_rsp_src_endofpacket),      //                 .endofpacket
		.write_rp_ready         (sys_cpu_interconnect_m0_wr_limiter_rsp_src_ready),            //                 .ready
		.read_cp_valid          (sys_cpu_interconnect_m0_agent_read_cp_valid),                 //          read_cp.valid
		.read_cp_data           (sys_cpu_interconnect_m0_agent_read_cp_data),                  //                 .data
		.read_cp_startofpacket  (sys_cpu_interconnect_m0_agent_read_cp_startofpacket),         //                 .startofpacket
		.read_cp_endofpacket    (sys_cpu_interconnect_m0_agent_read_cp_endofpacket),           //                 .endofpacket
		.read_cp_ready          (sys_cpu_interconnect_m0_agent_read_cp_ready),                 //                 .ready
		.read_rp_valid          (sys_cpu_interconnect_m0_rd_limiter_rsp_src_valid),            //          read_rp.valid
		.read_rp_data           (sys_cpu_interconnect_m0_rd_limiter_rsp_src_data),             //                 .data
		.read_rp_channel        (sys_cpu_interconnect_m0_rd_limiter_rsp_src_channel),          //                 .channel
		.read_rp_startofpacket  (sys_cpu_interconnect_m0_rd_limiter_rsp_src_startofpacket),    //                 .startofpacket
		.read_rp_endofpacket    (sys_cpu_interconnect_m0_rd_limiter_rsp_src_endofpacket),      //                 .endofpacket
		.read_rp_ready          (sys_cpu_interconnect_m0_rd_limiter_rsp_src_ready),            //                 .ready
		.awid                   (sys_cpu_interconnect_m0_awid),                                // altera_axi_slave.awid
		.awaddr                 (sys_cpu_interconnect_m0_awaddr),                              //                 .awaddr
		.awlen                  (sys_cpu_interconnect_m0_awlen),                               //                 .awlen
		.awsize                 (sys_cpu_interconnect_m0_awsize),                              //                 .awsize
		.awburst                (sys_cpu_interconnect_m0_awburst),                             //                 .awburst
		.awlock                 (sys_cpu_interconnect_m0_awlock),                              //                 .awlock
		.awcache                (sys_cpu_interconnect_m0_awcache),                             //                 .awcache
		.awprot                 (sys_cpu_interconnect_m0_awprot),                              //                 .awprot
		.awvalid                (sys_cpu_interconnect_m0_awvalid),                             //                 .awvalid
		.awready                (sys_cpu_interconnect_m0_awready),                             //                 .awready
		.wid                    (sys_cpu_interconnect_m0_wid),                                 //                 .wid
		.wdata                  (sys_cpu_interconnect_m0_wdata),                               //                 .wdata
		.wstrb                  (sys_cpu_interconnect_m0_wstrb),                               //                 .wstrb
		.wlast                  (sys_cpu_interconnect_m0_wlast),                               //                 .wlast
		.wvalid                 (sys_cpu_interconnect_m0_wvalid),                              //                 .wvalid
		.wready                 (sys_cpu_interconnect_m0_wready),                              //                 .wready
		.bid                    (sys_cpu_interconnect_m0_bid),                                 //                 .bid
		.bresp                  (sys_cpu_interconnect_m0_bresp),                               //                 .bresp
		.bvalid                 (sys_cpu_interconnect_m0_bvalid),                              //                 .bvalid
		.bready                 (sys_cpu_interconnect_m0_bready),                              //                 .bready
		.arid                   (sys_cpu_interconnect_m0_arid),                                //                 .arid
		.araddr                 (sys_cpu_interconnect_m0_araddr),                              //                 .araddr
		.arlen                  (sys_cpu_interconnect_m0_arlen),                               //                 .arlen
		.arsize                 (sys_cpu_interconnect_m0_arsize),                              //                 .arsize
		.arburst                (sys_cpu_interconnect_m0_arburst),                             //                 .arburst
		.arlock                 (sys_cpu_interconnect_m0_arlock),                              //                 .arlock
		.arcache                (sys_cpu_interconnect_m0_arcache),                             //                 .arcache
		.arprot                 (sys_cpu_interconnect_m0_arprot),                              //                 .arprot
		.arvalid                (sys_cpu_interconnect_m0_arvalid),                             //                 .arvalid
		.arready                (sys_cpu_interconnect_m0_arready),                             //                 .arready
		.rid                    (sys_cpu_interconnect_m0_rid),                                 //                 .rid
		.rdata                  (sys_cpu_interconnect_m0_rdata),                               //                 .rdata
		.rresp                  (sys_cpu_interconnect_m0_rresp),                               //                 .rresp
		.rlast                  (sys_cpu_interconnect_m0_rlast),                               //                 .rlast
		.rvalid                 (sys_cpu_interconnect_m0_rvalid),                              //                 .rvalid
		.rready                 (sys_cpu_interconnect_m0_rready),                              //                 .rready
		.awuser                 (1'b0),                                                        //      (terminated)
		.aruser                 (1'b0),                                                        //      (terminated)
		.awqos                  (4'b0000),                                                     //      (terminated)
		.arqos                  (4'b0000),                                                     //      (terminated)
		.awregion               (4'b0000),                                                     //      (terminated)
		.arregion               (4'b0000),                                                     //      (terminated)
		.wuser                  (1'b0),                                                        //      (terminated)
		.ruser                  (),                                                            //      (terminated)
		.buser                  ()                                                             //      (terminated)
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (84),
		.PKT_QOS_L                   (84),
		.PKT_THREAD_ID_H             (100),
		.PKT_THREAD_ID_L             (89),
		.PKT_RESPONSE_STATUS_H       (109),
		.PKT_RESPONSE_STATUS_L       (108),
		.PKT_BEGIN_BURST             (83),
		.PKT_CACHE_H                 (107),
		.PKT_CACHE_L                 (104),
		.PKT_DATA_SIDEBAND_H         (82),
		.PKT_DATA_SIDEBAND_L         (82),
		.PKT_ADDR_SIDEBAND_H         (81),
		.PKT_ADDR_SIDEBAND_L         (81),
		.PKT_BURST_TYPE_H            (80),
		.PKT_BURST_TYPE_L            (79),
		.PKT_PROTECTION_H            (103),
		.PKT_PROTECTION_L            (101),
		.PKT_BURST_SIZE_H            (78),
		.PKT_BURST_SIZE_L            (76),
		.PKT_BURSTWRAP_H             (75),
		.PKT_BURSTWRAP_L             (69),
		.PKT_BYTE_CNT_H              (68),
		.PKT_BYTE_CNT_L              (62),
		.PKT_ADDR_H                  (55),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (61),
		.PKT_TRANS_LOCK              (60),
		.PKT_TRANS_COMPRESSED_READ   (56),
		.PKT_TRANS_POSTED            (57),
		.PKT_TRANS_WRITE             (58),
		.PKT_TRANS_READ              (59),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (86),
		.PKT_SRC_ID_L                (85),
		.PKT_DEST_ID_H               (88),
		.PKT_DEST_ID_L               (87),
		.PKT_ORI_BURST_SIZE_L        (110),
		.PKT_ORI_BURST_SIZE_H        (112),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (113),
		.ADDR_WIDTH                  (14),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (6),
		.AXI_SLAVE_ID_W              (1),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) fmcomms2_axi_ad9361_adc_dma_s_axi_agent (
		.aclk                   (clk_0_clk_clk),                                                  //        clock_sink.clk
		.aresetn                (~sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),    //        reset_sink.reset_n
		.read_cp_valid          (agent_pipeline_001_source0_valid),                               //           read_cp.valid
		.read_cp_ready          (agent_pipeline_001_source0_ready),                               //                  .ready
		.read_cp_data           (agent_pipeline_001_source0_data),                                //                  .data
		.read_cp_channel        (agent_pipeline_001_source0_channel),                             //                  .channel
		.read_cp_startofpacket  (agent_pipeline_001_source0_startofpacket),                       //                  .startofpacket
		.read_cp_endofpacket    (agent_pipeline_001_source0_endofpacket),                         //                  .endofpacket
		.write_cp_ready         (agent_pipeline_source0_ready),                                   //          write_cp.ready
		.write_cp_valid         (agent_pipeline_source0_valid),                                   //                  .valid
		.write_cp_data          (agent_pipeline_source0_data),                                    //                  .data
		.write_cp_channel       (agent_pipeline_source0_channel),                                 //                  .channel
		.write_cp_startofpacket (agent_pipeline_source0_startofpacket),                           //                  .startofpacket
		.write_cp_endofpacket   (agent_pipeline_source0_endofpacket),                             //                  .endofpacket
		.read_rp_ready          (fmcomms2_axi_ad9361_adc_dma_s_axi_agent_read_rp_ready),          //           read_rp.ready
		.read_rp_valid          (fmcomms2_axi_ad9361_adc_dma_s_axi_agent_read_rp_valid),          //                  .valid
		.read_rp_data           (fmcomms2_axi_ad9361_adc_dma_s_axi_agent_read_rp_data),           //                  .data
		.read_rp_startofpacket  (fmcomms2_axi_ad9361_adc_dma_s_axi_agent_read_rp_startofpacket),  //                  .startofpacket
		.read_rp_endofpacket    (fmcomms2_axi_ad9361_adc_dma_s_axi_agent_read_rp_endofpacket),    //                  .endofpacket
		.write_rp_ready         (fmcomms2_axi_ad9361_adc_dma_s_axi_agent_write_rp_ready),         //          write_rp.ready
		.write_rp_valid         (fmcomms2_axi_ad9361_adc_dma_s_axi_agent_write_rp_valid),         //                  .valid
		.write_rp_data          (fmcomms2_axi_ad9361_adc_dma_s_axi_agent_write_rp_data),          //                  .data
		.write_rp_startofpacket (fmcomms2_axi_ad9361_adc_dma_s_axi_agent_write_rp_startofpacket), //                  .startofpacket
		.write_rp_endofpacket   (fmcomms2_axi_ad9361_adc_dma_s_axi_agent_write_rp_endofpacket),   //                  .endofpacket
		.awaddr                 (fmcomms2_axi_ad9361_adc_dma_s_axi_awaddr),                       // altera_axi_master.awaddr
		.awprot                 (fmcomms2_axi_ad9361_adc_dma_s_axi_awprot),                       //                  .awprot
		.awvalid                (fmcomms2_axi_ad9361_adc_dma_s_axi_awvalid),                      //                  .awvalid
		.awready                (fmcomms2_axi_ad9361_adc_dma_s_axi_awready),                      //                  .awready
		.wdata                  (fmcomms2_axi_ad9361_adc_dma_s_axi_wdata),                        //                  .wdata
		.wstrb                  (fmcomms2_axi_ad9361_adc_dma_s_axi_wstrb),                        //                  .wstrb
		.wvalid                 (fmcomms2_axi_ad9361_adc_dma_s_axi_wvalid),                       //                  .wvalid
		.wready                 (fmcomms2_axi_ad9361_adc_dma_s_axi_wready),                       //                  .wready
		.bresp                  (fmcomms2_axi_ad9361_adc_dma_s_axi_bresp),                        //                  .bresp
		.bvalid                 (fmcomms2_axi_ad9361_adc_dma_s_axi_bvalid),                       //                  .bvalid
		.bready                 (fmcomms2_axi_ad9361_adc_dma_s_axi_bready),                       //                  .bready
		.araddr                 (fmcomms2_axi_ad9361_adc_dma_s_axi_araddr),                       //                  .araddr
		.arprot                 (fmcomms2_axi_ad9361_adc_dma_s_axi_arprot),                       //                  .arprot
		.arvalid                (fmcomms2_axi_ad9361_adc_dma_s_axi_arvalid),                      //                  .arvalid
		.arready                (fmcomms2_axi_ad9361_adc_dma_s_axi_arready),                      //                  .arready
		.rdata                  (fmcomms2_axi_ad9361_adc_dma_s_axi_rdata),                        //                  .rdata
		.rresp                  (fmcomms2_axi_ad9361_adc_dma_s_axi_rresp),                        //                  .rresp
		.rvalid                 (fmcomms2_axi_ad9361_adc_dma_s_axi_rvalid),                       //                  .rvalid
		.rready                 (fmcomms2_axi_ad9361_adc_dma_s_axi_rready)                        //                  .rready
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (84),
		.PKT_QOS_L                   (84),
		.PKT_THREAD_ID_H             (100),
		.PKT_THREAD_ID_L             (89),
		.PKT_RESPONSE_STATUS_H       (109),
		.PKT_RESPONSE_STATUS_L       (108),
		.PKT_BEGIN_BURST             (83),
		.PKT_CACHE_H                 (107),
		.PKT_CACHE_L                 (104),
		.PKT_DATA_SIDEBAND_H         (82),
		.PKT_DATA_SIDEBAND_L         (82),
		.PKT_ADDR_SIDEBAND_H         (81),
		.PKT_ADDR_SIDEBAND_L         (81),
		.PKT_BURST_TYPE_H            (80),
		.PKT_BURST_TYPE_L            (79),
		.PKT_PROTECTION_H            (103),
		.PKT_PROTECTION_L            (101),
		.PKT_BURST_SIZE_H            (78),
		.PKT_BURST_SIZE_L            (76),
		.PKT_BURSTWRAP_H             (75),
		.PKT_BURSTWRAP_L             (69),
		.PKT_BYTE_CNT_H              (68),
		.PKT_BYTE_CNT_L              (62),
		.PKT_ADDR_H                  (55),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (61),
		.PKT_TRANS_LOCK              (60),
		.PKT_TRANS_COMPRESSED_READ   (56),
		.PKT_TRANS_POSTED            (57),
		.PKT_TRANS_WRITE             (58),
		.PKT_TRANS_READ              (59),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (86),
		.PKT_SRC_ID_L                (85),
		.PKT_DEST_ID_H               (88),
		.PKT_DEST_ID_L               (87),
		.PKT_ORI_BURST_SIZE_L        (110),
		.PKT_ORI_BURST_SIZE_H        (112),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (113),
		.ADDR_WIDTH                  (14),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (6),
		.AXI_SLAVE_ID_W              (1),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) fmcomms2_axi_ad9361_dac_dma_s_axi_agent (
		.aclk                   (clk_0_clk_clk),                                                  //        clock_sink.clk
		.aresetn                (~sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),    //        reset_sink.reset_n
		.read_cp_valid          (agent_pipeline_005_source0_valid),                               //           read_cp.valid
		.read_cp_ready          (agent_pipeline_005_source0_ready),                               //                  .ready
		.read_cp_data           (agent_pipeline_005_source0_data),                                //                  .data
		.read_cp_channel        (agent_pipeline_005_source0_channel),                             //                  .channel
		.read_cp_startofpacket  (agent_pipeline_005_source0_startofpacket),                       //                  .startofpacket
		.read_cp_endofpacket    (agent_pipeline_005_source0_endofpacket),                         //                  .endofpacket
		.write_cp_ready         (agent_pipeline_004_source0_ready),                               //          write_cp.ready
		.write_cp_valid         (agent_pipeline_004_source0_valid),                               //                  .valid
		.write_cp_data          (agent_pipeline_004_source0_data),                                //                  .data
		.write_cp_channel       (agent_pipeline_004_source0_channel),                             //                  .channel
		.write_cp_startofpacket (agent_pipeline_004_source0_startofpacket),                       //                  .startofpacket
		.write_cp_endofpacket   (agent_pipeline_004_source0_endofpacket),                         //                  .endofpacket
		.read_rp_ready          (fmcomms2_axi_ad9361_dac_dma_s_axi_agent_read_rp_ready),          //           read_rp.ready
		.read_rp_valid          (fmcomms2_axi_ad9361_dac_dma_s_axi_agent_read_rp_valid),          //                  .valid
		.read_rp_data           (fmcomms2_axi_ad9361_dac_dma_s_axi_agent_read_rp_data),           //                  .data
		.read_rp_startofpacket  (fmcomms2_axi_ad9361_dac_dma_s_axi_agent_read_rp_startofpacket),  //                  .startofpacket
		.read_rp_endofpacket    (fmcomms2_axi_ad9361_dac_dma_s_axi_agent_read_rp_endofpacket),    //                  .endofpacket
		.write_rp_ready         (fmcomms2_axi_ad9361_dac_dma_s_axi_agent_write_rp_ready),         //          write_rp.ready
		.write_rp_valid         (fmcomms2_axi_ad9361_dac_dma_s_axi_agent_write_rp_valid),         //                  .valid
		.write_rp_data          (fmcomms2_axi_ad9361_dac_dma_s_axi_agent_write_rp_data),          //                  .data
		.write_rp_startofpacket (fmcomms2_axi_ad9361_dac_dma_s_axi_agent_write_rp_startofpacket), //                  .startofpacket
		.write_rp_endofpacket   (fmcomms2_axi_ad9361_dac_dma_s_axi_agent_write_rp_endofpacket),   //                  .endofpacket
		.awaddr                 (fmcomms2_axi_ad9361_dac_dma_s_axi_awaddr),                       // altera_axi_master.awaddr
		.awprot                 (fmcomms2_axi_ad9361_dac_dma_s_axi_awprot),                       //                  .awprot
		.awvalid                (fmcomms2_axi_ad9361_dac_dma_s_axi_awvalid),                      //                  .awvalid
		.awready                (fmcomms2_axi_ad9361_dac_dma_s_axi_awready),                      //                  .awready
		.wdata                  (fmcomms2_axi_ad9361_dac_dma_s_axi_wdata),                        //                  .wdata
		.wstrb                  (fmcomms2_axi_ad9361_dac_dma_s_axi_wstrb),                        //                  .wstrb
		.wvalid                 (fmcomms2_axi_ad9361_dac_dma_s_axi_wvalid),                       //                  .wvalid
		.wready                 (fmcomms2_axi_ad9361_dac_dma_s_axi_wready),                       //                  .wready
		.bresp                  (fmcomms2_axi_ad9361_dac_dma_s_axi_bresp),                        //                  .bresp
		.bvalid                 (fmcomms2_axi_ad9361_dac_dma_s_axi_bvalid),                       //                  .bvalid
		.bready                 (fmcomms2_axi_ad9361_dac_dma_s_axi_bready),                       //                  .bready
		.araddr                 (fmcomms2_axi_ad9361_dac_dma_s_axi_araddr),                       //                  .araddr
		.arprot                 (fmcomms2_axi_ad9361_dac_dma_s_axi_arprot),                       //                  .arprot
		.arvalid                (fmcomms2_axi_ad9361_dac_dma_s_axi_arvalid),                      //                  .arvalid
		.arready                (fmcomms2_axi_ad9361_dac_dma_s_axi_arready),                      //                  .arready
		.rdata                  (fmcomms2_axi_ad9361_dac_dma_s_axi_rdata),                        //                  .rdata
		.rresp                  (fmcomms2_axi_ad9361_dac_dma_s_axi_rresp),                        //                  .rresp
		.rvalid                 (fmcomms2_axi_ad9361_dac_dma_s_axi_rvalid),                       //                  .rvalid
		.rready                 (fmcomms2_axi_ad9361_dac_dma_s_axi_rready)                        //                  .rready
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (84),
		.PKT_QOS_L                   (84),
		.PKT_THREAD_ID_H             (100),
		.PKT_THREAD_ID_L             (89),
		.PKT_RESPONSE_STATUS_H       (109),
		.PKT_RESPONSE_STATUS_L       (108),
		.PKT_BEGIN_BURST             (83),
		.PKT_CACHE_H                 (107),
		.PKT_CACHE_L                 (104),
		.PKT_DATA_SIDEBAND_H         (82),
		.PKT_DATA_SIDEBAND_L         (82),
		.PKT_ADDR_SIDEBAND_H         (81),
		.PKT_ADDR_SIDEBAND_L         (81),
		.PKT_BURST_TYPE_H            (80),
		.PKT_BURST_TYPE_L            (79),
		.PKT_PROTECTION_H            (103),
		.PKT_PROTECTION_L            (101),
		.PKT_BURST_SIZE_H            (78),
		.PKT_BURST_SIZE_L            (76),
		.PKT_BURSTWRAP_H             (75),
		.PKT_BURSTWRAP_L             (69),
		.PKT_BYTE_CNT_H              (68),
		.PKT_BYTE_CNT_L              (62),
		.PKT_ADDR_H                  (55),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (61),
		.PKT_TRANS_LOCK              (60),
		.PKT_TRANS_COMPRESSED_READ   (56),
		.PKT_TRANS_POSTED            (57),
		.PKT_TRANS_WRITE             (58),
		.PKT_TRANS_READ              (59),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (86),
		.PKT_SRC_ID_L                (85),
		.PKT_DEST_ID_H               (88),
		.PKT_DEST_ID_L               (87),
		.PKT_ORI_BURST_SIZE_L        (110),
		.PKT_ORI_BURST_SIZE_H        (112),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (113),
		.ADDR_WIDTH                  (16),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (6),
		.AXI_SLAVE_ID_W              (1),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) fmcomms2_axi_ad9361_s_axi_agent (
		.aclk                   (clk_0_clk_clk),                                               //        clock_sink.clk
		.aresetn                (~sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), //        reset_sink.reset_n
		.read_cp_valid          (agent_pipeline_009_source0_valid),                            //           read_cp.valid
		.read_cp_ready          (agent_pipeline_009_source0_ready),                            //                  .ready
		.read_cp_data           (agent_pipeline_009_source0_data),                             //                  .data
		.read_cp_channel        (agent_pipeline_009_source0_channel),                          //                  .channel
		.read_cp_startofpacket  (agent_pipeline_009_source0_startofpacket),                    //                  .startofpacket
		.read_cp_endofpacket    (agent_pipeline_009_source0_endofpacket),                      //                  .endofpacket
		.write_cp_ready         (agent_pipeline_008_source0_ready),                            //          write_cp.ready
		.write_cp_valid         (agent_pipeline_008_source0_valid),                            //                  .valid
		.write_cp_data          (agent_pipeline_008_source0_data),                             //                  .data
		.write_cp_channel       (agent_pipeline_008_source0_channel),                          //                  .channel
		.write_cp_startofpacket (agent_pipeline_008_source0_startofpacket),                    //                  .startofpacket
		.write_cp_endofpacket   (agent_pipeline_008_source0_endofpacket),                      //                  .endofpacket
		.read_rp_ready          (fmcomms2_axi_ad9361_s_axi_agent_read_rp_ready),               //           read_rp.ready
		.read_rp_valid          (fmcomms2_axi_ad9361_s_axi_agent_read_rp_valid),               //                  .valid
		.read_rp_data           (fmcomms2_axi_ad9361_s_axi_agent_read_rp_data),                //                  .data
		.read_rp_startofpacket  (fmcomms2_axi_ad9361_s_axi_agent_read_rp_startofpacket),       //                  .startofpacket
		.read_rp_endofpacket    (fmcomms2_axi_ad9361_s_axi_agent_read_rp_endofpacket),         //                  .endofpacket
		.write_rp_ready         (fmcomms2_axi_ad9361_s_axi_agent_write_rp_ready),              //          write_rp.ready
		.write_rp_valid         (fmcomms2_axi_ad9361_s_axi_agent_write_rp_valid),              //                  .valid
		.write_rp_data          (fmcomms2_axi_ad9361_s_axi_agent_write_rp_data),               //                  .data
		.write_rp_startofpacket (fmcomms2_axi_ad9361_s_axi_agent_write_rp_startofpacket),      //                  .startofpacket
		.write_rp_endofpacket   (fmcomms2_axi_ad9361_s_axi_agent_write_rp_endofpacket),        //                  .endofpacket
		.awaddr                 (fmcomms2_axi_ad9361_s_axi_awaddr),                            // altera_axi_master.awaddr
		.awprot                 (fmcomms2_axi_ad9361_s_axi_awprot),                            //                  .awprot
		.awvalid                (fmcomms2_axi_ad9361_s_axi_awvalid),                           //                  .awvalid
		.awready                (fmcomms2_axi_ad9361_s_axi_awready),                           //                  .awready
		.wdata                  (fmcomms2_axi_ad9361_s_axi_wdata),                             //                  .wdata
		.wstrb                  (fmcomms2_axi_ad9361_s_axi_wstrb),                             //                  .wstrb
		.wvalid                 (fmcomms2_axi_ad9361_s_axi_wvalid),                            //                  .wvalid
		.wready                 (fmcomms2_axi_ad9361_s_axi_wready),                            //                  .wready
		.bresp                  (fmcomms2_axi_ad9361_s_axi_bresp),                             //                  .bresp
		.bvalid                 (fmcomms2_axi_ad9361_s_axi_bvalid),                            //                  .bvalid
		.bready                 (fmcomms2_axi_ad9361_s_axi_bready),                            //                  .bready
		.araddr                 (fmcomms2_axi_ad9361_s_axi_araddr),                            //                  .araddr
		.arprot                 (fmcomms2_axi_ad9361_s_axi_arprot),                            //                  .arprot
		.arvalid                (fmcomms2_axi_ad9361_s_axi_arvalid),                           //                  .arvalid
		.arready                (fmcomms2_axi_ad9361_s_axi_arready),                           //                  .arready
		.rdata                  (fmcomms2_axi_ad9361_s_axi_rdata),                             //                  .rdata
		.rresp                  (fmcomms2_axi_ad9361_s_axi_rresp),                             //                  .rresp
		.rvalid                 (fmcomms2_axi_ad9361_s_axi_rvalid),                            //                  .rvalid
		.rready                 (fmcomms2_axi_ad9361_s_axi_rready)                             //                  .rready
	);

	ghrd_10as066n2_altera_merlin_router_161_7j7u7zi router (
		.sink_ready         (sys_cpu_interconnect_m0_agent_write_cp_ready),               //      sink.ready
		.sink_valid         (sys_cpu_interconnect_m0_agent_write_cp_valid),               //          .valid
		.sink_data          (sys_cpu_interconnect_m0_agent_write_cp_data),                //          .data
		.sink_startofpacket (sys_cpu_interconnect_m0_agent_write_cp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (sys_cpu_interconnect_m0_agent_write_cp_endofpacket),         //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                           //       src.ready
		.src_valid          (router_src_valid),                                           //          .valid
		.src_data           (router_src_data),                                            //          .data
		.src_channel        (router_src_channel),                                         //          .channel
		.src_startofpacket  (router_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                      //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_53v6b7a router_001 (
		.sink_ready         (sys_cpu_interconnect_m0_agent_read_cp_ready),                //      sink.ready
		.sink_valid         (sys_cpu_interconnect_m0_agent_read_cp_valid),                //          .valid
		.sink_data          (sys_cpu_interconnect_m0_agent_read_cp_data),                 //          .data
		.sink_startofpacket (sys_cpu_interconnect_m0_agent_read_cp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (sys_cpu_interconnect_m0_agent_read_cp_endofpacket),          //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                       //       src.ready
		.src_valid          (router_001_src_valid),                                       //          .valid
		.src_data           (router_001_src_data),                                        //          .data
		.src_channel        (router_001_src_channel),                                     //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                  //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_dv3xayi router_002 (
		.sink_ready         (agent_pipeline_002_source0_ready),                           //      sink.ready
		.sink_valid         (agent_pipeline_002_source0_valid),                           //          .valid
		.sink_data          (agent_pipeline_002_source0_data),                            //          .data
		.sink_startofpacket (agent_pipeline_002_source0_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (agent_pipeline_002_source0_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                       //       src.ready
		.src_valid          (router_002_src_valid),                                       //          .valid
		.src_data           (router_002_src_data),                                        //          .data
		.src_channel        (router_002_src_channel),                                     //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                  //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_ynxujwi router_003 (
		.sink_ready         (agent_pipeline_003_source0_ready),                           //      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),                           //          .valid
		.sink_data          (agent_pipeline_003_source0_data),                            //          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                       //       src.ready
		.src_valid          (router_003_src_valid),                                       //          .valid
		.src_data           (router_003_src_data),                                        //          .data
		.src_channel        (router_003_src_channel),                                     //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                  //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_dv3xayi router_004 (
		.sink_ready         (agent_pipeline_006_source0_ready),                           //      sink.ready
		.sink_valid         (agent_pipeline_006_source0_valid),                           //          .valid
		.sink_data          (agent_pipeline_006_source0_data),                            //          .data
		.sink_startofpacket (agent_pipeline_006_source0_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (agent_pipeline_006_source0_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                       //       src.ready
		.src_valid          (router_004_src_valid),                                       //          .valid
		.src_data           (router_004_src_data),                                        //          .data
		.src_channel        (router_004_src_channel),                                     //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                  //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_ynxujwi router_005 (
		.sink_ready         (agent_pipeline_007_source0_ready),                           //      sink.ready
		.sink_valid         (agent_pipeline_007_source0_valid),                           //          .valid
		.sink_data          (agent_pipeline_007_source0_data),                            //          .data
		.sink_startofpacket (agent_pipeline_007_source0_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (agent_pipeline_007_source0_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                       //       src.ready
		.src_valid          (router_005_src_valid),                                       //          .valid
		.src_data           (router_005_src_data),                                        //          .data
		.src_channel        (router_005_src_channel),                                     //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                  //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_dv3xayi router_006 (
		.sink_ready         (agent_pipeline_010_source0_ready),                           //      sink.ready
		.sink_valid         (agent_pipeline_010_source0_valid),                           //          .valid
		.sink_data          (agent_pipeline_010_source0_data),                            //          .data
		.sink_startofpacket (agent_pipeline_010_source0_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (agent_pipeline_010_source0_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                       //       src.ready
		.src_valid          (router_006_src_valid),                                       //          .valid
		.src_data           (router_006_src_data),                                        //          .data
		.src_channel        (router_006_src_channel),                                     //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                  //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_ynxujwi router_007 (
		.sink_ready         (agent_pipeline_011_source0_ready),                           //      sink.ready
		.sink_valid         (agent_pipeline_011_source0_valid),                           //          .valid
		.sink_data          (agent_pipeline_011_source0_data),                            //          .data
		.sink_startofpacket (agent_pipeline_011_source0_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (agent_pipeline_011_source0_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                       //       src.ready
		.src_valid          (router_007_src_valid),                                       //          .valid
		.src_data           (router_007_src_data),                                        //          .data
		.src_channel        (router_007_src_channel),                                     //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                  //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (87),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (68),
		.PKT_BYTE_CNT_L            (62),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.MAX_OUTSTANDING_RESPONSES (15),
		.PIPELINED                 (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) sys_cpu_interconnect_m0_wr_limiter (
		.clk                    (clk_0_clk_clk),                                              //       clk.clk
		.reset                  (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                           //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                           //          .valid
		.cmd_sink_data          (router_src_data),                                            //          .data
		.cmd_sink_channel       (router_src_channel),                                         //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                   //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                     //          .endofpacket
		.cmd_src_ready          (sys_cpu_interconnect_m0_wr_limiter_cmd_src_ready),           //   cmd_src.ready
		.cmd_src_data           (sys_cpu_interconnect_m0_wr_limiter_cmd_src_data),            //          .data
		.cmd_src_channel        (sys_cpu_interconnect_m0_wr_limiter_cmd_src_channel),         //          .channel
		.cmd_src_startofpacket  (sys_cpu_interconnect_m0_wr_limiter_cmd_src_startofpacket),   //          .startofpacket
		.cmd_src_endofpacket    (sys_cpu_interconnect_m0_wr_limiter_cmd_src_endofpacket),     //          .endofpacket
		.cmd_src_valid          (sys_cpu_interconnect_m0_wr_limiter_cmd_src_valid),           //          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),                         //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),                         //          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),                       //          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),                          //          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),                 //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),                   //          .endofpacket
		.rsp_src_ready          (sys_cpu_interconnect_m0_wr_limiter_rsp_src_ready),           //   rsp_src.ready
		.rsp_src_valid          (sys_cpu_interconnect_m0_wr_limiter_rsp_src_valid),           //          .valid
		.rsp_src_data           (sys_cpu_interconnect_m0_wr_limiter_rsp_src_data),            //          .data
		.rsp_src_channel        (sys_cpu_interconnect_m0_wr_limiter_rsp_src_channel),         //          .channel
		.rsp_src_startofpacket  (sys_cpu_interconnect_m0_wr_limiter_rsp_src_startofpacket),   //          .startofpacket
		.rsp_src_endofpacket    (sys_cpu_interconnect_m0_wr_limiter_rsp_src_endofpacket)      //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (87),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (68),
		.PKT_BYTE_CNT_L            (62),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.MAX_OUTSTANDING_RESPONSES (15),
		.PIPELINED                 (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) sys_cpu_interconnect_m0_rd_limiter (
		.clk                    (clk_0_clk_clk),                                              //       clk.clk
		.reset                  (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                       //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                       //          .valid
		.cmd_sink_data          (router_001_src_data),                                        //          .data
		.cmd_sink_channel       (router_001_src_channel),                                     //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                               //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                 //          .endofpacket
		.cmd_src_ready          (sys_cpu_interconnect_m0_rd_limiter_cmd_src_ready),           //   cmd_src.ready
		.cmd_src_data           (sys_cpu_interconnect_m0_rd_limiter_cmd_src_data),            //          .data
		.cmd_src_channel        (sys_cpu_interconnect_m0_rd_limiter_cmd_src_channel),         //          .channel
		.cmd_src_startofpacket  (sys_cpu_interconnect_m0_rd_limiter_cmd_src_startofpacket),   //          .startofpacket
		.cmd_src_endofpacket    (sys_cpu_interconnect_m0_rd_limiter_cmd_src_endofpacket),     //          .endofpacket
		.cmd_src_valid          (sys_cpu_interconnect_m0_rd_limiter_cmd_src_valid),           //          .valid
		.rsp_sink_ready         (limiter_pipeline_003_source0_ready),                         //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_003_source0_valid),                         //          .valid
		.rsp_sink_channel       (limiter_pipeline_003_source0_channel),                       //          .channel
		.rsp_sink_data          (limiter_pipeline_003_source0_data),                          //          .data
		.rsp_sink_startofpacket (limiter_pipeline_003_source0_startofpacket),                 //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_003_source0_endofpacket),                   //          .endofpacket
		.rsp_src_ready          (sys_cpu_interconnect_m0_rd_limiter_rsp_src_ready),           //   rsp_src.ready
		.rsp_src_valid          (sys_cpu_interconnect_m0_rd_limiter_rsp_src_valid),           //          .valid
		.rsp_src_data           (sys_cpu_interconnect_m0_rd_limiter_rsp_src_data),            //          .data
		.rsp_src_channel        (sys_cpu_interconnect_m0_rd_limiter_rsp_src_channel),         //          .channel
		.rsp_src_startofpacket  (sys_cpu_interconnect_m0_rd_limiter_rsp_src_startofpacket),   //          .startofpacket
		.rsp_src_endofpacket    (sys_cpu_interconnect_m0_rd_limiter_rsp_src_endofpacket)      //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (83),
		.PKT_BYTE_CNT_H            (68),
		.PKT_BYTE_CNT_L            (62),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (69),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (64),
		.OUT_BURSTWRAP_H           (75),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                                        //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                         //          .data
		.sink0_channel         (cmd_mux_src_channel),                                                      //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                                  //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                                        //          .ready
		.source0_valid         (fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter_source0_data),          //          .data
		.source0_channel       (fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (83),
		.PKT_BYTE_CNT_H            (68),
		.PKT_BYTE_CNT_L            (62),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (69),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (64),
		.OUT_BURSTWRAP_H           (75),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                                    //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                                     //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                                  //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                              //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                                    //          .ready
		.source0_valid         (fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter_source0_data),          //          .data
		.source0_channel       (fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (83),
		.PKT_BYTE_CNT_H            (68),
		.PKT_BYTE_CNT_L            (62),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (69),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (64),
		.OUT_BURSTWRAP_H           (75),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                                    //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                                     //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                                  //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                              //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                                    //          .ready
		.source0_valid         (fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter_source0_data),          //          .data
		.source0_channel       (fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (83),
		.PKT_BYTE_CNT_H            (68),
		.PKT_BYTE_CNT_L            (62),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (69),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (64),
		.OUT_BURSTWRAP_H           (75),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                                    //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                                     //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                                  //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                                              //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                                    //          .ready
		.source0_valid         (fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter_source0_data),          //          .data
		.source0_channel       (fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (83),
		.PKT_BYTE_CNT_H            (68),
		.PKT_BYTE_CNT_L            (62),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (69),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (64),
		.OUT_BURSTWRAP_H           (75),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fmcomms2_axi_ad9361_s_axi_wr_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                    //       cr0.clk
		.reset                 (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                            //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                             //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                          //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                                      //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                            //          .ready
		.source0_valid         (fmcomms2_axi_ad9361_s_axi_wr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fmcomms2_axi_ad9361_s_axi_wr_burst_adapter_source0_data),          //          .data
		.source0_channel       (fmcomms2_axi_ad9361_s_axi_wr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fmcomms2_axi_ad9361_s_axi_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fmcomms2_axi_ad9361_s_axi_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fmcomms2_axi_ad9361_s_axi_wr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (83),
		.PKT_BYTE_CNT_H            (68),
		.PKT_BYTE_CNT_L            (62),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (69),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (64),
		.OUT_BURSTWRAP_H           (75),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fmcomms2_axi_ad9361_s_axi_rd_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                    //       cr0.clk
		.reset                 (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                                            //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                             //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                                          //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                                      //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                                            //          .ready
		.source0_valid         (fmcomms2_axi_ad9361_s_axi_rd_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fmcomms2_axi_ad9361_s_axi_rd_burst_adapter_source0_data),          //          .data
		.source0_channel       (fmcomms2_axi_ad9361_s_axi_rd_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fmcomms2_axi_ad9361_s_axi_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fmcomms2_axi_ad9361_s_axi_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fmcomms2_axi_ad9361_s_axi_rd_burst_adapter_source0_ready)          //          .ready
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_75rarwy cmd_demux (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (limiter_pipeline_source0_ready),                             //      sink.ready
		.sink_channel       (limiter_pipeline_source0_channel),                           //          .channel
		.sink_data          (limiter_pipeline_source0_data),                              //          .data
		.sink_startofpacket (limiter_pipeline_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_source0_endofpacket),                       //          .endofpacket
		.sink_valid         (limiter_pipeline_source0_valid),                             //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                       //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                       //          .valid
		.src0_data          (cmd_demux_src0_data),                                        //          .data
		.src0_channel       (cmd_demux_src0_channel),                                     //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                               //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                 //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                       //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                       //          .valid
		.src1_data          (cmd_demux_src1_data),                                        //          .data
		.src1_channel       (cmd_demux_src1_channel),                                     //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                               //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                 //          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                       //      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                       //          .valid
		.src2_data          (cmd_demux_src2_data),                                        //          .data
		.src2_channel       (cmd_demux_src2_channel),                                     //          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                               //          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket)                                  //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_75rarwy cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (limiter_pipeline_002_source0_ready),                         //      sink.ready
		.sink_channel       (limiter_pipeline_002_source0_channel),                       //          .channel
		.sink_data          (limiter_pipeline_002_source0_data),                          //          .data
		.sink_startofpacket (limiter_pipeline_002_source0_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_002_source0_endofpacket),                   //          .endofpacket
		.sink_valid         (limiter_pipeline_002_source0_valid),                         //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                   //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                   //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                    //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                 //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                             //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                   //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                   //          .valid
		.src1_data          (cmd_demux_001_src1_data),                                    //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                                 //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                           //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                             //          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                   //      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                   //          .valid
		.src2_data          (cmd_demux_001_src2_data),                                    //          .data
		.src2_channel       (cmd_demux_001_src2_channel),                                 //          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                           //          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket)                              //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_n45amya cmd_mux (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                          //       src.ready
		.src_valid           (cmd_mux_src_valid),                                          //          .valid
		.src_data            (cmd_mux_src_data),                                           //          .data
		.src_channel         (cmd_mux_src_channel),                                        //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                    //          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                                 //     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                                 //          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                               //          .channel
		.sink0_data          (mux_pipeline_source0_data),                                  //          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket)                            //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_n45amya cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                      //          .valid
		.src_data            (cmd_mux_001_src_data),                                       //          .data
		.src_channel         (cmd_mux_001_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (mux_pipeline_001_source0_ready),                             //     sink0.ready
		.sink0_valid         (mux_pipeline_001_source0_valid),                             //          .valid
		.sink0_channel       (mux_pipeline_001_source0_channel),                           //          .channel
		.sink0_data          (mux_pipeline_001_source0_data),                              //          .data
		.sink0_startofpacket (mux_pipeline_001_source0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_001_source0_endofpacket)                        //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_n45amya cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                      //          .valid
		.src_data            (cmd_mux_002_src_data),                                       //          .data
		.src_channel         (cmd_mux_002_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (mux_pipeline_002_source0_ready),                             //     sink0.ready
		.sink0_valid         (mux_pipeline_002_source0_valid),                             //          .valid
		.sink0_channel       (mux_pipeline_002_source0_channel),                           //          .channel
		.sink0_data          (mux_pipeline_002_source0_data),                              //          .data
		.sink0_startofpacket (mux_pipeline_002_source0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_002_source0_endofpacket)                        //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_n45amya cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                      //          .valid
		.src_data            (cmd_mux_003_src_data),                                       //          .data
		.src_channel         (cmd_mux_003_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (mux_pipeline_003_source0_ready),                             //     sink0.ready
		.sink0_valid         (mux_pipeline_003_source0_valid),                             //          .valid
		.sink0_channel       (mux_pipeline_003_source0_channel),                           //          .channel
		.sink0_data          (mux_pipeline_003_source0_data),                              //          .data
		.sink0_startofpacket (mux_pipeline_003_source0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_003_source0_endofpacket)                        //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_n45amya cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                      //          .valid
		.src_data            (cmd_mux_004_src_data),                                       //          .data
		.src_channel         (cmd_mux_004_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (mux_pipeline_004_source0_ready),                             //     sink0.ready
		.sink0_valid         (mux_pipeline_004_source0_valid),                             //          .valid
		.sink0_channel       (mux_pipeline_004_source0_channel),                           //          .channel
		.sink0_data          (mux_pipeline_004_source0_data),                              //          .data
		.sink0_startofpacket (mux_pipeline_004_source0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_004_source0_endofpacket)                        //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_n45amya cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                      //          .valid
		.src_data            (cmd_mux_005_src_data),                                       //          .data
		.src_channel         (cmd_mux_005_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (mux_pipeline_005_source0_ready),                             //     sink0.ready
		.sink0_valid         (mux_pipeline_005_source0_valid),                             //          .valid
		.sink0_channel       (mux_pipeline_005_source0_channel),                           //          .channel
		.sink0_data          (mux_pipeline_005_source0_data),                              //          .data
		.sink0_startofpacket (mux_pipeline_005_source0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_005_source0_endofpacket)                        //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_hjzdcjq rsp_demux (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                       //      sink.ready
		.sink_channel       (router_002_src_channel),                                     //          .channel
		.sink_data          (router_002_src_data),                                        //          .data
		.sink_startofpacket (router_002_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_002_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                       //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                       //          .valid
		.src0_data          (rsp_demux_src0_data),                                        //          .data
		.src0_channel       (rsp_demux_src0_channel),                                     //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                               //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                  //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_hjzdcjq rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                       //      sink.ready
		.sink_channel       (router_003_src_channel),                                     //          .channel
		.sink_data          (router_003_src_data),                                        //          .data
		.sink_startofpacket (router_003_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_003_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                              //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_hjzdcjq rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                       //      sink.ready
		.sink_channel       (router_004_src_channel),                                     //          .channel
		.sink_data          (router_004_src_data),                                        //          .data
		.sink_startofpacket (router_004_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_004_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                              //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_hjzdcjq rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                       //      sink.ready
		.sink_channel       (router_005_src_channel),                                     //          .channel
		.sink_data          (router_005_src_data),                                        //          .data
		.sink_startofpacket (router_005_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_005_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                              //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_hjzdcjq rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                       //      sink.ready
		.sink_channel       (router_006_src_channel),                                     //          .channel
		.sink_data          (router_006_src_data),                                        //          .data
		.sink_startofpacket (router_006_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_006_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                              //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_hjzdcjq rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                       //      sink.ready
		.sink_channel       (router_007_src_channel),                                     //          .channel
		.sink_data          (router_007_src_data),                                        //          .data
		.sink_startofpacket (router_007_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_007_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                              //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_7qkhisy rsp_mux (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                          //       src.ready
		.src_valid           (rsp_mux_src_valid),                                          //          .valid
		.src_data            (rsp_mux_src_data),                                           //          .data
		.src_channel         (rsp_mux_src_channel),                                        //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                    //          .endofpacket
		.sink0_ready         (mux_pipeline_006_source0_ready),                             //     sink0.ready
		.sink0_valid         (mux_pipeline_006_source0_valid),                             //          .valid
		.sink0_channel       (mux_pipeline_006_source0_channel),                           //          .channel
		.sink0_data          (mux_pipeline_006_source0_data),                              //          .data
		.sink0_startofpacket (mux_pipeline_006_source0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_006_source0_endofpacket),                       //          .endofpacket
		.sink1_ready         (mux_pipeline_007_source0_ready),                             //     sink1.ready
		.sink1_valid         (mux_pipeline_007_source0_valid),                             //          .valid
		.sink1_channel       (mux_pipeline_007_source0_channel),                           //          .channel
		.sink1_data          (mux_pipeline_007_source0_data),                              //          .data
		.sink1_startofpacket (mux_pipeline_007_source0_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_007_source0_endofpacket),                       //          .endofpacket
		.sink2_ready         (mux_pipeline_008_source0_ready),                             //     sink2.ready
		.sink2_valid         (mux_pipeline_008_source0_valid),                             //          .valid
		.sink2_channel       (mux_pipeline_008_source0_channel),                           //          .channel
		.sink2_data          (mux_pipeline_008_source0_data),                              //          .data
		.sink2_startofpacket (mux_pipeline_008_source0_startofpacket),                     //          .startofpacket
		.sink2_endofpacket   (mux_pipeline_008_source0_endofpacket)                        //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_7qkhisy rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                      //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                      //          .valid
		.src_data            (rsp_mux_001_src_data),                                       //          .data
		.src_channel         (rsp_mux_001_src_channel),                                    //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (mux_pipeline_009_source0_ready),                             //     sink0.ready
		.sink0_valid         (mux_pipeline_009_source0_valid),                             //          .valid
		.sink0_channel       (mux_pipeline_009_source0_channel),                           //          .channel
		.sink0_data          (mux_pipeline_009_source0_data),                              //          .data
		.sink0_startofpacket (mux_pipeline_009_source0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_009_source0_endofpacket),                       //          .endofpacket
		.sink1_ready         (mux_pipeline_010_source0_ready),                             //     sink1.ready
		.sink1_valid         (mux_pipeline_010_source0_valid),                             //          .valid
		.sink1_channel       (mux_pipeline_010_source0_channel),                           //          .channel
		.sink1_data          (mux_pipeline_010_source0_data),                              //          .data
		.sink1_startofpacket (mux_pipeline_010_source0_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_010_source0_endofpacket),                       //          .endofpacket
		.sink2_ready         (mux_pipeline_011_source0_ready),                             //     sink2.ready
		.sink2_valid         (mux_pipeline_011_source0_valid),                             //          .valid
		.sink2_channel       (mux_pipeline_011_source0_channel),                           //          .channel
		.sink2_data          (mux_pipeline_011_source0_data),                              //          .data
		.sink2_startofpacket (mux_pipeline_011_source0_startofpacket),                     //          .startofpacket
		.sink2_endofpacket   (mux_pipeline_011_source0_endofpacket)                        //          .endofpacket
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (sys_cpu_interconnect_m0_wr_limiter_cmd_src_ready),           //     sink0.ready
		.in_valid          (sys_cpu_interconnect_m0_wr_limiter_cmd_src_valid),           //          .valid
		.in_startofpacket  (sys_cpu_interconnect_m0_wr_limiter_cmd_src_startofpacket),   //          .startofpacket
		.in_endofpacket    (sys_cpu_interconnect_m0_wr_limiter_cmd_src_endofpacket),     //          .endofpacket
		.in_data           (sys_cpu_interconnect_m0_wr_limiter_cmd_src_data),            //          .data
		.in_channel        (sys_cpu_interconnect_m0_wr_limiter_cmd_src_channel),         //          .channel
		.out_ready         (limiter_pipeline_source0_ready),                             //   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                             //          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),                       //          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                              //          .data
		.out_channel       (limiter_pipeline_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_001 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_mux_src_ready),                                          //     sink0.ready
		.in_valid          (rsp_mux_src_valid),                                          //          .valid
		.in_startofpacket  (rsp_mux_src_startofpacket),                                  //          .startofpacket
		.in_endofpacket    (rsp_mux_src_endofpacket),                                    //          .endofpacket
		.in_data           (rsp_mux_src_data),                                           //          .data
		.in_channel        (rsp_mux_src_channel),                                        //          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),                         //   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),                         //          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),                   //          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),                          //          .data
		.out_channel       (limiter_pipeline_001_source0_channel),                       //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_002 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (sys_cpu_interconnect_m0_rd_limiter_cmd_src_ready),           //     sink0.ready
		.in_valid          (sys_cpu_interconnect_m0_rd_limiter_cmd_src_valid),           //          .valid
		.in_startofpacket  (sys_cpu_interconnect_m0_rd_limiter_cmd_src_startofpacket),   //          .startofpacket
		.in_endofpacket    (sys_cpu_interconnect_m0_rd_limiter_cmd_src_endofpacket),     //          .endofpacket
		.in_data           (sys_cpu_interconnect_m0_rd_limiter_cmd_src_data),            //          .data
		.in_channel        (sys_cpu_interconnect_m0_rd_limiter_cmd_src_channel),         //          .channel
		.out_ready         (limiter_pipeline_002_source0_ready),                         //   source0.ready
		.out_valid         (limiter_pipeline_002_source0_valid),                         //          .valid
		.out_startofpacket (limiter_pipeline_002_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (limiter_pipeline_002_source0_endofpacket),                   //          .endofpacket
		.out_data          (limiter_pipeline_002_source0_data),                          //          .data
		.out_channel       (limiter_pipeline_002_source0_channel),                       //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_003 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_mux_001_src_ready),                                      //     sink0.ready
		.in_valid          (rsp_mux_001_src_valid),                                      //          .valid
		.in_startofpacket  (rsp_mux_001_src_startofpacket),                              //          .startofpacket
		.in_endofpacket    (rsp_mux_001_src_endofpacket),                                //          .endofpacket
		.in_data           (rsp_mux_001_src_data),                                       //          .data
		.in_channel        (rsp_mux_001_src_channel),                                    //          .channel
		.out_ready         (limiter_pipeline_003_source0_ready),                         //   source0.ready
		.out_valid         (limiter_pipeline_003_source0_valid),                         //          .valid
		.out_startofpacket (limiter_pipeline_003_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (limiter_pipeline_003_source0_endofpacket),                   //          .endofpacket
		.out_data          (limiter_pipeline_003_source0_data),                          //          .data
		.out_channel       (limiter_pipeline_003_source0_channel),                       //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (clk_0_clk_clk),                                                            //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.in_ready          (fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter_source0_data),          //          .data
		.in_channel        (fmcomms2_axi_ad9361_adc_dma_s_axi_wr_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_source0_ready),                                             //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                                             //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                                       //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                                              //          .data
		.out_channel       (agent_pipeline_source0_channel),                                           //          .channel
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_error          (1'b0)                                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (clk_0_clk_clk),                                                            //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.in_ready          (fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter_source0_data),          //          .data
		.in_channel        (fmcomms2_axi_ad9361_adc_dma_s_axi_rd_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_001_source0_ready),                                         //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                                         //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),                                 //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),                                   //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                                          //          .data
		.out_channel       (agent_pipeline_001_source0_channel),                                       //          .channel
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_error          (1'b0)                                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_002 (
		.clk               (clk_0_clk_clk),                                                  //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (fmcomms2_axi_ad9361_adc_dma_s_axi_agent_write_rp_ready),         //     sink0.ready
		.in_valid          (fmcomms2_axi_ad9361_adc_dma_s_axi_agent_write_rp_valid),         //          .valid
		.in_startofpacket  (fmcomms2_axi_ad9361_adc_dma_s_axi_agent_write_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (fmcomms2_axi_ad9361_adc_dma_s_axi_agent_write_rp_endofpacket),   //          .endofpacket
		.in_data           (fmcomms2_axi_ad9361_adc_dma_s_axi_agent_write_rp_data),          //          .data
		.out_ready         (agent_pipeline_002_source0_ready),                               //   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),                               //          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),                         //          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),                                //          .data
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_channel       (),                                                               // (terminated)
		.in_channel        (1'b0)                                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_003 (
		.clk               (clk_0_clk_clk),                                                 //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (fmcomms2_axi_ad9361_adc_dma_s_axi_agent_read_rp_ready),         //     sink0.ready
		.in_valid          (fmcomms2_axi_ad9361_adc_dma_s_axi_agent_read_rp_valid),         //          .valid
		.in_startofpacket  (fmcomms2_axi_ad9361_adc_dma_s_axi_agent_read_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (fmcomms2_axi_ad9361_adc_dma_s_axi_agent_read_rp_endofpacket),   //          .endofpacket
		.in_data           (fmcomms2_axi_ad9361_adc_dma_s_axi_agent_read_rp_data),          //          .data
		.out_ready         (agent_pipeline_003_source0_ready),                              //   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),                              //          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket),                      //          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),                        //          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),                               //          .data
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_channel       (),                                                              // (terminated)
		.in_channel        (1'b0)                                                           // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_004 (
		.clk               (clk_0_clk_clk),                                                            //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.in_ready          (fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter_source0_data),          //          .data
		.in_channel        (fmcomms2_axi_ad9361_dac_dma_s_axi_wr_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_004_source0_ready),                                         //   source0.ready
		.out_valid         (agent_pipeline_004_source0_valid),                                         //          .valid
		.out_startofpacket (agent_pipeline_004_source0_startofpacket),                                 //          .startofpacket
		.out_endofpacket   (agent_pipeline_004_source0_endofpacket),                                   //          .endofpacket
		.out_data          (agent_pipeline_004_source0_data),                                          //          .data
		.out_channel       (agent_pipeline_004_source0_channel),                                       //          .channel
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_error          (1'b0)                                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_005 (
		.clk               (clk_0_clk_clk),                                                            //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.in_ready          (fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter_source0_data),          //          .data
		.in_channel        (fmcomms2_axi_ad9361_dac_dma_s_axi_rd_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_005_source0_ready),                                         //   source0.ready
		.out_valid         (agent_pipeline_005_source0_valid),                                         //          .valid
		.out_startofpacket (agent_pipeline_005_source0_startofpacket),                                 //          .startofpacket
		.out_endofpacket   (agent_pipeline_005_source0_endofpacket),                                   //          .endofpacket
		.out_data          (agent_pipeline_005_source0_data),                                          //          .data
		.out_channel       (agent_pipeline_005_source0_channel),                                       //          .channel
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_error          (1'b0)                                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_006 (
		.clk               (clk_0_clk_clk),                                                  //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (fmcomms2_axi_ad9361_dac_dma_s_axi_agent_write_rp_ready),         //     sink0.ready
		.in_valid          (fmcomms2_axi_ad9361_dac_dma_s_axi_agent_write_rp_valid),         //          .valid
		.in_startofpacket  (fmcomms2_axi_ad9361_dac_dma_s_axi_agent_write_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (fmcomms2_axi_ad9361_dac_dma_s_axi_agent_write_rp_endofpacket),   //          .endofpacket
		.in_data           (fmcomms2_axi_ad9361_dac_dma_s_axi_agent_write_rp_data),          //          .data
		.out_ready         (agent_pipeline_006_source0_ready),                               //   source0.ready
		.out_valid         (agent_pipeline_006_source0_valid),                               //          .valid
		.out_startofpacket (agent_pipeline_006_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (agent_pipeline_006_source0_endofpacket),                         //          .endofpacket
		.out_data          (agent_pipeline_006_source0_data),                                //          .data
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_channel       (),                                                               // (terminated)
		.in_channel        (1'b0)                                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_007 (
		.clk               (clk_0_clk_clk),                                                 //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (fmcomms2_axi_ad9361_dac_dma_s_axi_agent_read_rp_ready),         //     sink0.ready
		.in_valid          (fmcomms2_axi_ad9361_dac_dma_s_axi_agent_read_rp_valid),         //          .valid
		.in_startofpacket  (fmcomms2_axi_ad9361_dac_dma_s_axi_agent_read_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (fmcomms2_axi_ad9361_dac_dma_s_axi_agent_read_rp_endofpacket),   //          .endofpacket
		.in_data           (fmcomms2_axi_ad9361_dac_dma_s_axi_agent_read_rp_data),          //          .data
		.out_ready         (agent_pipeline_007_source0_ready),                              //   source0.ready
		.out_valid         (agent_pipeline_007_source0_valid),                              //          .valid
		.out_startofpacket (agent_pipeline_007_source0_startofpacket),                      //          .startofpacket
		.out_endofpacket   (agent_pipeline_007_source0_endofpacket),                        //          .endofpacket
		.out_data          (agent_pipeline_007_source0_data),                               //          .data
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_channel       (),                                                              // (terminated)
		.in_channel        (1'b0)                                                           // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_008 (
		.clk               (clk_0_clk_clk),                                                    //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.in_ready          (fmcomms2_axi_ad9361_s_axi_wr_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (fmcomms2_axi_ad9361_s_axi_wr_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (fmcomms2_axi_ad9361_s_axi_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (fmcomms2_axi_ad9361_s_axi_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (fmcomms2_axi_ad9361_s_axi_wr_burst_adapter_source0_data),          //          .data
		.in_channel        (fmcomms2_axi_ad9361_s_axi_wr_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_008_source0_ready),                                 //   source0.ready
		.out_valid         (agent_pipeline_008_source0_valid),                                 //          .valid
		.out_startofpacket (agent_pipeline_008_source0_startofpacket),                         //          .startofpacket
		.out_endofpacket   (agent_pipeline_008_source0_endofpacket),                           //          .endofpacket
		.out_data          (agent_pipeline_008_source0_data),                                  //          .data
		.out_channel       (agent_pipeline_008_source0_channel),                               //          .channel
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_009 (
		.clk               (clk_0_clk_clk),                                                    //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.in_ready          (fmcomms2_axi_ad9361_s_axi_rd_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (fmcomms2_axi_ad9361_s_axi_rd_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (fmcomms2_axi_ad9361_s_axi_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (fmcomms2_axi_ad9361_s_axi_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (fmcomms2_axi_ad9361_s_axi_rd_burst_adapter_source0_data),          //          .data
		.in_channel        (fmcomms2_axi_ad9361_s_axi_rd_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_009_source0_ready),                                 //   source0.ready
		.out_valid         (agent_pipeline_009_source0_valid),                                 //          .valid
		.out_startofpacket (agent_pipeline_009_source0_startofpacket),                         //          .startofpacket
		.out_endofpacket   (agent_pipeline_009_source0_endofpacket),                           //          .endofpacket
		.out_data          (agent_pipeline_009_source0_data),                                  //          .data
		.out_channel       (agent_pipeline_009_source0_channel),                               //          .channel
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_010 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (fmcomms2_axi_ad9361_s_axi_agent_write_rp_ready),             //     sink0.ready
		.in_valid          (fmcomms2_axi_ad9361_s_axi_agent_write_rp_valid),             //          .valid
		.in_startofpacket  (fmcomms2_axi_ad9361_s_axi_agent_write_rp_startofpacket),     //          .startofpacket
		.in_endofpacket    (fmcomms2_axi_ad9361_s_axi_agent_write_rp_endofpacket),       //          .endofpacket
		.in_data           (fmcomms2_axi_ad9361_s_axi_agent_write_rp_data),              //          .data
		.out_ready         (agent_pipeline_010_source0_ready),                           //   source0.ready
		.out_valid         (agent_pipeline_010_source0_valid),                           //          .valid
		.out_startofpacket (agent_pipeline_010_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (agent_pipeline_010_source0_endofpacket),                     //          .endofpacket
		.out_data          (agent_pipeline_010_source0_data),                            //          .data
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_channel       (),                                                           // (terminated)
		.in_channel        (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_011 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (fmcomms2_axi_ad9361_s_axi_agent_read_rp_ready),              //     sink0.ready
		.in_valid          (fmcomms2_axi_ad9361_s_axi_agent_read_rp_valid),              //          .valid
		.in_startofpacket  (fmcomms2_axi_ad9361_s_axi_agent_read_rp_startofpacket),      //          .startofpacket
		.in_endofpacket    (fmcomms2_axi_ad9361_s_axi_agent_read_rp_endofpacket),        //          .endofpacket
		.in_data           (fmcomms2_axi_ad9361_s_axi_agent_read_rp_data),               //          .data
		.out_ready         (agent_pipeline_011_source0_ready),                           //   source0.ready
		.out_valid         (agent_pipeline_011_source0_valid),                           //          .valid
		.out_startofpacket (agent_pipeline_011_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (agent_pipeline_011_source0_endofpacket),                     //          .endofpacket
		.out_data          (agent_pipeline_011_source0_data),                            //          .data
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_channel       (),                                                           // (terminated)
		.in_channel        (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                       //     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                                       //          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                               //          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                 //          .endofpacket
		.in_data           (cmd_demux_src0_data),                                        //          .data
		.in_channel        (cmd_demux_src0_channel),                                     //          .channel
		.out_ready         (mux_pipeline_source0_ready),                                 //   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                                 //          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),                         //          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),                           //          .endofpacket
		.out_data          (mux_pipeline_source0_data),                                  //          .data
		.out_channel       (mux_pipeline_source0_channel),                               //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_001 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                   //     sink0.ready
		.in_valid          (cmd_demux_001_src0_valid),                                   //          .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                           //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                             //          .endofpacket
		.in_data           (cmd_demux_001_src0_data),                                    //          .data
		.in_channel        (cmd_demux_001_src0_channel),                                 //          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                             //   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                             //          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),                       //          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                              //          .data
		.out_channel       (mux_pipeline_001_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_002 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                       //     sink0.ready
		.in_valid          (cmd_demux_src1_valid),                                       //          .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                               //          .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                                 //          .endofpacket
		.in_data           (cmd_demux_src1_data),                                        //          .data
		.in_channel        (cmd_demux_src1_channel),                                     //          .channel
		.out_ready         (mux_pipeline_002_source0_ready),                             //   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),                             //          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),                       //          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),                              //          .data
		.out_channel       (mux_pipeline_002_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_003 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                                   //     sink0.ready
		.in_valid          (cmd_demux_001_src1_valid),                                   //          .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),                           //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),                             //          .endofpacket
		.in_data           (cmd_demux_001_src1_data),                                    //          .data
		.in_channel        (cmd_demux_001_src1_channel),                                 //          .channel
		.out_ready         (mux_pipeline_003_source0_ready),                             //   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),                             //          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),                       //          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),                              //          .data
		.out_channel       (mux_pipeline_003_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_004 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src2_ready),                                       //     sink0.ready
		.in_valid          (cmd_demux_src2_valid),                                       //          .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                               //          .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                                 //          .endofpacket
		.in_data           (cmd_demux_src2_data),                                        //          .data
		.in_channel        (cmd_demux_src2_channel),                                     //          .channel
		.out_ready         (mux_pipeline_004_source0_ready),                             //   source0.ready
		.out_valid         (mux_pipeline_004_source0_valid),                             //          .valid
		.out_startofpacket (mux_pipeline_004_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (mux_pipeline_004_source0_endofpacket),                       //          .endofpacket
		.out_data          (mux_pipeline_004_source0_data),                              //          .data
		.out_channel       (mux_pipeline_004_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_005 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src2_ready),                                   //     sink0.ready
		.in_valid          (cmd_demux_001_src2_valid),                                   //          .valid
		.in_startofpacket  (cmd_demux_001_src2_startofpacket),                           //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src2_endofpacket),                             //          .endofpacket
		.in_data           (cmd_demux_001_src2_data),                                    //          .data
		.in_channel        (cmd_demux_001_src2_channel),                                 //          .channel
		.out_ready         (mux_pipeline_005_source0_ready),                             //   source0.ready
		.out_valid         (mux_pipeline_005_source0_valid),                             //          .valid
		.out_startofpacket (mux_pipeline_005_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (mux_pipeline_005_source0_endofpacket),                       //          .endofpacket
		.out_data          (mux_pipeline_005_source0_data),                              //          .data
		.out_channel       (mux_pipeline_005_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_006 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                       //     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                                       //          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                               //          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                 //          .endofpacket
		.in_data           (rsp_demux_src0_data),                                        //          .data
		.in_channel        (rsp_demux_src0_channel),                                     //          .channel
		.out_ready         (mux_pipeline_006_source0_ready),                             //   source0.ready
		.out_valid         (mux_pipeline_006_source0_valid),                             //          .valid
		.out_startofpacket (mux_pipeline_006_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (mux_pipeline_006_source0_endofpacket),                       //          .endofpacket
		.out_data          (mux_pipeline_006_source0_data),                              //          .data
		.out_channel       (mux_pipeline_006_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_007 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                                   //     sink0.ready
		.in_valid          (rsp_demux_002_src0_valid),                                   //          .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                           //          .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                             //          .endofpacket
		.in_data           (rsp_demux_002_src0_data),                                    //          .data
		.in_channel        (rsp_demux_002_src0_channel),                                 //          .channel
		.out_ready         (mux_pipeline_007_source0_ready),                             //   source0.ready
		.out_valid         (mux_pipeline_007_source0_valid),                             //          .valid
		.out_startofpacket (mux_pipeline_007_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (mux_pipeline_007_source0_endofpacket),                       //          .endofpacket
		.out_data          (mux_pipeline_007_source0_data),                              //          .data
		.out_channel       (mux_pipeline_007_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_008 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                                   //     sink0.ready
		.in_valid          (rsp_demux_004_src0_valid),                                   //          .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                           //          .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                             //          .endofpacket
		.in_data           (rsp_demux_004_src0_data),                                    //          .data
		.in_channel        (rsp_demux_004_src0_channel),                                 //          .channel
		.out_ready         (mux_pipeline_008_source0_ready),                             //   source0.ready
		.out_valid         (mux_pipeline_008_source0_valid),                             //          .valid
		.out_startofpacket (mux_pipeline_008_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (mux_pipeline_008_source0_endofpacket),                       //          .endofpacket
		.out_data          (mux_pipeline_008_source0_data),                              //          .data
		.out_channel       (mux_pipeline_008_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_009 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                   //     sink0.ready
		.in_valid          (rsp_demux_001_src0_valid),                                   //          .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                           //          .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                             //          .endofpacket
		.in_data           (rsp_demux_001_src0_data),                                    //          .data
		.in_channel        (rsp_demux_001_src0_channel),                                 //          .channel
		.out_ready         (mux_pipeline_009_source0_ready),                             //   source0.ready
		.out_valid         (mux_pipeline_009_source0_valid),                             //          .valid
		.out_startofpacket (mux_pipeline_009_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (mux_pipeline_009_source0_endofpacket),                       //          .endofpacket
		.out_data          (mux_pipeline_009_source0_data),                              //          .data
		.out_channel       (mux_pipeline_009_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_010 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                                   //     sink0.ready
		.in_valid          (rsp_demux_003_src0_valid),                                   //          .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                           //          .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                             //          .endofpacket
		.in_data           (rsp_demux_003_src0_data),                                    //          .data
		.in_channel        (rsp_demux_003_src0_channel),                                 //          .channel
		.out_ready         (mux_pipeline_010_source0_ready),                             //   source0.ready
		.out_valid         (mux_pipeline_010_source0_valid),                             //          .valid
		.out_startofpacket (mux_pipeline_010_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (mux_pipeline_010_source0_endofpacket),                       //          .endofpacket
		.out_data          (mux_pipeline_010_source0_data),                              //          .data
		.out_channel       (mux_pipeline_010_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_011 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                                   //     sink0.ready
		.in_valid          (rsp_demux_005_src0_valid),                                   //          .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),                           //          .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                             //          .endofpacket
		.in_data           (rsp_demux_005_src0_data),                                    //          .data
		.in_channel        (rsp_demux_005_src0_channel),                                 //          .channel
		.out_ready         (mux_pipeline_011_source0_ready),                             //   source0.ready
		.out_valid         (mux_pipeline_011_source0_valid),                             //          .valid
		.out_startofpacket (mux_pipeline_011_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (mux_pipeline_011_source0_endofpacket),                       //          .endofpacket
		.out_data          (mux_pipeline_011_source0_data),                              //          .data
		.out_channel       (mux_pipeline_011_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

endmodule
