// ghrd_10as066n2_altera_mm_interconnect_161_2t26f5q.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 203

`timescale 1 ps / 1 ps
module ghrd_10as066n2_altera_mm_interconnect_161_2t26f5q (
		input  wire [3:0]  arria10_hps_h2f_lw_axi_master_awid,                         //                        arria10_hps_h2f_lw_axi_master.awid
		input  wire [20:0] arria10_hps_h2f_lw_axi_master_awaddr,                       //                                                     .awaddr
		input  wire [3:0]  arria10_hps_h2f_lw_axi_master_awlen,                        //                                                     .awlen
		input  wire [2:0]  arria10_hps_h2f_lw_axi_master_awsize,                       //                                                     .awsize
		input  wire [1:0]  arria10_hps_h2f_lw_axi_master_awburst,                      //                                                     .awburst
		input  wire [1:0]  arria10_hps_h2f_lw_axi_master_awlock,                       //                                                     .awlock
		input  wire [3:0]  arria10_hps_h2f_lw_axi_master_awcache,                      //                                                     .awcache
		input  wire [2:0]  arria10_hps_h2f_lw_axi_master_awprot,                       //                                                     .awprot
		input  wire [4:0]  arria10_hps_h2f_lw_axi_master_awuser,                       //                                                     .awuser
		input  wire        arria10_hps_h2f_lw_axi_master_awvalid,                      //                                                     .awvalid
		output wire        arria10_hps_h2f_lw_axi_master_awready,                      //                                                     .awready
		input  wire [3:0]  arria10_hps_h2f_lw_axi_master_wid,                          //                                                     .wid
		input  wire [31:0] arria10_hps_h2f_lw_axi_master_wdata,                        //                                                     .wdata
		input  wire [3:0]  arria10_hps_h2f_lw_axi_master_wstrb,                        //                                                     .wstrb
		input  wire        arria10_hps_h2f_lw_axi_master_wlast,                        //                                                     .wlast
		input  wire        arria10_hps_h2f_lw_axi_master_wvalid,                       //                                                     .wvalid
		output wire        arria10_hps_h2f_lw_axi_master_wready,                       //                                                     .wready
		output wire [3:0]  arria10_hps_h2f_lw_axi_master_bid,                          //                                                     .bid
		output wire [1:0]  arria10_hps_h2f_lw_axi_master_bresp,                        //                                                     .bresp
		output wire        arria10_hps_h2f_lw_axi_master_bvalid,                       //                                                     .bvalid
		input  wire        arria10_hps_h2f_lw_axi_master_bready,                       //                                                     .bready
		input  wire [3:0]  arria10_hps_h2f_lw_axi_master_arid,                         //                                                     .arid
		input  wire [20:0] arria10_hps_h2f_lw_axi_master_araddr,                       //                                                     .araddr
		input  wire [3:0]  arria10_hps_h2f_lw_axi_master_arlen,                        //                                                     .arlen
		input  wire [2:0]  arria10_hps_h2f_lw_axi_master_arsize,                       //                                                     .arsize
		input  wire [1:0]  arria10_hps_h2f_lw_axi_master_arburst,                      //                                                     .arburst
		input  wire [1:0]  arria10_hps_h2f_lw_axi_master_arlock,                       //                                                     .arlock
		input  wire [3:0]  arria10_hps_h2f_lw_axi_master_arcache,                      //                                                     .arcache
		input  wire [2:0]  arria10_hps_h2f_lw_axi_master_arprot,                       //                                                     .arprot
		input  wire [4:0]  arria10_hps_h2f_lw_axi_master_aruser,                       //                                                     .aruser
		input  wire        arria10_hps_h2f_lw_axi_master_arvalid,                      //                                                     .arvalid
		output wire        arria10_hps_h2f_lw_axi_master_arready,                      //                                                     .arready
		output wire [3:0]  arria10_hps_h2f_lw_axi_master_rid,                          //                                                     .rid
		output wire [31:0] arria10_hps_h2f_lw_axi_master_rdata,                        //                                                     .rdata
		output wire [1:0]  arria10_hps_h2f_lw_axi_master_rresp,                        //                                                     .rresp
		output wire        arria10_hps_h2f_lw_axi_master_rlast,                        //                                                     .rlast
		output wire        arria10_hps_h2f_lw_axi_master_rvalid,                       //                                                     .rvalid
		input  wire        arria10_hps_h2f_lw_axi_master_rready,                       //                                                     .rready
		output wire [11:0] sys_cpu_interconnect_s0_awid,                               //                              sys_cpu_interconnect_s0.awid
		output wire [19:0] sys_cpu_interconnect_s0_awaddr,                             //                                                     .awaddr
		output wire [3:0]  sys_cpu_interconnect_s0_awlen,                              //                                                     .awlen
		output wire [2:0]  sys_cpu_interconnect_s0_awsize,                             //                                                     .awsize
		output wire [1:0]  sys_cpu_interconnect_s0_awburst,                            //                                                     .awburst
		output wire [1:0]  sys_cpu_interconnect_s0_awlock,                             //                                                     .awlock
		output wire [3:0]  sys_cpu_interconnect_s0_awcache,                            //                                                     .awcache
		output wire [2:0]  sys_cpu_interconnect_s0_awprot,                             //                                                     .awprot
		output wire        sys_cpu_interconnect_s0_awvalid,                            //                                                     .awvalid
		input  wire        sys_cpu_interconnect_s0_awready,                            //                                                     .awready
		output wire [11:0] sys_cpu_interconnect_s0_wid,                                //                                                     .wid
		output wire [31:0] sys_cpu_interconnect_s0_wdata,                              //                                                     .wdata
		output wire [3:0]  sys_cpu_interconnect_s0_wstrb,                              //                                                     .wstrb
		output wire        sys_cpu_interconnect_s0_wlast,                              //                                                     .wlast
		output wire        sys_cpu_interconnect_s0_wvalid,                             //                                                     .wvalid
		input  wire        sys_cpu_interconnect_s0_wready,                             //                                                     .wready
		input  wire [11:0] sys_cpu_interconnect_s0_bid,                                //                                                     .bid
		input  wire [1:0]  sys_cpu_interconnect_s0_bresp,                              //                                                     .bresp
		input  wire        sys_cpu_interconnect_s0_bvalid,                             //                                                     .bvalid
		output wire        sys_cpu_interconnect_s0_bready,                             //                                                     .bready
		output wire [11:0] sys_cpu_interconnect_s0_arid,                               //                                                     .arid
		output wire [19:0] sys_cpu_interconnect_s0_araddr,                             //                                                     .araddr
		output wire [3:0]  sys_cpu_interconnect_s0_arlen,                              //                                                     .arlen
		output wire [2:0]  sys_cpu_interconnect_s0_arsize,                             //                                                     .arsize
		output wire [1:0]  sys_cpu_interconnect_s0_arburst,                            //                                                     .arburst
		output wire [1:0]  sys_cpu_interconnect_s0_arlock,                             //                                                     .arlock
		output wire [3:0]  sys_cpu_interconnect_s0_arcache,                            //                                                     .arcache
		output wire [2:0]  sys_cpu_interconnect_s0_arprot,                             //                                                     .arprot
		output wire        sys_cpu_interconnect_s0_arvalid,                            //                                                     .arvalid
		input  wire        sys_cpu_interconnect_s0_arready,                            //                                                     .arready
		input  wire [11:0] sys_cpu_interconnect_s0_rid,                                //                                                     .rid
		input  wire [31:0] sys_cpu_interconnect_s0_rdata,                              //                                                     .rdata
		input  wire [1:0]  sys_cpu_interconnect_s0_rresp,                              //                                                     .rresp
		input  wire        sys_cpu_interconnect_s0_rlast,                              //                                                     .rlast
		input  wire        sys_cpu_interconnect_s0_rvalid,                             //                                                     .rvalid
		output wire        sys_cpu_interconnect_s0_rready,                             //                                                     .rready
		input  wire        clk_0_clk_clk,                                              //                                            clk_0_clk.clk
		input  wire        arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset,   //   arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset.reset
		input  wire        fmcomms2_sys_rst_reset_bridge_in_reset_reset,               //               fmcomms2_sys_rst_reset_bridge_in_reset.reset
		input  wire        fpga_m_clk_reset_reset_bridge_in_reset_reset,               //               fpga_m_clk_reset_reset_bridge_in_reset.reset
		input  wire        sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset, // sys_cpu_interconnect_clk_reset_reset_bridge_in_reset.reset
		input  wire [31:0] fpga_m_master_address,                                      //                                        fpga_m_master.address
		output wire        fpga_m_master_waitrequest,                                  //                                                     .waitrequest
		input  wire [3:0]  fpga_m_master_byteenable,                                   //                                                     .byteenable
		input  wire        fpga_m_master_read,                                         //                                                     .read
		output wire [31:0] fpga_m_master_readdata,                                     //                                                     .readdata
		output wire        fpga_m_master_readdatavalid,                                //                                                     .readdatavalid
		input  wire        fpga_m_master_write,                                        //                                                     .write
		input  wire [31:0] fpga_m_master_writedata,                                    //                                                     .writedata
		output wire [1:0]  fmcomms2_gpio_s1_address,                                   //                                     fmcomms2_gpio_s1.address
		output wire        fmcomms2_gpio_s1_write,                                     //                                                     .write
		input  wire [31:0] fmcomms2_gpio_s1_readdata,                                  //                                                     .readdata
		output wire [31:0] fmcomms2_gpio_s1_writedata,                                 //                                                     .writedata
		output wire        fmcomms2_gpio_s1_chipselect,                                //                                                     .chipselect
		output wire [2:0]  fmcomms2_spi_ad9361_spi_control_port_address,               //                 fmcomms2_spi_ad9361_spi_control_port.address
		output wire        fmcomms2_spi_ad9361_spi_control_port_write,                 //                                                     .write
		output wire        fmcomms2_spi_ad9361_spi_control_port_read,                  //                                                     .read
		input  wire [15:0] fmcomms2_spi_ad9361_spi_control_port_readdata,              //                                                     .readdata
		output wire [15:0] fmcomms2_spi_ad9361_spi_control_port_writedata,             //                                                     .writedata
		output wire        fmcomms2_spi_ad9361_spi_control_port_chipselect,            //                                                     .chipselect
		output wire [8:0]  pb_lwh2f_s0_address,                                        //                                          pb_lwh2f_s0.address
		output wire        pb_lwh2f_s0_write,                                          //                                                     .write
		output wire        pb_lwh2f_s0_read,                                           //                                                     .read
		input  wire [31:0] pb_lwh2f_s0_readdata,                                       //                                                     .readdata
		output wire [31:0] pb_lwh2f_s0_writedata,                                      //                                                     .writedata
		output wire [0:0]  pb_lwh2f_s0_burstcount,                                     //                                                     .burstcount
		output wire [3:0]  pb_lwh2f_s0_byteenable,                                     //                                                     .byteenable
		input  wire        pb_lwh2f_s0_readdatavalid,                                  //                                                     .readdatavalid
		input  wire        pb_lwh2f_s0_waitrequest,                                    //                                                     .waitrequest
		output wire        pb_lwh2f_s0_debugaccess                                     //                                                     .debugaccess
	);

	wire          fpga_m_master_translator_avalon_universal_master_0_waitrequest;           // fpga_m_master_agent:av_waitrequest -> fpga_m_master_translator:uav_waitrequest
	wire   [31:0] fpga_m_master_translator_avalon_universal_master_0_readdata;              // fpga_m_master_agent:av_readdata -> fpga_m_master_translator:uav_readdata
	wire          fpga_m_master_translator_avalon_universal_master_0_debugaccess;           // fpga_m_master_translator:uav_debugaccess -> fpga_m_master_agent:av_debugaccess
	wire   [31:0] fpga_m_master_translator_avalon_universal_master_0_address;               // fpga_m_master_translator:uav_address -> fpga_m_master_agent:av_address
	wire          fpga_m_master_translator_avalon_universal_master_0_read;                  // fpga_m_master_translator:uav_read -> fpga_m_master_agent:av_read
	wire    [3:0] fpga_m_master_translator_avalon_universal_master_0_byteenable;            // fpga_m_master_translator:uav_byteenable -> fpga_m_master_agent:av_byteenable
	wire          fpga_m_master_translator_avalon_universal_master_0_readdatavalid;         // fpga_m_master_agent:av_readdatavalid -> fpga_m_master_translator:uav_readdatavalid
	wire          fpga_m_master_translator_avalon_universal_master_0_lock;                  // fpga_m_master_translator:uav_lock -> fpga_m_master_agent:av_lock
	wire          fpga_m_master_translator_avalon_universal_master_0_write;                 // fpga_m_master_translator:uav_write -> fpga_m_master_agent:av_write
	wire   [31:0] fpga_m_master_translator_avalon_universal_master_0_writedata;             // fpga_m_master_translator:uav_writedata -> fpga_m_master_agent:av_writedata
	wire    [2:0] fpga_m_master_translator_avalon_universal_master_0_burstcount;            // fpga_m_master_translator:uav_burstcount -> fpga_m_master_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                    // rsp_mux_002:src_valid -> fpga_m_master_agent:rp_valid
	wire  [120:0] rsp_mux_002_src_data;                                                     // rsp_mux_002:src_data -> fpga_m_master_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                    // fpga_m_master_agent:rp_ready -> rsp_mux_002:src_ready
	wire    [4:0] rsp_mux_002_src_channel;                                                  // rsp_mux_002:src_channel -> fpga_m_master_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                            // rsp_mux_002:src_startofpacket -> fpga_m_master_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                              // rsp_mux_002:src_endofpacket -> fpga_m_master_agent:rp_endofpacket
	wire   [31:0] fmcomms2_gpio_s1_agent_m0_readdata;                                       // fmcomms2_gpio_s1_translator:uav_readdata -> fmcomms2_gpio_s1_agent:m0_readdata
	wire          fmcomms2_gpio_s1_agent_m0_waitrequest;                                    // fmcomms2_gpio_s1_translator:uav_waitrequest -> fmcomms2_gpio_s1_agent:m0_waitrequest
	wire          fmcomms2_gpio_s1_agent_m0_debugaccess;                                    // fmcomms2_gpio_s1_agent:m0_debugaccess -> fmcomms2_gpio_s1_translator:uav_debugaccess
	wire   [31:0] fmcomms2_gpio_s1_agent_m0_address;                                        // fmcomms2_gpio_s1_agent:m0_address -> fmcomms2_gpio_s1_translator:uav_address
	wire    [3:0] fmcomms2_gpio_s1_agent_m0_byteenable;                                     // fmcomms2_gpio_s1_agent:m0_byteenable -> fmcomms2_gpio_s1_translator:uav_byteenable
	wire          fmcomms2_gpio_s1_agent_m0_read;                                           // fmcomms2_gpio_s1_agent:m0_read -> fmcomms2_gpio_s1_translator:uav_read
	wire          fmcomms2_gpio_s1_agent_m0_readdatavalid;                                  // fmcomms2_gpio_s1_translator:uav_readdatavalid -> fmcomms2_gpio_s1_agent:m0_readdatavalid
	wire          fmcomms2_gpio_s1_agent_m0_lock;                                           // fmcomms2_gpio_s1_agent:m0_lock -> fmcomms2_gpio_s1_translator:uav_lock
	wire   [31:0] fmcomms2_gpio_s1_agent_m0_writedata;                                      // fmcomms2_gpio_s1_agent:m0_writedata -> fmcomms2_gpio_s1_translator:uav_writedata
	wire          fmcomms2_gpio_s1_agent_m0_write;                                          // fmcomms2_gpio_s1_agent:m0_write -> fmcomms2_gpio_s1_translator:uav_write
	wire    [2:0] fmcomms2_gpio_s1_agent_m0_burstcount;                                     // fmcomms2_gpio_s1_agent:m0_burstcount -> fmcomms2_gpio_s1_translator:uav_burstcount
	wire          fmcomms2_gpio_s1_agent_rf_source_valid;                                   // fmcomms2_gpio_s1_agent:rf_source_valid -> fmcomms2_gpio_s1_agent_rsp_fifo:in_valid
	wire  [121:0] fmcomms2_gpio_s1_agent_rf_source_data;                                    // fmcomms2_gpio_s1_agent:rf_source_data -> fmcomms2_gpio_s1_agent_rsp_fifo:in_data
	wire          fmcomms2_gpio_s1_agent_rf_source_ready;                                   // fmcomms2_gpio_s1_agent_rsp_fifo:in_ready -> fmcomms2_gpio_s1_agent:rf_source_ready
	wire          fmcomms2_gpio_s1_agent_rf_source_startofpacket;                           // fmcomms2_gpio_s1_agent:rf_source_startofpacket -> fmcomms2_gpio_s1_agent_rsp_fifo:in_startofpacket
	wire          fmcomms2_gpio_s1_agent_rf_source_endofpacket;                             // fmcomms2_gpio_s1_agent:rf_source_endofpacket -> fmcomms2_gpio_s1_agent_rsp_fifo:in_endofpacket
	wire          fmcomms2_gpio_s1_agent_rsp_fifo_out_valid;                                // fmcomms2_gpio_s1_agent_rsp_fifo:out_valid -> fmcomms2_gpio_s1_agent:rf_sink_valid
	wire  [121:0] fmcomms2_gpio_s1_agent_rsp_fifo_out_data;                                 // fmcomms2_gpio_s1_agent_rsp_fifo:out_data -> fmcomms2_gpio_s1_agent:rf_sink_data
	wire          fmcomms2_gpio_s1_agent_rsp_fifo_out_ready;                                // fmcomms2_gpio_s1_agent:rf_sink_ready -> fmcomms2_gpio_s1_agent_rsp_fifo:out_ready
	wire          fmcomms2_gpio_s1_agent_rsp_fifo_out_startofpacket;                        // fmcomms2_gpio_s1_agent_rsp_fifo:out_startofpacket -> fmcomms2_gpio_s1_agent:rf_sink_startofpacket
	wire          fmcomms2_gpio_s1_agent_rsp_fifo_out_endofpacket;                          // fmcomms2_gpio_s1_agent_rsp_fifo:out_endofpacket -> fmcomms2_gpio_s1_agent:rf_sink_endofpacket
	wire          fmcomms2_gpio_s1_agent_rdata_fifo_src_valid;                              // fmcomms2_gpio_s1_agent:rdata_fifo_src_valid -> fmcomms2_gpio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] fmcomms2_gpio_s1_agent_rdata_fifo_src_data;                               // fmcomms2_gpio_s1_agent:rdata_fifo_src_data -> fmcomms2_gpio_s1_agent_rdata_fifo:in_data
	wire          fmcomms2_gpio_s1_agent_rdata_fifo_src_ready;                              // fmcomms2_gpio_s1_agent_rdata_fifo:in_ready -> fmcomms2_gpio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pb_lwh2f_s0_agent_m0_readdata;                                            // pb_lwh2f_s0_translator:uav_readdata -> pb_lwh2f_s0_agent:m0_readdata
	wire          pb_lwh2f_s0_agent_m0_waitrequest;                                         // pb_lwh2f_s0_translator:uav_waitrequest -> pb_lwh2f_s0_agent:m0_waitrequest
	wire          pb_lwh2f_s0_agent_m0_debugaccess;                                         // pb_lwh2f_s0_agent:m0_debugaccess -> pb_lwh2f_s0_translator:uav_debugaccess
	wire   [31:0] pb_lwh2f_s0_agent_m0_address;                                             // pb_lwh2f_s0_agent:m0_address -> pb_lwh2f_s0_translator:uav_address
	wire    [3:0] pb_lwh2f_s0_agent_m0_byteenable;                                          // pb_lwh2f_s0_agent:m0_byteenable -> pb_lwh2f_s0_translator:uav_byteenable
	wire          pb_lwh2f_s0_agent_m0_read;                                                // pb_lwh2f_s0_agent:m0_read -> pb_lwh2f_s0_translator:uav_read
	wire          pb_lwh2f_s0_agent_m0_readdatavalid;                                       // pb_lwh2f_s0_translator:uav_readdatavalid -> pb_lwh2f_s0_agent:m0_readdatavalid
	wire          pb_lwh2f_s0_agent_m0_lock;                                                // pb_lwh2f_s0_agent:m0_lock -> pb_lwh2f_s0_translator:uav_lock
	wire   [31:0] pb_lwh2f_s0_agent_m0_writedata;                                           // pb_lwh2f_s0_agent:m0_writedata -> pb_lwh2f_s0_translator:uav_writedata
	wire          pb_lwh2f_s0_agent_m0_write;                                               // pb_lwh2f_s0_agent:m0_write -> pb_lwh2f_s0_translator:uav_write
	wire    [2:0] pb_lwh2f_s0_agent_m0_burstcount;                                          // pb_lwh2f_s0_agent:m0_burstcount -> pb_lwh2f_s0_translator:uav_burstcount
	wire          pb_lwh2f_s0_agent_rf_source_valid;                                        // pb_lwh2f_s0_agent:rf_source_valid -> pb_lwh2f_s0_agent_rsp_fifo:in_valid
	wire  [121:0] pb_lwh2f_s0_agent_rf_source_data;                                         // pb_lwh2f_s0_agent:rf_source_data -> pb_lwh2f_s0_agent_rsp_fifo:in_data
	wire          pb_lwh2f_s0_agent_rf_source_ready;                                        // pb_lwh2f_s0_agent_rsp_fifo:in_ready -> pb_lwh2f_s0_agent:rf_source_ready
	wire          pb_lwh2f_s0_agent_rf_source_startofpacket;                                // pb_lwh2f_s0_agent:rf_source_startofpacket -> pb_lwh2f_s0_agent_rsp_fifo:in_startofpacket
	wire          pb_lwh2f_s0_agent_rf_source_endofpacket;                                  // pb_lwh2f_s0_agent:rf_source_endofpacket -> pb_lwh2f_s0_agent_rsp_fifo:in_endofpacket
	wire          pb_lwh2f_s0_agent_rsp_fifo_out_valid;                                     // pb_lwh2f_s0_agent_rsp_fifo:out_valid -> pb_lwh2f_s0_agent:rf_sink_valid
	wire  [121:0] pb_lwh2f_s0_agent_rsp_fifo_out_data;                                      // pb_lwh2f_s0_agent_rsp_fifo:out_data -> pb_lwh2f_s0_agent:rf_sink_data
	wire          pb_lwh2f_s0_agent_rsp_fifo_out_ready;                                     // pb_lwh2f_s0_agent:rf_sink_ready -> pb_lwh2f_s0_agent_rsp_fifo:out_ready
	wire          pb_lwh2f_s0_agent_rsp_fifo_out_startofpacket;                             // pb_lwh2f_s0_agent_rsp_fifo:out_startofpacket -> pb_lwh2f_s0_agent:rf_sink_startofpacket
	wire          pb_lwh2f_s0_agent_rsp_fifo_out_endofpacket;                               // pb_lwh2f_s0_agent_rsp_fifo:out_endofpacket -> pb_lwh2f_s0_agent:rf_sink_endofpacket
	wire          pb_lwh2f_s0_agent_rdata_fifo_src_valid;                                   // pb_lwh2f_s0_agent:rdata_fifo_src_valid -> pb_lwh2f_s0_agent_rdata_fifo:in_valid
	wire   [33:0] pb_lwh2f_s0_agent_rdata_fifo_src_data;                                    // pb_lwh2f_s0_agent:rdata_fifo_src_data -> pb_lwh2f_s0_agent_rdata_fifo:in_data
	wire          pb_lwh2f_s0_agent_rdata_fifo_src_ready;                                   // pb_lwh2f_s0_agent_rdata_fifo:in_ready -> pb_lwh2f_s0_agent:rdata_fifo_src_ready
	wire   [31:0] fmcomms2_spi_ad9361_spi_control_port_agent_m0_readdata;                   // fmcomms2_spi_ad9361_spi_control_port_translator:uav_readdata -> fmcomms2_spi_ad9361_spi_control_port_agent:m0_readdata
	wire          fmcomms2_spi_ad9361_spi_control_port_agent_m0_waitrequest;                // fmcomms2_spi_ad9361_spi_control_port_translator:uav_waitrequest -> fmcomms2_spi_ad9361_spi_control_port_agent:m0_waitrequest
	wire          fmcomms2_spi_ad9361_spi_control_port_agent_m0_debugaccess;                // fmcomms2_spi_ad9361_spi_control_port_agent:m0_debugaccess -> fmcomms2_spi_ad9361_spi_control_port_translator:uav_debugaccess
	wire   [31:0] fmcomms2_spi_ad9361_spi_control_port_agent_m0_address;                    // fmcomms2_spi_ad9361_spi_control_port_agent:m0_address -> fmcomms2_spi_ad9361_spi_control_port_translator:uav_address
	wire    [3:0] fmcomms2_spi_ad9361_spi_control_port_agent_m0_byteenable;                 // fmcomms2_spi_ad9361_spi_control_port_agent:m0_byteenable -> fmcomms2_spi_ad9361_spi_control_port_translator:uav_byteenable
	wire          fmcomms2_spi_ad9361_spi_control_port_agent_m0_read;                       // fmcomms2_spi_ad9361_spi_control_port_agent:m0_read -> fmcomms2_spi_ad9361_spi_control_port_translator:uav_read
	wire          fmcomms2_spi_ad9361_spi_control_port_agent_m0_readdatavalid;              // fmcomms2_spi_ad9361_spi_control_port_translator:uav_readdatavalid -> fmcomms2_spi_ad9361_spi_control_port_agent:m0_readdatavalid
	wire          fmcomms2_spi_ad9361_spi_control_port_agent_m0_lock;                       // fmcomms2_spi_ad9361_spi_control_port_agent:m0_lock -> fmcomms2_spi_ad9361_spi_control_port_translator:uav_lock
	wire   [31:0] fmcomms2_spi_ad9361_spi_control_port_agent_m0_writedata;                  // fmcomms2_spi_ad9361_spi_control_port_agent:m0_writedata -> fmcomms2_spi_ad9361_spi_control_port_translator:uav_writedata
	wire          fmcomms2_spi_ad9361_spi_control_port_agent_m0_write;                      // fmcomms2_spi_ad9361_spi_control_port_agent:m0_write -> fmcomms2_spi_ad9361_spi_control_port_translator:uav_write
	wire    [2:0] fmcomms2_spi_ad9361_spi_control_port_agent_m0_burstcount;                 // fmcomms2_spi_ad9361_spi_control_port_agent:m0_burstcount -> fmcomms2_spi_ad9361_spi_control_port_translator:uav_burstcount
	wire          fmcomms2_spi_ad9361_spi_control_port_agent_rf_source_valid;               // fmcomms2_spi_ad9361_spi_control_port_agent:rf_source_valid -> fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo:in_valid
	wire  [121:0] fmcomms2_spi_ad9361_spi_control_port_agent_rf_source_data;                // fmcomms2_spi_ad9361_spi_control_port_agent:rf_source_data -> fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo:in_data
	wire          fmcomms2_spi_ad9361_spi_control_port_agent_rf_source_ready;               // fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo:in_ready -> fmcomms2_spi_ad9361_spi_control_port_agent:rf_source_ready
	wire          fmcomms2_spi_ad9361_spi_control_port_agent_rf_source_startofpacket;       // fmcomms2_spi_ad9361_spi_control_port_agent:rf_source_startofpacket -> fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo:in_startofpacket
	wire          fmcomms2_spi_ad9361_spi_control_port_agent_rf_source_endofpacket;         // fmcomms2_spi_ad9361_spi_control_port_agent:rf_source_endofpacket -> fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo:in_endofpacket
	wire          fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo_out_valid;            // fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo:out_valid -> fmcomms2_spi_ad9361_spi_control_port_agent:rf_sink_valid
	wire  [121:0] fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo_out_data;             // fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo:out_data -> fmcomms2_spi_ad9361_spi_control_port_agent:rf_sink_data
	wire          fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo_out_ready;            // fmcomms2_spi_ad9361_spi_control_port_agent:rf_sink_ready -> fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo:out_ready
	wire          fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo_out_startofpacket;    // fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo:out_startofpacket -> fmcomms2_spi_ad9361_spi_control_port_agent:rf_sink_startofpacket
	wire          fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo_out_endofpacket;      // fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo:out_endofpacket -> fmcomms2_spi_ad9361_spi_control_port_agent:rf_sink_endofpacket
	wire          fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo_src_valid;          // fmcomms2_spi_ad9361_spi_control_port_agent:rdata_fifo_src_valid -> fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo:in_valid
	wire   [33:0] fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo_src_data;           // fmcomms2_spi_ad9361_spi_control_port_agent:rdata_fifo_src_data -> fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo:in_data
	wire          fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo_src_ready;          // fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo:in_ready -> fmcomms2_spi_ad9361_spi_control_port_agent:rdata_fifo_src_ready
	wire          arria10_hps_h2f_lw_axi_master_agent_write_cp_valid;                       // arria10_hps_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [120:0] arria10_hps_h2f_lw_axi_master_agent_write_cp_data;                        // arria10_hps_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          arria10_hps_h2f_lw_axi_master_agent_write_cp_ready;                       // router:sink_ready -> arria10_hps_h2f_lw_axi_master_agent:write_cp_ready
	wire          arria10_hps_h2f_lw_axi_master_agent_write_cp_startofpacket;               // arria10_hps_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          arria10_hps_h2f_lw_axi_master_agent_write_cp_endofpacket;                 // arria10_hps_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          arria10_hps_h2f_lw_axi_master_agent_read_cp_valid;                        // arria10_hps_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [120:0] arria10_hps_h2f_lw_axi_master_agent_read_cp_data;                         // arria10_hps_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          arria10_hps_h2f_lw_axi_master_agent_read_cp_ready;                        // router_001:sink_ready -> arria10_hps_h2f_lw_axi_master_agent:read_cp_ready
	wire          arria10_hps_h2f_lw_axi_master_agent_read_cp_startofpacket;                // arria10_hps_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          arria10_hps_h2f_lw_axi_master_agent_read_cp_endofpacket;                  // arria10_hps_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          fpga_m_master_agent_cp_valid;                                             // fpga_m_master_agent:cp_valid -> router_002:sink_valid
	wire  [120:0] fpga_m_master_agent_cp_data;                                              // fpga_m_master_agent:cp_data -> router_002:sink_data
	wire          fpga_m_master_agent_cp_ready;                                             // router_002:sink_ready -> fpga_m_master_agent:cp_ready
	wire          fpga_m_master_agent_cp_startofpacket;                                     // fpga_m_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          fpga_m_master_agent_cp_endofpacket;                                       // fpga_m_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                     // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [120:0] router_002_src_data;                                                      // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                     // cmd_demux_002:sink_ready -> router_002:src_ready
	wire    [4:0] router_002_src_channel;                                                   // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                             // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                               // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          router_003_src_valid;                                                     // router_003:src_valid -> rsp_demux:sink_valid
	wire  [120:0] router_003_src_data;                                                      // router_003:src_data -> rsp_demux:sink_data
	wire          router_003_src_ready;                                                     // rsp_demux:sink_ready -> router_003:src_ready
	wire    [4:0] router_003_src_channel;                                                   // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_startofpacket;                                             // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_003_src_endofpacket;                                               // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_004_src_valid;                                                     // router_004:src_valid -> rsp_demux_001:sink_valid
	wire  [120:0] router_004_src_data;                                                      // router_004:src_data -> rsp_demux_001:sink_data
	wire          router_004_src_ready;                                                     // rsp_demux_001:sink_ready -> router_004:src_ready
	wire    [4:0] router_004_src_channel;                                                   // router_004:src_channel -> rsp_demux_001:sink_channel
	wire          router_004_src_startofpacket;                                             // router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_004_src_endofpacket;                                               // router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_005_src_valid;                                                     // router_005:src_valid -> rsp_demux_002:sink_valid
	wire  [120:0] router_005_src_data;                                                      // router_005:src_data -> rsp_demux_002:sink_data
	wire          router_005_src_ready;                                                     // rsp_demux_002:sink_ready -> router_005:src_ready
	wire    [4:0] router_005_src_channel;                                                   // router_005:src_channel -> rsp_demux_002:sink_channel
	wire          router_005_src_startofpacket;                                             // router_005:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_005_src_endofpacket;                                               // router_005:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_006_src_valid;                                                     // router_006:src_valid -> rsp_demux_003:sink_valid
	wire  [120:0] router_006_src_data;                                                      // router_006:src_data -> rsp_demux_003:sink_data
	wire          router_006_src_ready;                                                     // rsp_demux_003:sink_ready -> router_006:src_ready
	wire    [4:0] router_006_src_channel;                                                   // router_006:src_channel -> rsp_demux_003:sink_channel
	wire          router_006_src_startofpacket;                                             // router_006:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_006_src_endofpacket;                                               // router_006:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_007_src_valid;                                                     // router_007:src_valid -> rsp_demux_004:sink_valid
	wire  [120:0] router_007_src_data;                                                      // router_007:src_data -> rsp_demux_004:sink_data
	wire          router_007_src_ready;                                                     // rsp_demux_004:sink_ready -> router_007:src_ready
	wire    [4:0] router_007_src_channel;                                                   // router_007:src_channel -> rsp_demux_004:sink_channel
	wire          router_007_src_startofpacket;                                             // router_007:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_007_src_endofpacket;                                               // router_007:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_src_valid;                                                         // router:src_valid -> arria10_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [120:0] router_src_data;                                                          // router:src_data -> arria10_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                         // arria10_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire    [4:0] router_src_channel;                                                       // router:src_channel -> arria10_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                 // router:src_startofpacket -> arria10_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                   // router:src_endofpacket -> arria10_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire          arria10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                   // arria10_hps_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> arria10_hps_h2f_lw_axi_master_agent:write_rp_valid
	wire  [120:0] arria10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data;                    // arria10_hps_h2f_lw_axi_master_wr_limiter:rsp_src_data -> arria10_hps_h2f_lw_axi_master_agent:write_rp_data
	wire          arria10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                   // arria10_hps_h2f_lw_axi_master_agent:write_rp_ready -> arria10_hps_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire    [4:0] arria10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                 // arria10_hps_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> arria10_hps_h2f_lw_axi_master_agent:write_rp_channel
	wire          arria10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;           // arria10_hps_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> arria10_hps_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          arria10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;             // arria10_hps_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> arria10_hps_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                                     // router_001:src_valid -> arria10_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [120:0] router_001_src_data;                                                      // router_001:src_data -> arria10_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                     // arria10_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [4:0] router_001_src_channel;                                                   // router_001:src_channel -> arria10_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                             // router_001:src_startofpacket -> arria10_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                               // router_001:src_endofpacket -> arria10_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire          arria10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                   // arria10_hps_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> arria10_hps_h2f_lw_axi_master_agent:read_rp_valid
	wire  [120:0] arria10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data;                    // arria10_hps_h2f_lw_axi_master_rd_limiter:rsp_src_data -> arria10_hps_h2f_lw_axi_master_agent:read_rp_data
	wire          arria10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                   // arria10_hps_h2f_lw_axi_master_agent:read_rp_ready -> arria10_hps_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire    [4:0] arria10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                 // arria10_hps_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> arria10_hps_h2f_lw_axi_master_agent:read_rp_channel
	wire          arria10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;           // arria10_hps_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> arria10_hps_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          arria10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;             // arria10_hps_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> arria10_hps_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_002_src_valid;                                                    // cmd_mux_002:src_valid -> fmcomms2_gpio_s1_burst_adapter:sink0_valid
	wire  [120:0] cmd_mux_002_src_data;                                                     // cmd_mux_002:src_data -> fmcomms2_gpio_s1_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                    // fmcomms2_gpio_s1_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [4:0] cmd_mux_002_src_channel;                                                  // cmd_mux_002:src_channel -> fmcomms2_gpio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                            // cmd_mux_002:src_startofpacket -> fmcomms2_gpio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                              // cmd_mux_002:src_endofpacket -> fmcomms2_gpio_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                                    // cmd_mux_003:src_valid -> pb_lwh2f_s0_burst_adapter:sink0_valid
	wire  [120:0] cmd_mux_003_src_data;                                                     // cmd_mux_003:src_data -> pb_lwh2f_s0_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                    // pb_lwh2f_s0_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire    [4:0] cmd_mux_003_src_channel;                                                  // cmd_mux_003:src_channel -> pb_lwh2f_s0_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                            // cmd_mux_003:src_startofpacket -> pb_lwh2f_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                              // cmd_mux_003:src_endofpacket -> pb_lwh2f_s0_burst_adapter:sink0_endofpacket
	wire          cmd_mux_004_src_valid;                                                    // cmd_mux_004:src_valid -> fmcomms2_spi_ad9361_spi_control_port_burst_adapter:sink0_valid
	wire  [120:0] cmd_mux_004_src_data;                                                     // cmd_mux_004:src_data -> fmcomms2_spi_ad9361_spi_control_port_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                    // fmcomms2_spi_ad9361_spi_control_port_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire    [4:0] cmd_mux_004_src_channel;                                                  // cmd_mux_004:src_channel -> fmcomms2_spi_ad9361_spi_control_port_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                            // cmd_mux_004:src_startofpacket -> fmcomms2_spi_ad9361_spi_control_port_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                              // cmd_mux_004:src_endofpacket -> fmcomms2_spi_ad9361_spi_control_port_burst_adapter:sink0_endofpacket
	wire    [0:0] arria10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_valid;                   // arria10_hps_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [120:0] arria10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data;                    // arria10_hps_h2f_lw_axi_master_wr_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          arria10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                   // limiter_pipeline:in_ready -> arria10_hps_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire    [4:0] arria10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                 // arria10_hps_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          arria10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;           // arria10_hps_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          arria10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;             // arria10_hps_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                                           // limiter_pipeline:out_valid -> cmd_demux:sink_valid
	wire  [120:0] limiter_pipeline_source0_data;                                            // limiter_pipeline:out_data -> cmd_demux:sink_data
	wire          limiter_pipeline_source0_ready;                                           // cmd_demux:sink_ready -> limiter_pipeline:out_ready
	wire    [4:0] limiter_pipeline_source0_channel;                                         // limiter_pipeline:out_channel -> cmd_demux:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                                   // limiter_pipeline:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                                     // limiter_pipeline:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                        // rsp_mux:src_valid -> limiter_pipeline_001:in_valid
	wire  [120:0] rsp_mux_src_data;                                                         // rsp_mux:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_src_ready;                                                        // limiter_pipeline_001:in_ready -> rsp_mux:src_ready
	wire    [4:0] rsp_mux_src_channel;                                                      // rsp_mux:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_src_startofpacket;                                                // rsp_mux:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                                  // rsp_mux:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                                       // limiter_pipeline_001:out_valid -> arria10_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [120:0] limiter_pipeline_001_source0_data;                                        // limiter_pipeline_001:out_data -> arria10_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                                       // arria10_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire    [4:0] limiter_pipeline_001_source0_channel;                                     // limiter_pipeline_001:out_channel -> arria10_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                               // limiter_pipeline_001:out_startofpacket -> arria10_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                                 // limiter_pipeline_001:out_endofpacket -> arria10_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire    [0:0] arria10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_valid;                   // arria10_hps_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> limiter_pipeline_002:in_valid
	wire  [120:0] arria10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data;                    // arria10_hps_h2f_lw_axi_master_rd_limiter:cmd_src_data -> limiter_pipeline_002:in_data
	wire          arria10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                   // limiter_pipeline_002:in_ready -> arria10_hps_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire    [4:0] arria10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                 // arria10_hps_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> limiter_pipeline_002:in_channel
	wire          arria10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;           // arria10_hps_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> limiter_pipeline_002:in_startofpacket
	wire          arria10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;             // arria10_hps_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> limiter_pipeline_002:in_endofpacket
	wire          limiter_pipeline_002_source0_valid;                                       // limiter_pipeline_002:out_valid -> cmd_demux_001:sink_valid
	wire  [120:0] limiter_pipeline_002_source0_data;                                        // limiter_pipeline_002:out_data -> cmd_demux_001:sink_data
	wire          limiter_pipeline_002_source0_ready;                                       // cmd_demux_001:sink_ready -> limiter_pipeline_002:out_ready
	wire    [4:0] limiter_pipeline_002_source0_channel;                                     // limiter_pipeline_002:out_channel -> cmd_demux_001:sink_channel
	wire          limiter_pipeline_002_source0_startofpacket;                               // limiter_pipeline_002:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          limiter_pipeline_002_source0_endofpacket;                                 // limiter_pipeline_002:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                    // rsp_mux_001:src_valid -> limiter_pipeline_003:in_valid
	wire  [120:0] rsp_mux_001_src_data;                                                     // rsp_mux_001:src_data -> limiter_pipeline_003:in_data
	wire          rsp_mux_001_src_ready;                                                    // limiter_pipeline_003:in_ready -> rsp_mux_001:src_ready
	wire    [4:0] rsp_mux_001_src_channel;                                                  // rsp_mux_001:src_channel -> limiter_pipeline_003:in_channel
	wire          rsp_mux_001_src_startofpacket;                                            // rsp_mux_001:src_startofpacket -> limiter_pipeline_003:in_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                              // rsp_mux_001:src_endofpacket -> limiter_pipeline_003:in_endofpacket
	wire          limiter_pipeline_003_source0_valid;                                       // limiter_pipeline_003:out_valid -> arria10_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [120:0] limiter_pipeline_003_source0_data;                                        // limiter_pipeline_003:out_data -> arria10_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          limiter_pipeline_003_source0_ready;                                       // arria10_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> limiter_pipeline_003:out_ready
	wire    [4:0] limiter_pipeline_003_source0_channel;                                     // limiter_pipeline_003:out_channel -> arria10_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          limiter_pipeline_003_source0_startofpacket;                               // limiter_pipeline_003:out_startofpacket -> arria10_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_003_source0_endofpacket;                                 // limiter_pipeline_003:out_endofpacket -> arria10_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          cmd_mux_src_valid;                                                        // cmd_mux:src_valid -> agent_pipeline:in_valid
	wire  [120:0] cmd_mux_src_data;                                                         // cmd_mux:src_data -> agent_pipeline:in_data
	wire          cmd_mux_src_ready;                                                        // agent_pipeline:in_ready -> cmd_mux:src_ready
	wire    [4:0] cmd_mux_src_channel;                                                      // cmd_mux:src_channel -> agent_pipeline:in_channel
	wire          cmd_mux_src_startofpacket;                                                // cmd_mux:src_startofpacket -> agent_pipeline:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                  // cmd_mux:src_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                             // agent_pipeline:out_valid -> sys_cpu_interconnect_s0_agent:write_cp_valid
	wire  [120:0] agent_pipeline_source0_data;                                              // agent_pipeline:out_data -> sys_cpu_interconnect_s0_agent:write_cp_data
	wire          agent_pipeline_source0_ready;                                             // sys_cpu_interconnect_s0_agent:write_cp_ready -> agent_pipeline:out_ready
	wire    [4:0] agent_pipeline_source0_channel;                                           // agent_pipeline:out_channel -> sys_cpu_interconnect_s0_agent:write_cp_channel
	wire          agent_pipeline_source0_startofpacket;                                     // agent_pipeline:out_startofpacket -> sys_cpu_interconnect_s0_agent:write_cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                       // agent_pipeline:out_endofpacket -> sys_cpu_interconnect_s0_agent:write_cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                    // cmd_mux_001:src_valid -> agent_pipeline_001:in_valid
	wire  [120:0] cmd_mux_001_src_data;                                                     // cmd_mux_001:src_data -> agent_pipeline_001:in_data
	wire          cmd_mux_001_src_ready;                                                    // agent_pipeline_001:in_ready -> cmd_mux_001:src_ready
	wire    [4:0] cmd_mux_001_src_channel;                                                  // cmd_mux_001:src_channel -> agent_pipeline_001:in_channel
	wire          cmd_mux_001_src_startofpacket;                                            // cmd_mux_001:src_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                              // cmd_mux_001:src_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                         // agent_pipeline_001:out_valid -> sys_cpu_interconnect_s0_agent:read_cp_valid
	wire  [120:0] agent_pipeline_001_source0_data;                                          // agent_pipeline_001:out_data -> sys_cpu_interconnect_s0_agent:read_cp_data
	wire          agent_pipeline_001_source0_ready;                                         // sys_cpu_interconnect_s0_agent:read_cp_ready -> agent_pipeline_001:out_ready
	wire    [4:0] agent_pipeline_001_source0_channel;                                       // agent_pipeline_001:out_channel -> sys_cpu_interconnect_s0_agent:read_cp_channel
	wire          agent_pipeline_001_source0_startofpacket;                                 // agent_pipeline_001:out_startofpacket -> sys_cpu_interconnect_s0_agent:read_cp_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                                   // agent_pipeline_001:out_endofpacket -> sys_cpu_interconnect_s0_agent:read_cp_endofpacket
	wire          sys_cpu_interconnect_s0_agent_write_rp_valid;                             // sys_cpu_interconnect_s0_agent:write_rp_valid -> agent_pipeline_002:in_valid
	wire  [120:0] sys_cpu_interconnect_s0_agent_write_rp_data;                              // sys_cpu_interconnect_s0_agent:write_rp_data -> agent_pipeline_002:in_data
	wire          sys_cpu_interconnect_s0_agent_write_rp_ready;                             // agent_pipeline_002:in_ready -> sys_cpu_interconnect_s0_agent:write_rp_ready
	wire          sys_cpu_interconnect_s0_agent_write_rp_startofpacket;                     // sys_cpu_interconnect_s0_agent:write_rp_startofpacket -> agent_pipeline_002:in_startofpacket
	wire          sys_cpu_interconnect_s0_agent_write_rp_endofpacket;                       // sys_cpu_interconnect_s0_agent:write_rp_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          agent_pipeline_002_source0_valid;                                         // agent_pipeline_002:out_valid -> router_003:sink_valid
	wire  [120:0] agent_pipeline_002_source0_data;                                          // agent_pipeline_002:out_data -> router_003:sink_data
	wire          agent_pipeline_002_source0_ready;                                         // router_003:sink_ready -> agent_pipeline_002:out_ready
	wire          agent_pipeline_002_source0_startofpacket;                                 // agent_pipeline_002:out_startofpacket -> router_003:sink_startofpacket
	wire          agent_pipeline_002_source0_endofpacket;                                   // agent_pipeline_002:out_endofpacket -> router_003:sink_endofpacket
	wire          sys_cpu_interconnect_s0_agent_read_rp_valid;                              // sys_cpu_interconnect_s0_agent:read_rp_valid -> agent_pipeline_003:in_valid
	wire  [120:0] sys_cpu_interconnect_s0_agent_read_rp_data;                               // sys_cpu_interconnect_s0_agent:read_rp_data -> agent_pipeline_003:in_data
	wire          sys_cpu_interconnect_s0_agent_read_rp_ready;                              // agent_pipeline_003:in_ready -> sys_cpu_interconnect_s0_agent:read_rp_ready
	wire          sys_cpu_interconnect_s0_agent_read_rp_startofpacket;                      // sys_cpu_interconnect_s0_agent:read_rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire          sys_cpu_interconnect_s0_agent_read_rp_endofpacket;                        // sys_cpu_interconnect_s0_agent:read_rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          agent_pipeline_003_source0_valid;                                         // agent_pipeline_003:out_valid -> router_004:sink_valid
	wire  [120:0] agent_pipeline_003_source0_data;                                          // agent_pipeline_003:out_data -> router_004:sink_data
	wire          agent_pipeline_003_source0_ready;                                         // router_004:sink_ready -> agent_pipeline_003:out_ready
	wire          agent_pipeline_003_source0_startofpacket;                                 // agent_pipeline_003:out_startofpacket -> router_004:sink_startofpacket
	wire          agent_pipeline_003_source0_endofpacket;                                   // agent_pipeline_003:out_endofpacket -> router_004:sink_endofpacket
	wire          fmcomms2_gpio_s1_burst_adapter_source0_valid;                             // fmcomms2_gpio_s1_burst_adapter:source0_valid -> agent_pipeline_004:in_valid
	wire  [120:0] fmcomms2_gpio_s1_burst_adapter_source0_data;                              // fmcomms2_gpio_s1_burst_adapter:source0_data -> agent_pipeline_004:in_data
	wire          fmcomms2_gpio_s1_burst_adapter_source0_ready;                             // agent_pipeline_004:in_ready -> fmcomms2_gpio_s1_burst_adapter:source0_ready
	wire    [4:0] fmcomms2_gpio_s1_burst_adapter_source0_channel;                           // fmcomms2_gpio_s1_burst_adapter:source0_channel -> agent_pipeline_004:in_channel
	wire          fmcomms2_gpio_s1_burst_adapter_source0_startofpacket;                     // fmcomms2_gpio_s1_burst_adapter:source0_startofpacket -> agent_pipeline_004:in_startofpacket
	wire          fmcomms2_gpio_s1_burst_adapter_source0_endofpacket;                       // fmcomms2_gpio_s1_burst_adapter:source0_endofpacket -> agent_pipeline_004:in_endofpacket
	wire          agent_pipeline_004_source0_valid;                                         // agent_pipeline_004:out_valid -> fmcomms2_gpio_s1_agent:cp_valid
	wire  [120:0] agent_pipeline_004_source0_data;                                          // agent_pipeline_004:out_data -> fmcomms2_gpio_s1_agent:cp_data
	wire          agent_pipeline_004_source0_ready;                                         // fmcomms2_gpio_s1_agent:cp_ready -> agent_pipeline_004:out_ready
	wire    [4:0] agent_pipeline_004_source0_channel;                                       // agent_pipeline_004:out_channel -> fmcomms2_gpio_s1_agent:cp_channel
	wire          agent_pipeline_004_source0_startofpacket;                                 // agent_pipeline_004:out_startofpacket -> fmcomms2_gpio_s1_agent:cp_startofpacket
	wire          agent_pipeline_004_source0_endofpacket;                                   // agent_pipeline_004:out_endofpacket -> fmcomms2_gpio_s1_agent:cp_endofpacket
	wire          fmcomms2_gpio_s1_agent_rp_valid;                                          // fmcomms2_gpio_s1_agent:rp_valid -> agent_pipeline_005:in_valid
	wire  [120:0] fmcomms2_gpio_s1_agent_rp_data;                                           // fmcomms2_gpio_s1_agent:rp_data -> agent_pipeline_005:in_data
	wire          fmcomms2_gpio_s1_agent_rp_ready;                                          // agent_pipeline_005:in_ready -> fmcomms2_gpio_s1_agent:rp_ready
	wire          fmcomms2_gpio_s1_agent_rp_startofpacket;                                  // fmcomms2_gpio_s1_agent:rp_startofpacket -> agent_pipeline_005:in_startofpacket
	wire          fmcomms2_gpio_s1_agent_rp_endofpacket;                                    // fmcomms2_gpio_s1_agent:rp_endofpacket -> agent_pipeline_005:in_endofpacket
	wire          agent_pipeline_005_source0_valid;                                         // agent_pipeline_005:out_valid -> router_005:sink_valid
	wire  [120:0] agent_pipeline_005_source0_data;                                          // agent_pipeline_005:out_data -> router_005:sink_data
	wire          agent_pipeline_005_source0_ready;                                         // router_005:sink_ready -> agent_pipeline_005:out_ready
	wire          agent_pipeline_005_source0_startofpacket;                                 // agent_pipeline_005:out_startofpacket -> router_005:sink_startofpacket
	wire          agent_pipeline_005_source0_endofpacket;                                   // agent_pipeline_005:out_endofpacket -> router_005:sink_endofpacket
	wire          pb_lwh2f_s0_burst_adapter_source0_valid;                                  // pb_lwh2f_s0_burst_adapter:source0_valid -> agent_pipeline_006:in_valid
	wire  [120:0] pb_lwh2f_s0_burst_adapter_source0_data;                                   // pb_lwh2f_s0_burst_adapter:source0_data -> agent_pipeline_006:in_data
	wire          pb_lwh2f_s0_burst_adapter_source0_ready;                                  // agent_pipeline_006:in_ready -> pb_lwh2f_s0_burst_adapter:source0_ready
	wire    [4:0] pb_lwh2f_s0_burst_adapter_source0_channel;                                // pb_lwh2f_s0_burst_adapter:source0_channel -> agent_pipeline_006:in_channel
	wire          pb_lwh2f_s0_burst_adapter_source0_startofpacket;                          // pb_lwh2f_s0_burst_adapter:source0_startofpacket -> agent_pipeline_006:in_startofpacket
	wire          pb_lwh2f_s0_burst_adapter_source0_endofpacket;                            // pb_lwh2f_s0_burst_adapter:source0_endofpacket -> agent_pipeline_006:in_endofpacket
	wire          agent_pipeline_006_source0_valid;                                         // agent_pipeline_006:out_valid -> pb_lwh2f_s0_agent:cp_valid
	wire  [120:0] agent_pipeline_006_source0_data;                                          // agent_pipeline_006:out_data -> pb_lwh2f_s0_agent:cp_data
	wire          agent_pipeline_006_source0_ready;                                         // pb_lwh2f_s0_agent:cp_ready -> agent_pipeline_006:out_ready
	wire    [4:0] agent_pipeline_006_source0_channel;                                       // agent_pipeline_006:out_channel -> pb_lwh2f_s0_agent:cp_channel
	wire          agent_pipeline_006_source0_startofpacket;                                 // agent_pipeline_006:out_startofpacket -> pb_lwh2f_s0_agent:cp_startofpacket
	wire          agent_pipeline_006_source0_endofpacket;                                   // agent_pipeline_006:out_endofpacket -> pb_lwh2f_s0_agent:cp_endofpacket
	wire          pb_lwh2f_s0_agent_rp_valid;                                               // pb_lwh2f_s0_agent:rp_valid -> agent_pipeline_007:in_valid
	wire  [120:0] pb_lwh2f_s0_agent_rp_data;                                                // pb_lwh2f_s0_agent:rp_data -> agent_pipeline_007:in_data
	wire          pb_lwh2f_s0_agent_rp_ready;                                               // agent_pipeline_007:in_ready -> pb_lwh2f_s0_agent:rp_ready
	wire          pb_lwh2f_s0_agent_rp_startofpacket;                                       // pb_lwh2f_s0_agent:rp_startofpacket -> agent_pipeline_007:in_startofpacket
	wire          pb_lwh2f_s0_agent_rp_endofpacket;                                         // pb_lwh2f_s0_agent:rp_endofpacket -> agent_pipeline_007:in_endofpacket
	wire          agent_pipeline_007_source0_valid;                                         // agent_pipeline_007:out_valid -> router_006:sink_valid
	wire  [120:0] agent_pipeline_007_source0_data;                                          // agent_pipeline_007:out_data -> router_006:sink_data
	wire          agent_pipeline_007_source0_ready;                                         // router_006:sink_ready -> agent_pipeline_007:out_ready
	wire          agent_pipeline_007_source0_startofpacket;                                 // agent_pipeline_007:out_startofpacket -> router_006:sink_startofpacket
	wire          agent_pipeline_007_source0_endofpacket;                                   // agent_pipeline_007:out_endofpacket -> router_006:sink_endofpacket
	wire          fmcomms2_spi_ad9361_spi_control_port_burst_adapter_source0_valid;         // fmcomms2_spi_ad9361_spi_control_port_burst_adapter:source0_valid -> agent_pipeline_008:in_valid
	wire  [120:0] fmcomms2_spi_ad9361_spi_control_port_burst_adapter_source0_data;          // fmcomms2_spi_ad9361_spi_control_port_burst_adapter:source0_data -> agent_pipeline_008:in_data
	wire          fmcomms2_spi_ad9361_spi_control_port_burst_adapter_source0_ready;         // agent_pipeline_008:in_ready -> fmcomms2_spi_ad9361_spi_control_port_burst_adapter:source0_ready
	wire    [4:0] fmcomms2_spi_ad9361_spi_control_port_burst_adapter_source0_channel;       // fmcomms2_spi_ad9361_spi_control_port_burst_adapter:source0_channel -> agent_pipeline_008:in_channel
	wire          fmcomms2_spi_ad9361_spi_control_port_burst_adapter_source0_startofpacket; // fmcomms2_spi_ad9361_spi_control_port_burst_adapter:source0_startofpacket -> agent_pipeline_008:in_startofpacket
	wire          fmcomms2_spi_ad9361_spi_control_port_burst_adapter_source0_endofpacket;   // fmcomms2_spi_ad9361_spi_control_port_burst_adapter:source0_endofpacket -> agent_pipeline_008:in_endofpacket
	wire          agent_pipeline_008_source0_valid;                                         // agent_pipeline_008:out_valid -> fmcomms2_spi_ad9361_spi_control_port_agent:cp_valid
	wire  [120:0] agent_pipeline_008_source0_data;                                          // agent_pipeline_008:out_data -> fmcomms2_spi_ad9361_spi_control_port_agent:cp_data
	wire          agent_pipeline_008_source0_ready;                                         // fmcomms2_spi_ad9361_spi_control_port_agent:cp_ready -> agent_pipeline_008:out_ready
	wire    [4:0] agent_pipeline_008_source0_channel;                                       // agent_pipeline_008:out_channel -> fmcomms2_spi_ad9361_spi_control_port_agent:cp_channel
	wire          agent_pipeline_008_source0_startofpacket;                                 // agent_pipeline_008:out_startofpacket -> fmcomms2_spi_ad9361_spi_control_port_agent:cp_startofpacket
	wire          agent_pipeline_008_source0_endofpacket;                                   // agent_pipeline_008:out_endofpacket -> fmcomms2_spi_ad9361_spi_control_port_agent:cp_endofpacket
	wire          fmcomms2_spi_ad9361_spi_control_port_agent_rp_valid;                      // fmcomms2_spi_ad9361_spi_control_port_agent:rp_valid -> agent_pipeline_009:in_valid
	wire  [120:0] fmcomms2_spi_ad9361_spi_control_port_agent_rp_data;                       // fmcomms2_spi_ad9361_spi_control_port_agent:rp_data -> agent_pipeline_009:in_data
	wire          fmcomms2_spi_ad9361_spi_control_port_agent_rp_ready;                      // agent_pipeline_009:in_ready -> fmcomms2_spi_ad9361_spi_control_port_agent:rp_ready
	wire          fmcomms2_spi_ad9361_spi_control_port_agent_rp_startofpacket;              // fmcomms2_spi_ad9361_spi_control_port_agent:rp_startofpacket -> agent_pipeline_009:in_startofpacket
	wire          fmcomms2_spi_ad9361_spi_control_port_agent_rp_endofpacket;                // fmcomms2_spi_ad9361_spi_control_port_agent:rp_endofpacket -> agent_pipeline_009:in_endofpacket
	wire          agent_pipeline_009_source0_valid;                                         // agent_pipeline_009:out_valid -> router_007:sink_valid
	wire  [120:0] agent_pipeline_009_source0_data;                                          // agent_pipeline_009:out_data -> router_007:sink_data
	wire          agent_pipeline_009_source0_ready;                                         // router_007:sink_ready -> agent_pipeline_009:out_ready
	wire          agent_pipeline_009_source0_startofpacket;                                 // agent_pipeline_009:out_startofpacket -> router_007:sink_startofpacket
	wire          agent_pipeline_009_source0_endofpacket;                                   // agent_pipeline_009:out_endofpacket -> router_007:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                     // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [120:0] cmd_demux_src0_data;                                                      // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                                     // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire    [4:0] cmd_demux_src0_channel;                                                   // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                             // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                               // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                               // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [120:0] mux_pipeline_source0_data;                                                // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                               // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire    [4:0] mux_pipeline_source0_channel;                                             // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                                       // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                         // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                 // cmd_demux_001:src0_valid -> mux_pipeline_001:in_valid
	wire  [120:0] cmd_demux_001_src0_data;                                                  // cmd_demux_001:src0_data -> mux_pipeline_001:in_data
	wire          cmd_demux_001_src0_ready;                                                 // mux_pipeline_001:in_ready -> cmd_demux_001:src0_ready
	wire    [4:0] cmd_demux_001_src0_channel;                                               // cmd_demux_001:src0_channel -> mux_pipeline_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                         // cmd_demux_001:src0_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                           // cmd_demux_001:src0_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                           // mux_pipeline_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [120:0] mux_pipeline_001_source0_data;                                            // mux_pipeline_001:out_data -> cmd_mux_001:sink0_data
	wire          mux_pipeline_001_source0_ready;                                           // cmd_mux_001:sink0_ready -> mux_pipeline_001:out_ready
	wire    [4:0] mux_pipeline_001_source0_channel;                                         // mux_pipeline_001:out_channel -> cmd_mux_001:sink0_channel
	wire          mux_pipeline_001_source0_startofpacket;                                   // mux_pipeline_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                                     // mux_pipeline_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                     // cmd_demux:src1_valid -> mux_pipeline_002:in_valid
	wire  [120:0] cmd_demux_src1_data;                                                      // cmd_demux:src1_data -> mux_pipeline_002:in_data
	wire          cmd_demux_src1_ready;                                                     // mux_pipeline_002:in_ready -> cmd_demux:src1_ready
	wire    [4:0] cmd_demux_src1_channel;                                                   // cmd_demux:src1_channel -> mux_pipeline_002:in_channel
	wire          cmd_demux_src1_startofpacket;                                             // cmd_demux:src1_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                               // cmd_demux:src1_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                                           // mux_pipeline_002:out_valid -> cmd_mux_002:sink0_valid
	wire  [120:0] mux_pipeline_002_source0_data;                                            // mux_pipeline_002:out_data -> cmd_mux_002:sink0_data
	wire          mux_pipeline_002_source0_ready;                                           // cmd_mux_002:sink0_ready -> mux_pipeline_002:out_ready
	wire    [4:0] mux_pipeline_002_source0_channel;                                         // mux_pipeline_002:out_channel -> cmd_mux_002:sink0_channel
	wire          mux_pipeline_002_source0_startofpacket;                                   // mux_pipeline_002:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                                     // mux_pipeline_002:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                                 // cmd_demux_001:src1_valid -> mux_pipeline_003:in_valid
	wire  [120:0] cmd_demux_001_src1_data;                                                  // cmd_demux_001:src1_data -> mux_pipeline_003:in_data
	wire          cmd_demux_001_src1_ready;                                                 // mux_pipeline_003:in_ready -> cmd_demux_001:src1_ready
	wire    [4:0] cmd_demux_001_src1_channel;                                               // cmd_demux_001:src1_channel -> mux_pipeline_003:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                         // cmd_demux_001:src1_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                           // cmd_demux_001:src1_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                                           // mux_pipeline_003:out_valid -> cmd_mux_002:sink1_valid
	wire  [120:0] mux_pipeline_003_source0_data;                                            // mux_pipeline_003:out_data -> cmd_mux_002:sink1_data
	wire          mux_pipeline_003_source0_ready;                                           // cmd_mux_002:sink1_ready -> mux_pipeline_003:out_ready
	wire    [4:0] mux_pipeline_003_source0_channel;                                         // mux_pipeline_003:out_channel -> cmd_mux_002:sink1_channel
	wire          mux_pipeline_003_source0_startofpacket;                                   // mux_pipeline_003:out_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                                     // mux_pipeline_003:out_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_src2_valid;                                                     // cmd_demux:src2_valid -> mux_pipeline_004:in_valid
	wire  [120:0] cmd_demux_src2_data;                                                      // cmd_demux:src2_data -> mux_pipeline_004:in_data
	wire          cmd_demux_src2_ready;                                                     // mux_pipeline_004:in_ready -> cmd_demux:src2_ready
	wire    [4:0] cmd_demux_src2_channel;                                                   // cmd_demux:src2_channel -> mux_pipeline_004:in_channel
	wire          cmd_demux_src2_startofpacket;                                             // cmd_demux:src2_startofpacket -> mux_pipeline_004:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                               // cmd_demux:src2_endofpacket -> mux_pipeline_004:in_endofpacket
	wire          mux_pipeline_004_source0_valid;                                           // mux_pipeline_004:out_valid -> cmd_mux_003:sink0_valid
	wire  [120:0] mux_pipeline_004_source0_data;                                            // mux_pipeline_004:out_data -> cmd_mux_003:sink0_data
	wire          mux_pipeline_004_source0_ready;                                           // cmd_mux_003:sink0_ready -> mux_pipeline_004:out_ready
	wire    [4:0] mux_pipeline_004_source0_channel;                                         // mux_pipeline_004:out_channel -> cmd_mux_003:sink0_channel
	wire          mux_pipeline_004_source0_startofpacket;                                   // mux_pipeline_004:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          mux_pipeline_004_source0_endofpacket;                                     // mux_pipeline_004:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src2_valid;                                                 // cmd_demux_001:src2_valid -> mux_pipeline_005:in_valid
	wire  [120:0] cmd_demux_001_src2_data;                                                  // cmd_demux_001:src2_data -> mux_pipeline_005:in_data
	wire          cmd_demux_001_src2_ready;                                                 // mux_pipeline_005:in_ready -> cmd_demux_001:src2_ready
	wire    [4:0] cmd_demux_001_src2_channel;                                               // cmd_demux_001:src2_channel -> mux_pipeline_005:in_channel
	wire          cmd_demux_001_src2_startofpacket;                                         // cmd_demux_001:src2_startofpacket -> mux_pipeline_005:in_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                           // cmd_demux_001:src2_endofpacket -> mux_pipeline_005:in_endofpacket
	wire          mux_pipeline_005_source0_valid;                                           // mux_pipeline_005:out_valid -> cmd_mux_003:sink1_valid
	wire  [120:0] mux_pipeline_005_source0_data;                                            // mux_pipeline_005:out_data -> cmd_mux_003:sink1_data
	wire          mux_pipeline_005_source0_ready;                                           // cmd_mux_003:sink1_ready -> mux_pipeline_005:out_ready
	wire    [4:0] mux_pipeline_005_source0_channel;                                         // mux_pipeline_005:out_channel -> cmd_mux_003:sink1_channel
	wire          mux_pipeline_005_source0_startofpacket;                                   // mux_pipeline_005:out_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          mux_pipeline_005_source0_endofpacket;                                     // mux_pipeline_005:out_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                 // cmd_demux_002:src0_valid -> mux_pipeline_006:in_valid
	wire  [120:0] cmd_demux_002_src0_data;                                                  // cmd_demux_002:src0_data -> mux_pipeline_006:in_data
	wire          cmd_demux_002_src0_ready;                                                 // mux_pipeline_006:in_ready -> cmd_demux_002:src0_ready
	wire    [4:0] cmd_demux_002_src0_channel;                                               // cmd_demux_002:src0_channel -> mux_pipeline_006:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                         // cmd_demux_002:src0_startofpacket -> mux_pipeline_006:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                           // cmd_demux_002:src0_endofpacket -> mux_pipeline_006:in_endofpacket
	wire          mux_pipeline_006_source0_valid;                                           // mux_pipeline_006:out_valid -> cmd_mux_003:sink2_valid
	wire  [120:0] mux_pipeline_006_source0_data;                                            // mux_pipeline_006:out_data -> cmd_mux_003:sink2_data
	wire          mux_pipeline_006_source0_ready;                                           // cmd_mux_003:sink2_ready -> mux_pipeline_006:out_ready
	wire    [4:0] mux_pipeline_006_source0_channel;                                         // mux_pipeline_006:out_channel -> cmd_mux_003:sink2_channel
	wire          mux_pipeline_006_source0_startofpacket;                                   // mux_pipeline_006:out_startofpacket -> cmd_mux_003:sink2_startofpacket
	wire          mux_pipeline_006_source0_endofpacket;                                     // mux_pipeline_006:out_endofpacket -> cmd_mux_003:sink2_endofpacket
	wire          cmd_demux_src3_valid;                                                     // cmd_demux:src3_valid -> mux_pipeline_007:in_valid
	wire  [120:0] cmd_demux_src3_data;                                                      // cmd_demux:src3_data -> mux_pipeline_007:in_data
	wire          cmd_demux_src3_ready;                                                     // mux_pipeline_007:in_ready -> cmd_demux:src3_ready
	wire    [4:0] cmd_demux_src3_channel;                                                   // cmd_demux:src3_channel -> mux_pipeline_007:in_channel
	wire          cmd_demux_src3_startofpacket;                                             // cmd_demux:src3_startofpacket -> mux_pipeline_007:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                               // cmd_demux:src3_endofpacket -> mux_pipeline_007:in_endofpacket
	wire          mux_pipeline_007_source0_valid;                                           // mux_pipeline_007:out_valid -> cmd_mux_004:sink0_valid
	wire  [120:0] mux_pipeline_007_source0_data;                                            // mux_pipeline_007:out_data -> cmd_mux_004:sink0_data
	wire          mux_pipeline_007_source0_ready;                                           // cmd_mux_004:sink0_ready -> mux_pipeline_007:out_ready
	wire    [4:0] mux_pipeline_007_source0_channel;                                         // mux_pipeline_007:out_channel -> cmd_mux_004:sink0_channel
	wire          mux_pipeline_007_source0_startofpacket;                                   // mux_pipeline_007:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          mux_pipeline_007_source0_endofpacket;                                     // mux_pipeline_007:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                                 // cmd_demux_001:src3_valid -> mux_pipeline_008:in_valid
	wire  [120:0] cmd_demux_001_src3_data;                                                  // cmd_demux_001:src3_data -> mux_pipeline_008:in_data
	wire          cmd_demux_001_src3_ready;                                                 // mux_pipeline_008:in_ready -> cmd_demux_001:src3_ready
	wire    [4:0] cmd_demux_001_src3_channel;                                               // cmd_demux_001:src3_channel -> mux_pipeline_008:in_channel
	wire          cmd_demux_001_src3_startofpacket;                                         // cmd_demux_001:src3_startofpacket -> mux_pipeline_008:in_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                           // cmd_demux_001:src3_endofpacket -> mux_pipeline_008:in_endofpacket
	wire          mux_pipeline_008_source0_valid;                                           // mux_pipeline_008:out_valid -> cmd_mux_004:sink1_valid
	wire  [120:0] mux_pipeline_008_source0_data;                                            // mux_pipeline_008:out_data -> cmd_mux_004:sink1_data
	wire          mux_pipeline_008_source0_ready;                                           // cmd_mux_004:sink1_ready -> mux_pipeline_008:out_ready
	wire    [4:0] mux_pipeline_008_source0_channel;                                         // mux_pipeline_008:out_channel -> cmd_mux_004:sink1_channel
	wire          mux_pipeline_008_source0_startofpacket;                                   // mux_pipeline_008:out_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          mux_pipeline_008_source0_endofpacket;                                     // mux_pipeline_008:out_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                     // rsp_demux:src0_valid -> mux_pipeline_009:in_valid
	wire  [120:0] rsp_demux_src0_data;                                                      // rsp_demux:src0_data -> mux_pipeline_009:in_data
	wire          rsp_demux_src0_ready;                                                     // mux_pipeline_009:in_ready -> rsp_demux:src0_ready
	wire    [4:0] rsp_demux_src0_channel;                                                   // rsp_demux:src0_channel -> mux_pipeline_009:in_channel
	wire          rsp_demux_src0_startofpacket;                                             // rsp_demux:src0_startofpacket -> mux_pipeline_009:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                               // rsp_demux:src0_endofpacket -> mux_pipeline_009:in_endofpacket
	wire          mux_pipeline_009_source0_valid;                                           // mux_pipeline_009:out_valid -> rsp_mux:sink0_valid
	wire  [120:0] mux_pipeline_009_source0_data;                                            // mux_pipeline_009:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_009_source0_ready;                                           // rsp_mux:sink0_ready -> mux_pipeline_009:out_ready
	wire    [4:0] mux_pipeline_009_source0_channel;                                         // mux_pipeline_009:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_009_source0_startofpacket;                                   // mux_pipeline_009:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_009_source0_endofpacket;                                     // mux_pipeline_009:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                 // rsp_demux_002:src0_valid -> mux_pipeline_010:in_valid
	wire  [120:0] rsp_demux_002_src0_data;                                                  // rsp_demux_002:src0_data -> mux_pipeline_010:in_data
	wire          rsp_demux_002_src0_ready;                                                 // mux_pipeline_010:in_ready -> rsp_demux_002:src0_ready
	wire    [4:0] rsp_demux_002_src0_channel;                                               // rsp_demux_002:src0_channel -> mux_pipeline_010:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                         // rsp_demux_002:src0_startofpacket -> mux_pipeline_010:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                           // rsp_demux_002:src0_endofpacket -> mux_pipeline_010:in_endofpacket
	wire          mux_pipeline_010_source0_valid;                                           // mux_pipeline_010:out_valid -> rsp_mux:sink1_valid
	wire  [120:0] mux_pipeline_010_source0_data;                                            // mux_pipeline_010:out_data -> rsp_mux:sink1_data
	wire          mux_pipeline_010_source0_ready;                                           // rsp_mux:sink1_ready -> mux_pipeline_010:out_ready
	wire    [4:0] mux_pipeline_010_source0_channel;                                         // mux_pipeline_010:out_channel -> rsp_mux:sink1_channel
	wire          mux_pipeline_010_source0_startofpacket;                                   // mux_pipeline_010:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          mux_pipeline_010_source0_endofpacket;                                     // mux_pipeline_010:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_003_src0_valid;                                                 // rsp_demux_003:src0_valid -> mux_pipeline_011:in_valid
	wire  [120:0] rsp_demux_003_src0_data;                                                  // rsp_demux_003:src0_data -> mux_pipeline_011:in_data
	wire          rsp_demux_003_src0_ready;                                                 // mux_pipeline_011:in_ready -> rsp_demux_003:src0_ready
	wire    [4:0] rsp_demux_003_src0_channel;                                               // rsp_demux_003:src0_channel -> mux_pipeline_011:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                         // rsp_demux_003:src0_startofpacket -> mux_pipeline_011:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                           // rsp_demux_003:src0_endofpacket -> mux_pipeline_011:in_endofpacket
	wire          mux_pipeline_011_source0_valid;                                           // mux_pipeline_011:out_valid -> rsp_mux:sink2_valid
	wire  [120:0] mux_pipeline_011_source0_data;                                            // mux_pipeline_011:out_data -> rsp_mux:sink2_data
	wire          mux_pipeline_011_source0_ready;                                           // rsp_mux:sink2_ready -> mux_pipeline_011:out_ready
	wire    [4:0] mux_pipeline_011_source0_channel;                                         // mux_pipeline_011:out_channel -> rsp_mux:sink2_channel
	wire          mux_pipeline_011_source0_startofpacket;                                   // mux_pipeline_011:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          mux_pipeline_011_source0_endofpacket;                                     // mux_pipeline_011:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_004_src0_valid;                                                 // rsp_demux_004:src0_valid -> mux_pipeline_012:in_valid
	wire  [120:0] rsp_demux_004_src0_data;                                                  // rsp_demux_004:src0_data -> mux_pipeline_012:in_data
	wire          rsp_demux_004_src0_ready;                                                 // mux_pipeline_012:in_ready -> rsp_demux_004:src0_ready
	wire    [4:0] rsp_demux_004_src0_channel;                                               // rsp_demux_004:src0_channel -> mux_pipeline_012:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                         // rsp_demux_004:src0_startofpacket -> mux_pipeline_012:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                           // rsp_demux_004:src0_endofpacket -> mux_pipeline_012:in_endofpacket
	wire          mux_pipeline_012_source0_valid;                                           // mux_pipeline_012:out_valid -> rsp_mux:sink3_valid
	wire  [120:0] mux_pipeline_012_source0_data;                                            // mux_pipeline_012:out_data -> rsp_mux:sink3_data
	wire          mux_pipeline_012_source0_ready;                                           // rsp_mux:sink3_ready -> mux_pipeline_012:out_ready
	wire    [4:0] mux_pipeline_012_source0_channel;                                         // mux_pipeline_012:out_channel -> rsp_mux:sink3_channel
	wire          mux_pipeline_012_source0_startofpacket;                                   // mux_pipeline_012:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          mux_pipeline_012_source0_endofpacket;                                     // mux_pipeline_012:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_001_src0_valid;                                                 // rsp_demux_001:src0_valid -> mux_pipeline_013:in_valid
	wire  [120:0] rsp_demux_001_src0_data;                                                  // rsp_demux_001:src0_data -> mux_pipeline_013:in_data
	wire          rsp_demux_001_src0_ready;                                                 // mux_pipeline_013:in_ready -> rsp_demux_001:src0_ready
	wire    [4:0] rsp_demux_001_src0_channel;                                               // rsp_demux_001:src0_channel -> mux_pipeline_013:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                         // rsp_demux_001:src0_startofpacket -> mux_pipeline_013:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                           // rsp_demux_001:src0_endofpacket -> mux_pipeline_013:in_endofpacket
	wire          mux_pipeline_013_source0_valid;                                           // mux_pipeline_013:out_valid -> rsp_mux_001:sink0_valid
	wire  [120:0] mux_pipeline_013_source0_data;                                            // mux_pipeline_013:out_data -> rsp_mux_001:sink0_data
	wire          mux_pipeline_013_source0_ready;                                           // rsp_mux_001:sink0_ready -> mux_pipeline_013:out_ready
	wire    [4:0] mux_pipeline_013_source0_channel;                                         // mux_pipeline_013:out_channel -> rsp_mux_001:sink0_channel
	wire          mux_pipeline_013_source0_startofpacket;                                   // mux_pipeline_013:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          mux_pipeline_013_source0_endofpacket;                                     // mux_pipeline_013:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_002_src1_valid;                                                 // rsp_demux_002:src1_valid -> mux_pipeline_014:in_valid
	wire  [120:0] rsp_demux_002_src1_data;                                                  // rsp_demux_002:src1_data -> mux_pipeline_014:in_data
	wire          rsp_demux_002_src1_ready;                                                 // mux_pipeline_014:in_ready -> rsp_demux_002:src1_ready
	wire    [4:0] rsp_demux_002_src1_channel;                                               // rsp_demux_002:src1_channel -> mux_pipeline_014:in_channel
	wire          rsp_demux_002_src1_startofpacket;                                         // rsp_demux_002:src1_startofpacket -> mux_pipeline_014:in_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                           // rsp_demux_002:src1_endofpacket -> mux_pipeline_014:in_endofpacket
	wire          mux_pipeline_014_source0_valid;                                           // mux_pipeline_014:out_valid -> rsp_mux_001:sink1_valid
	wire  [120:0] mux_pipeline_014_source0_data;                                            // mux_pipeline_014:out_data -> rsp_mux_001:sink1_data
	wire          mux_pipeline_014_source0_ready;                                           // rsp_mux_001:sink1_ready -> mux_pipeline_014:out_ready
	wire    [4:0] mux_pipeline_014_source0_channel;                                         // mux_pipeline_014:out_channel -> rsp_mux_001:sink1_channel
	wire          mux_pipeline_014_source0_startofpacket;                                   // mux_pipeline_014:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          mux_pipeline_014_source0_endofpacket;                                     // mux_pipeline_014:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_003_src1_valid;                                                 // rsp_demux_003:src1_valid -> mux_pipeline_015:in_valid
	wire  [120:0] rsp_demux_003_src1_data;                                                  // rsp_demux_003:src1_data -> mux_pipeline_015:in_data
	wire          rsp_demux_003_src1_ready;                                                 // mux_pipeline_015:in_ready -> rsp_demux_003:src1_ready
	wire    [4:0] rsp_demux_003_src1_channel;                                               // rsp_demux_003:src1_channel -> mux_pipeline_015:in_channel
	wire          rsp_demux_003_src1_startofpacket;                                         // rsp_demux_003:src1_startofpacket -> mux_pipeline_015:in_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                           // rsp_demux_003:src1_endofpacket -> mux_pipeline_015:in_endofpacket
	wire          mux_pipeline_015_source0_valid;                                           // mux_pipeline_015:out_valid -> rsp_mux_001:sink2_valid
	wire  [120:0] mux_pipeline_015_source0_data;                                            // mux_pipeline_015:out_data -> rsp_mux_001:sink2_data
	wire          mux_pipeline_015_source0_ready;                                           // rsp_mux_001:sink2_ready -> mux_pipeline_015:out_ready
	wire    [4:0] mux_pipeline_015_source0_channel;                                         // mux_pipeline_015:out_channel -> rsp_mux_001:sink2_channel
	wire          mux_pipeline_015_source0_startofpacket;                                   // mux_pipeline_015:out_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          mux_pipeline_015_source0_endofpacket;                                     // mux_pipeline_015:out_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_004_src1_valid;                                                 // rsp_demux_004:src1_valid -> mux_pipeline_016:in_valid
	wire  [120:0] rsp_demux_004_src1_data;                                                  // rsp_demux_004:src1_data -> mux_pipeline_016:in_data
	wire          rsp_demux_004_src1_ready;                                                 // mux_pipeline_016:in_ready -> rsp_demux_004:src1_ready
	wire    [4:0] rsp_demux_004_src1_channel;                                               // rsp_demux_004:src1_channel -> mux_pipeline_016:in_channel
	wire          rsp_demux_004_src1_startofpacket;                                         // rsp_demux_004:src1_startofpacket -> mux_pipeline_016:in_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                           // rsp_demux_004:src1_endofpacket -> mux_pipeline_016:in_endofpacket
	wire          mux_pipeline_016_source0_valid;                                           // mux_pipeline_016:out_valid -> rsp_mux_001:sink3_valid
	wire  [120:0] mux_pipeline_016_source0_data;                                            // mux_pipeline_016:out_data -> rsp_mux_001:sink3_data
	wire          mux_pipeline_016_source0_ready;                                           // rsp_mux_001:sink3_ready -> mux_pipeline_016:out_ready
	wire    [4:0] mux_pipeline_016_source0_channel;                                         // mux_pipeline_016:out_channel -> rsp_mux_001:sink3_channel
	wire          mux_pipeline_016_source0_startofpacket;                                   // mux_pipeline_016:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          mux_pipeline_016_source0_endofpacket;                                     // mux_pipeline_016:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_003_src2_valid;                                                 // rsp_demux_003:src2_valid -> mux_pipeline_017:in_valid
	wire  [120:0] rsp_demux_003_src2_data;                                                  // rsp_demux_003:src2_data -> mux_pipeline_017:in_data
	wire          rsp_demux_003_src2_ready;                                                 // mux_pipeline_017:in_ready -> rsp_demux_003:src2_ready
	wire    [4:0] rsp_demux_003_src2_channel;                                               // rsp_demux_003:src2_channel -> mux_pipeline_017:in_channel
	wire          rsp_demux_003_src2_startofpacket;                                         // rsp_demux_003:src2_startofpacket -> mux_pipeline_017:in_startofpacket
	wire          rsp_demux_003_src2_endofpacket;                                           // rsp_demux_003:src2_endofpacket -> mux_pipeline_017:in_endofpacket
	wire          mux_pipeline_017_source0_valid;                                           // mux_pipeline_017:out_valid -> rsp_mux_002:sink0_valid
	wire  [120:0] mux_pipeline_017_source0_data;                                            // mux_pipeline_017:out_data -> rsp_mux_002:sink0_data
	wire          mux_pipeline_017_source0_ready;                                           // rsp_mux_002:sink0_ready -> mux_pipeline_017:out_ready
	wire    [4:0] mux_pipeline_017_source0_channel;                                         // mux_pipeline_017:out_channel -> rsp_mux_002:sink0_channel
	wire          mux_pipeline_017_source0_startofpacket;                                   // mux_pipeline_017:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          mux_pipeline_017_source0_endofpacket;                                     // mux_pipeline_017:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          fmcomms2_gpio_s1_agent_rdata_fifo_out_valid;                              // fmcomms2_gpio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] fmcomms2_gpio_s1_agent_rdata_fifo_out_data;                               // fmcomms2_gpio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          fmcomms2_gpio_s1_agent_rdata_fifo_out_ready;                              // avalon_st_adapter:in_0_ready -> fmcomms2_gpio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                            // avalon_st_adapter:out_0_valid -> fmcomms2_gpio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                             // avalon_st_adapter:out_0_data -> fmcomms2_gpio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                            // fmcomms2_gpio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                            // avalon_st_adapter:out_0_error -> fmcomms2_gpio_s1_agent:rdata_fifo_sink_error
	wire          pb_lwh2f_s0_agent_rdata_fifo_out_valid;                                   // pb_lwh2f_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] pb_lwh2f_s0_agent_rdata_fifo_out_data;                                    // pb_lwh2f_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          pb_lwh2f_s0_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter_001:in_0_ready -> pb_lwh2f_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                        // avalon_st_adapter_001:out_0_valid -> pb_lwh2f_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                         // avalon_st_adapter_001:out_0_data -> pb_lwh2f_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                        // pb_lwh2f_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                        // avalon_st_adapter_001:out_0_error -> pb_lwh2f_s0_agent:rdata_fifo_sink_error
	wire          fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo_out_valid;          // fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo_out_data;           // fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo_out_ready;          // avalon_st_adapter_002:in_0_ready -> fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                        // avalon_st_adapter_002:out_0_valid -> fmcomms2_spi_ad9361_spi_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                         // avalon_st_adapter_002:out_0_data -> fmcomms2_spi_ad9361_spi_control_port_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                        // fmcomms2_spi_ad9361_spi_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                        // avalon_st_adapter_002:out_0_error -> fmcomms2_spi_ad9361_spi_control_port_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) fpga_m_master_translator (
		.clk                    (clk_0_clk_clk),                                                    //                       clk.clk
		.reset                  (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),         //                     reset.reset
		.uav_address            (fpga_m_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (fpga_m_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (fpga_m_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (fpga_m_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (fpga_m_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (fpga_m_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (fpga_m_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (fpga_m_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (fpga_m_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (fpga_m_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (fpga_m_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (fpga_m_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (fpga_m_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (fpga_m_master_byteenable),                                         //                          .byteenable
		.av_read                (fpga_m_master_read),                                               //                          .read
		.av_readdata            (fpga_m_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (fpga_m_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (fpga_m_master_write),                                              //                          .write
		.av_writedata           (fpga_m_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                             //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                             //               (terminated)
		.av_begintransfer       (1'b0),                                                             //               (terminated)
		.av_chipselect          (1'b0),                                                             //               (terminated)
		.av_lock                (1'b0),                                                             //               (terminated)
		.av_debugaccess         (1'b0),                                                             //               (terminated)
		.uav_clken              (),                                                                 //               (terminated)
		.av_clken               (1'b1),                                                             //               (terminated)
		.uav_response           (2'b00),                                                            //               (terminated)
		.av_response            (),                                                                 //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                             //               (terminated)
		.av_writeresponsevalid  ()                                                                  //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fmcomms2_gpio_s1_translator (
		.clk                    (clk_0_clk_clk),                                              //                      clk.clk
		.reset                  (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fmcomms2_gpio_s1_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (fmcomms2_gpio_s1_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (fmcomms2_gpio_s1_agent_m0_read),                             //                         .read
		.uav_write              (fmcomms2_gpio_s1_agent_m0_write),                            //                         .write
		.uav_waitrequest        (fmcomms2_gpio_s1_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (fmcomms2_gpio_s1_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (fmcomms2_gpio_s1_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (fmcomms2_gpio_s1_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (fmcomms2_gpio_s1_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (fmcomms2_gpio_s1_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (fmcomms2_gpio_s1_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (fmcomms2_gpio_s1_address),                                   //      avalon_anti_slave_0.address
		.av_write               (fmcomms2_gpio_s1_write),                                     //                         .write
		.av_readdata            (fmcomms2_gpio_s1_readdata),                                  //                         .readdata
		.av_writedata           (fmcomms2_gpio_s1_writedata),                                 //                         .writedata
		.av_chipselect          (fmcomms2_gpio_s1_chipselect),                                //                         .chipselect
		.av_read                (),                                                           //              (terminated)
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pb_lwh2f_s0_translator (
		.clk                    (clk_0_clk_clk),                                            //                      clk.clk
		.reset                  (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pb_lwh2f_s0_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (pb_lwh2f_s0_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (pb_lwh2f_s0_agent_m0_read),                                //                         .read
		.uav_write              (pb_lwh2f_s0_agent_m0_write),                               //                         .write
		.uav_waitrequest        (pb_lwh2f_s0_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (pb_lwh2f_s0_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (pb_lwh2f_s0_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (pb_lwh2f_s0_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (pb_lwh2f_s0_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (pb_lwh2f_s0_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (pb_lwh2f_s0_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (pb_lwh2f_s0_address),                                      //      avalon_anti_slave_0.address
		.av_write               (pb_lwh2f_s0_write),                                        //                         .write
		.av_read                (pb_lwh2f_s0_read),                                         //                         .read
		.av_readdata            (pb_lwh2f_s0_readdata),                                     //                         .readdata
		.av_writedata           (pb_lwh2f_s0_writedata),                                    //                         .writedata
		.av_burstcount          (pb_lwh2f_s0_burstcount),                                   //                         .burstcount
		.av_byteenable          (pb_lwh2f_s0_byteenable),                                   //                         .byteenable
		.av_readdatavalid       (pb_lwh2f_s0_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (pb_lwh2f_s0_waitrequest),                                  //                         .waitrequest
		.av_debugaccess         (pb_lwh2f_s0_debugaccess),                                  //                         .debugaccess
		.av_begintransfer       (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.av_chipselect          (),                                                         //              (terminated)
		.av_clken               (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fmcomms2_spi_ad9361_spi_control_port_translator (
		.clk                    (clk_0_clk_clk),                                               //                      clk.clk
		.reset                  (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (fmcomms2_spi_ad9361_spi_control_port_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (fmcomms2_spi_ad9361_spi_control_port_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (fmcomms2_spi_ad9361_spi_control_port_agent_m0_read),          //                         .read
		.uav_write              (fmcomms2_spi_ad9361_spi_control_port_agent_m0_write),         //                         .write
		.uav_waitrequest        (fmcomms2_spi_ad9361_spi_control_port_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (fmcomms2_spi_ad9361_spi_control_port_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (fmcomms2_spi_ad9361_spi_control_port_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (fmcomms2_spi_ad9361_spi_control_port_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (fmcomms2_spi_ad9361_spi_control_port_agent_m0_writedata),     //                         .writedata
		.uav_lock               (fmcomms2_spi_ad9361_spi_control_port_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (fmcomms2_spi_ad9361_spi_control_port_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (fmcomms2_spi_ad9361_spi_control_port_address),                //      avalon_anti_slave_0.address
		.av_write               (fmcomms2_spi_ad9361_spi_control_port_write),                  //                         .write
		.av_read                (fmcomms2_spi_ad9361_spi_control_port_read),                   //                         .read
		.av_readdata            (fmcomms2_spi_ad9361_spi_control_port_readdata),               //                         .readdata
		.av_writedata           (fmcomms2_spi_ad9361_spi_control_port_writedata),              //                         .writedata
		.av_chipselect          (fmcomms2_spi_ad9361_spi_control_port_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_burstcount          (),                                                            //              (terminated)
		.av_byteenable          (),                                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                                        //              (terminated)
		.av_waitrequest         (1'b0),                                                        //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (4),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (5),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (99),
		.PKT_CACHE_H               (115),
		.PKT_CACHE_L               (112),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (93),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (103),
		.PKT_THREAD_ID_H           (108),
		.PKT_THREAD_ID_L           (105),
		.PKT_QOS_L                 (100),
		.PKT_QOS_H                 (100),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (5),
		.ID                        (0)
	) arria10_hps_h2f_lw_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                  //              clk.clk
		.aresetn                (~arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),      //        clk_reset.reset_n
		.write_cp_valid         (arria10_hps_h2f_lw_axi_master_agent_write_cp_valid),             //         write_cp.valid
		.write_cp_data          (arria10_hps_h2f_lw_axi_master_agent_write_cp_data),              //                 .data
		.write_cp_startofpacket (arria10_hps_h2f_lw_axi_master_agent_write_cp_startofpacket),     //                 .startofpacket
		.write_cp_endofpacket   (arria10_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),       //                 .endofpacket
		.write_cp_ready         (arria10_hps_h2f_lw_axi_master_agent_write_cp_ready),             //                 .ready
		.write_rp_valid         (arria10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),         //         write_rp.valid
		.write_rp_data          (arria10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),          //                 .data
		.write_rp_channel       (arria10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),       //                 .channel
		.write_rp_startofpacket (arria10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket), //                 .startofpacket
		.write_rp_endofpacket   (arria10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),   //                 .endofpacket
		.write_rp_ready         (arria10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),         //                 .ready
		.read_cp_valid          (arria10_hps_h2f_lw_axi_master_agent_read_cp_valid),              //          read_cp.valid
		.read_cp_data           (arria10_hps_h2f_lw_axi_master_agent_read_cp_data),               //                 .data
		.read_cp_startofpacket  (arria10_hps_h2f_lw_axi_master_agent_read_cp_startofpacket),      //                 .startofpacket
		.read_cp_endofpacket    (arria10_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),        //                 .endofpacket
		.read_cp_ready          (arria10_hps_h2f_lw_axi_master_agent_read_cp_ready),              //                 .ready
		.read_rp_valid          (arria10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),         //          read_rp.valid
		.read_rp_data           (arria10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),          //                 .data
		.read_rp_channel        (arria10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),       //                 .channel
		.read_rp_startofpacket  (arria10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket), //                 .startofpacket
		.read_rp_endofpacket    (arria10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),   //                 .endofpacket
		.read_rp_ready          (arria10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),         //                 .ready
		.awid                   (arria10_hps_h2f_lw_axi_master_awid),                             // altera_axi_slave.awid
		.awaddr                 (arria10_hps_h2f_lw_axi_master_awaddr),                           //                 .awaddr
		.awlen                  (arria10_hps_h2f_lw_axi_master_awlen),                            //                 .awlen
		.awsize                 (arria10_hps_h2f_lw_axi_master_awsize),                           //                 .awsize
		.awburst                (arria10_hps_h2f_lw_axi_master_awburst),                          //                 .awburst
		.awlock                 (arria10_hps_h2f_lw_axi_master_awlock),                           //                 .awlock
		.awcache                (arria10_hps_h2f_lw_axi_master_awcache),                          //                 .awcache
		.awprot                 (arria10_hps_h2f_lw_axi_master_awprot),                           //                 .awprot
		.awuser                 (arria10_hps_h2f_lw_axi_master_awuser),                           //                 .awuser
		.awvalid                (arria10_hps_h2f_lw_axi_master_awvalid),                          //                 .awvalid
		.awready                (arria10_hps_h2f_lw_axi_master_awready),                          //                 .awready
		.wid                    (arria10_hps_h2f_lw_axi_master_wid),                              //                 .wid
		.wdata                  (arria10_hps_h2f_lw_axi_master_wdata),                            //                 .wdata
		.wstrb                  (arria10_hps_h2f_lw_axi_master_wstrb),                            //                 .wstrb
		.wlast                  (arria10_hps_h2f_lw_axi_master_wlast),                            //                 .wlast
		.wvalid                 (arria10_hps_h2f_lw_axi_master_wvalid),                           //                 .wvalid
		.wready                 (arria10_hps_h2f_lw_axi_master_wready),                           //                 .wready
		.bid                    (arria10_hps_h2f_lw_axi_master_bid),                              //                 .bid
		.bresp                  (arria10_hps_h2f_lw_axi_master_bresp),                            //                 .bresp
		.bvalid                 (arria10_hps_h2f_lw_axi_master_bvalid),                           //                 .bvalid
		.bready                 (arria10_hps_h2f_lw_axi_master_bready),                           //                 .bready
		.arid                   (arria10_hps_h2f_lw_axi_master_arid),                             //                 .arid
		.araddr                 (arria10_hps_h2f_lw_axi_master_araddr),                           //                 .araddr
		.arlen                  (arria10_hps_h2f_lw_axi_master_arlen),                            //                 .arlen
		.arsize                 (arria10_hps_h2f_lw_axi_master_arsize),                           //                 .arsize
		.arburst                (arria10_hps_h2f_lw_axi_master_arburst),                          //                 .arburst
		.arlock                 (arria10_hps_h2f_lw_axi_master_arlock),                           //                 .arlock
		.arcache                (arria10_hps_h2f_lw_axi_master_arcache),                          //                 .arcache
		.arprot                 (arria10_hps_h2f_lw_axi_master_arprot),                           //                 .arprot
		.aruser                 (arria10_hps_h2f_lw_axi_master_aruser),                           //                 .aruser
		.arvalid                (arria10_hps_h2f_lw_axi_master_arvalid),                          //                 .arvalid
		.arready                (arria10_hps_h2f_lw_axi_master_arready),                          //                 .arready
		.rid                    (arria10_hps_h2f_lw_axi_master_rid),                              //                 .rid
		.rdata                  (arria10_hps_h2f_lw_axi_master_rdata),                            //                 .rdata
		.rresp                  (arria10_hps_h2f_lw_axi_master_rresp),                            //                 .rresp
		.rlast                  (arria10_hps_h2f_lw_axi_master_rlast),                            //                 .rlast
		.rvalid                 (arria10_hps_h2f_lw_axi_master_rvalid),                           //                 .rvalid
		.rready                 (arria10_hps_h2f_lw_axi_master_rready),                           //                 .rready
		.awqos                  (4'b0000),                                                        //      (terminated)
		.arqos                  (4'b0000),                                                        //      (terminated)
		.awregion               (4'b0000),                                                        //      (terminated)
		.arregion               (4'b0000),                                                        //      (terminated)
		.wuser                  (1'b0),                                                           //      (terminated)
		.ruser                  (),                                                               //      (terminated)
		.buser                  ()                                                                //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (93),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_CACHE_H               (115),
		.PKT_CACHE_L               (112),
		.PKT_THREAD_ID_H           (108),
		.PKT_THREAD_ID_L           (105),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (127),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) fpga_m_master_agent (
		.clk                   (clk_0_clk_clk),                                                    //       clk.clk
		.reset                 (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.av_address            (fpga_m_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (fpga_m_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (fpga_m_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (fpga_m_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (fpga_m_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (fpga_m_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (fpga_m_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (fpga_m_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (fpga_m_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (fpga_m_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (fpga_m_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (fpga_m_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (fpga_m_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (fpga_m_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (fpga_m_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (fpga_m_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                            //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                             //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                          //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                    //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                      //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                            //          .ready
		.av_response           (),                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                  // (terminated)
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (100),
		.PKT_QOS_L                   (100),
		.PKT_THREAD_ID_H             (108),
		.PKT_THREAD_ID_L             (105),
		.PKT_RESPONSE_STATUS_H       (117),
		.PKT_RESPONSE_STATUS_L       (116),
		.PKT_BEGIN_BURST             (99),
		.PKT_CACHE_H                 (115),
		.PKT_CACHE_L                 (112),
		.PKT_DATA_SIDEBAND_H         (98),
		.PKT_DATA_SIDEBAND_L         (98),
		.PKT_ADDR_SIDEBAND_H         (97),
		.PKT_ADDR_SIDEBAND_L         (93),
		.PKT_BURST_TYPE_H            (92),
		.PKT_BURST_TYPE_L            (91),
		.PKT_PROTECTION_H            (111),
		.PKT_PROTECTION_L            (109),
		.PKT_BURST_SIZE_H            (90),
		.PKT_BURST_SIZE_L            (88),
		.PKT_BURSTWRAP_H             (87),
		.PKT_BURSTWRAP_L             (81),
		.PKT_BYTE_CNT_H              (80),
		.PKT_BYTE_CNT_L              (74),
		.PKT_ADDR_H                  (67),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (73),
		.PKT_TRANS_LOCK              (72),
		.PKT_TRANS_COMPRESSED_READ   (68),
		.PKT_TRANS_POSTED            (69),
		.PKT_TRANS_WRITE             (70),
		.PKT_TRANS_READ              (71),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (102),
		.PKT_SRC_ID_L                (101),
		.PKT_DEST_ID_H               (104),
		.PKT_DEST_ID_L               (103),
		.PKT_ORI_BURST_SIZE_L        (118),
		.PKT_ORI_BURST_SIZE_H        (120),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (121),
		.ADDR_WIDTH                  (20),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (5),
		.AXI_SLAVE_ID_W              (12),
		.PASS_ID_TO_SLAVE            (1),
		.AXI_VERSION                 ("AXI3"),
		.WRITE_ACCEPTANCE_CAPABILITY (16),
		.READ_ACCEPTANCE_CAPABILITY  (16)
	) sys_cpu_interconnect_s0_agent (
		.aclk                   (clk_0_clk_clk),                                               //        clock_sink.clk
		.aresetn                (~sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), //        reset_sink.reset_n
		.read_cp_valid          (agent_pipeline_001_source0_valid),                            //           read_cp.valid
		.read_cp_ready          (agent_pipeline_001_source0_ready),                            //                  .ready
		.read_cp_data           (agent_pipeline_001_source0_data),                             //                  .data
		.read_cp_channel        (agent_pipeline_001_source0_channel),                          //                  .channel
		.read_cp_startofpacket  (agent_pipeline_001_source0_startofpacket),                    //                  .startofpacket
		.read_cp_endofpacket    (agent_pipeline_001_source0_endofpacket),                      //                  .endofpacket
		.write_cp_ready         (agent_pipeline_source0_ready),                                //          write_cp.ready
		.write_cp_valid         (agent_pipeline_source0_valid),                                //                  .valid
		.write_cp_data          (agent_pipeline_source0_data),                                 //                  .data
		.write_cp_channel       (agent_pipeline_source0_channel),                              //                  .channel
		.write_cp_startofpacket (agent_pipeline_source0_startofpacket),                        //                  .startofpacket
		.write_cp_endofpacket   (agent_pipeline_source0_endofpacket),                          //                  .endofpacket
		.read_rp_ready          (sys_cpu_interconnect_s0_agent_read_rp_ready),                 //           read_rp.ready
		.read_rp_valid          (sys_cpu_interconnect_s0_agent_read_rp_valid),                 //                  .valid
		.read_rp_data           (sys_cpu_interconnect_s0_agent_read_rp_data),                  //                  .data
		.read_rp_startofpacket  (sys_cpu_interconnect_s0_agent_read_rp_startofpacket),         //                  .startofpacket
		.read_rp_endofpacket    (sys_cpu_interconnect_s0_agent_read_rp_endofpacket),           //                  .endofpacket
		.write_rp_ready         (sys_cpu_interconnect_s0_agent_write_rp_ready),                //          write_rp.ready
		.write_rp_valid         (sys_cpu_interconnect_s0_agent_write_rp_valid),                //                  .valid
		.write_rp_data          (sys_cpu_interconnect_s0_agent_write_rp_data),                 //                  .data
		.write_rp_startofpacket (sys_cpu_interconnect_s0_agent_write_rp_startofpacket),        //                  .startofpacket
		.write_rp_endofpacket   (sys_cpu_interconnect_s0_agent_write_rp_endofpacket),          //                  .endofpacket
		.awid                   (sys_cpu_interconnect_s0_awid),                                // altera_axi_master.awid
		.awaddr                 (sys_cpu_interconnect_s0_awaddr),                              //                  .awaddr
		.awlen                  (sys_cpu_interconnect_s0_awlen),                               //                  .awlen
		.awsize                 (sys_cpu_interconnect_s0_awsize),                              //                  .awsize
		.awburst                (sys_cpu_interconnect_s0_awburst),                             //                  .awburst
		.awlock                 (sys_cpu_interconnect_s0_awlock),                              //                  .awlock
		.awcache                (sys_cpu_interconnect_s0_awcache),                             //                  .awcache
		.awprot                 (sys_cpu_interconnect_s0_awprot),                              //                  .awprot
		.awvalid                (sys_cpu_interconnect_s0_awvalid),                             //                  .awvalid
		.awready                (sys_cpu_interconnect_s0_awready),                             //                  .awready
		.wid                    (sys_cpu_interconnect_s0_wid),                                 //                  .wid
		.wdata                  (sys_cpu_interconnect_s0_wdata),                               //                  .wdata
		.wstrb                  (sys_cpu_interconnect_s0_wstrb),                               //                  .wstrb
		.wlast                  (sys_cpu_interconnect_s0_wlast),                               //                  .wlast
		.wvalid                 (sys_cpu_interconnect_s0_wvalid),                              //                  .wvalid
		.wready                 (sys_cpu_interconnect_s0_wready),                              //                  .wready
		.bid                    (sys_cpu_interconnect_s0_bid),                                 //                  .bid
		.bresp                  (sys_cpu_interconnect_s0_bresp),                               //                  .bresp
		.bvalid                 (sys_cpu_interconnect_s0_bvalid),                              //                  .bvalid
		.bready                 (sys_cpu_interconnect_s0_bready),                              //                  .bready
		.arid                   (sys_cpu_interconnect_s0_arid),                                //                  .arid
		.araddr                 (sys_cpu_interconnect_s0_araddr),                              //                  .araddr
		.arlen                  (sys_cpu_interconnect_s0_arlen),                               //                  .arlen
		.arsize                 (sys_cpu_interconnect_s0_arsize),                              //                  .arsize
		.arburst                (sys_cpu_interconnect_s0_arburst),                             //                  .arburst
		.arlock                 (sys_cpu_interconnect_s0_arlock),                              //                  .arlock
		.arcache                (sys_cpu_interconnect_s0_arcache),                             //                  .arcache
		.arprot                 (sys_cpu_interconnect_s0_arprot),                              //                  .arprot
		.arvalid                (sys_cpu_interconnect_s0_arvalid),                             //                  .arvalid
		.arready                (sys_cpu_interconnect_s0_arready),                             //                  .arready
		.rid                    (sys_cpu_interconnect_s0_rid),                                 //                  .rid
		.rdata                  (sys_cpu_interconnect_s0_rdata),                               //                  .rdata
		.rresp                  (sys_cpu_interconnect_s0_rresp),                               //                  .rresp
		.rlast                  (sys_cpu_interconnect_s0_rlast),                               //                  .rlast
		.rvalid                 (sys_cpu_interconnect_s0_rvalid),                              //                  .rvalid
		.rready                 (sys_cpu_interconnect_s0_rready),                              //                  .rready
		.awuser                 (),                                                            //       (terminated)
		.aruser                 ()                                                             //       (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fmcomms2_gpio_s1_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (fmcomms2_gpio_s1_agent_m0_address),                          //              m0.address
		.m0_burstcount           (fmcomms2_gpio_s1_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (fmcomms2_gpio_s1_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (fmcomms2_gpio_s1_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (fmcomms2_gpio_s1_agent_m0_lock),                             //                .lock
		.m0_readdata             (fmcomms2_gpio_s1_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (fmcomms2_gpio_s1_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (fmcomms2_gpio_s1_agent_m0_read),                             //                .read
		.m0_waitrequest          (fmcomms2_gpio_s1_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (fmcomms2_gpio_s1_agent_m0_writedata),                        //                .writedata
		.m0_write                (fmcomms2_gpio_s1_agent_m0_write),                            //                .write
		.rp_endofpacket          (fmcomms2_gpio_s1_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (fmcomms2_gpio_s1_agent_rp_ready),                            //                .ready
		.rp_valid                (fmcomms2_gpio_s1_agent_rp_valid),                            //                .valid
		.rp_data                 (fmcomms2_gpio_s1_agent_rp_data),                             //                .data
		.rp_startofpacket        (fmcomms2_gpio_s1_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (agent_pipeline_004_source0_ready),                           //              cp.ready
		.cp_valid                (agent_pipeline_004_source0_valid),                           //                .valid
		.cp_data                 (agent_pipeline_004_source0_data),                            //                .data
		.cp_startofpacket        (agent_pipeline_004_source0_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (agent_pipeline_004_source0_endofpacket),                     //                .endofpacket
		.cp_channel              (agent_pipeline_004_source0_channel),                         //                .channel
		.rf_sink_ready           (fmcomms2_gpio_s1_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (fmcomms2_gpio_s1_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (fmcomms2_gpio_s1_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (fmcomms2_gpio_s1_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (fmcomms2_gpio_s1_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (fmcomms2_gpio_s1_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (fmcomms2_gpio_s1_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (fmcomms2_gpio_s1_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (fmcomms2_gpio_s1_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (fmcomms2_gpio_s1_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (fmcomms2_gpio_s1_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fmcomms2_gpio_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (fmcomms2_gpio_s1_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fmcomms2_gpio_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fmcomms2_gpio_s1_agent_rf_source_data),                      //        in.data
		.in_valid          (fmcomms2_gpio_s1_agent_rf_source_valid),                     //          .valid
		.in_ready          (fmcomms2_gpio_s1_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (fmcomms2_gpio_s1_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (fmcomms2_gpio_s1_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (fmcomms2_gpio_s1_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (fmcomms2_gpio_s1_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (fmcomms2_gpio_s1_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (fmcomms2_gpio_s1_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (fmcomms2_gpio_s1_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fmcomms2_gpio_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fmcomms2_gpio_s1_agent_rdata_fifo_src_data),                 //        in.data
		.in_valid          (fmcomms2_gpio_s1_agent_rdata_fifo_src_valid),                //          .valid
		.in_ready          (fmcomms2_gpio_s1_agent_rdata_fifo_src_ready),                //          .ready
		.out_data          (fmcomms2_gpio_s1_agent_rdata_fifo_out_data),                 //       out.data
		.out_valid         (fmcomms2_gpio_s1_agent_rdata_fifo_out_valid),                //          .valid
		.out_ready         (fmcomms2_gpio_s1_agent_rdata_fifo_out_ready),                //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pb_lwh2f_s0_agent (
		.clk                     (clk_0_clk_clk),                                            //             clk.clk
		.reset                   (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pb_lwh2f_s0_agent_m0_address),                             //              m0.address
		.m0_burstcount           (pb_lwh2f_s0_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (pb_lwh2f_s0_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (pb_lwh2f_s0_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (pb_lwh2f_s0_agent_m0_lock),                                //                .lock
		.m0_readdata             (pb_lwh2f_s0_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (pb_lwh2f_s0_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (pb_lwh2f_s0_agent_m0_read),                                //                .read
		.m0_waitrequest          (pb_lwh2f_s0_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (pb_lwh2f_s0_agent_m0_writedata),                           //                .writedata
		.m0_write                (pb_lwh2f_s0_agent_m0_write),                               //                .write
		.rp_endofpacket          (pb_lwh2f_s0_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (pb_lwh2f_s0_agent_rp_ready),                               //                .ready
		.rp_valid                (pb_lwh2f_s0_agent_rp_valid),                               //                .valid
		.rp_data                 (pb_lwh2f_s0_agent_rp_data),                                //                .data
		.rp_startofpacket        (pb_lwh2f_s0_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (agent_pipeline_006_source0_ready),                         //              cp.ready
		.cp_valid                (agent_pipeline_006_source0_valid),                         //                .valid
		.cp_data                 (agent_pipeline_006_source0_data),                          //                .data
		.cp_startofpacket        (agent_pipeline_006_source0_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (agent_pipeline_006_source0_endofpacket),                   //                .endofpacket
		.cp_channel              (agent_pipeline_006_source0_channel),                       //                .channel
		.rf_sink_ready           (pb_lwh2f_s0_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (pb_lwh2f_s0_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (pb_lwh2f_s0_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (pb_lwh2f_s0_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (pb_lwh2f_s0_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (pb_lwh2f_s0_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (pb_lwh2f_s0_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (pb_lwh2f_s0_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (pb_lwh2f_s0_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (pb_lwh2f_s0_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (pb_lwh2f_s0_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pb_lwh2f_s0_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (pb_lwh2f_s0_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pb_lwh2f_s0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pb_lwh2f_s0_agent_rf_source_data),                         //        in.data
		.in_valid          (pb_lwh2f_s0_agent_rf_source_valid),                        //          .valid
		.in_ready          (pb_lwh2f_s0_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (pb_lwh2f_s0_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (pb_lwh2f_s0_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (pb_lwh2f_s0_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (pb_lwh2f_s0_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (pb_lwh2f_s0_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (pb_lwh2f_s0_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (pb_lwh2f_s0_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pb_lwh2f_s0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pb_lwh2f_s0_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (pb_lwh2f_s0_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (pb_lwh2f_s0_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (pb_lwh2f_s0_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (pb_lwh2f_s0_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (pb_lwh2f_s0_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fmcomms2_spi_ad9361_spi_control_port_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (fmcomms2_spi_ad9361_spi_control_port_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fmcomms2_spi_ad9361_spi_control_port_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fmcomms2_spi_ad9361_spi_control_port_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fmcomms2_spi_ad9361_spi_control_port_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fmcomms2_spi_ad9361_spi_control_port_agent_m0_lock),                    //                .lock
		.m0_readdata             (fmcomms2_spi_ad9361_spi_control_port_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fmcomms2_spi_ad9361_spi_control_port_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fmcomms2_spi_ad9361_spi_control_port_agent_m0_read),                    //                .read
		.m0_waitrequest          (fmcomms2_spi_ad9361_spi_control_port_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fmcomms2_spi_ad9361_spi_control_port_agent_m0_writedata),               //                .writedata
		.m0_write                (fmcomms2_spi_ad9361_spi_control_port_agent_m0_write),                   //                .write
		.rp_endofpacket          (fmcomms2_spi_ad9361_spi_control_port_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fmcomms2_spi_ad9361_spi_control_port_agent_rp_ready),                   //                .ready
		.rp_valid                (fmcomms2_spi_ad9361_spi_control_port_agent_rp_valid),                   //                .valid
		.rp_data                 (fmcomms2_spi_ad9361_spi_control_port_agent_rp_data),                    //                .data
		.rp_startofpacket        (fmcomms2_spi_ad9361_spi_control_port_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_008_source0_ready),                                      //              cp.ready
		.cp_valid                (agent_pipeline_008_source0_valid),                                      //                .valid
		.cp_data                 (agent_pipeline_008_source0_data),                                       //                .data
		.cp_startofpacket        (agent_pipeline_008_source0_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (agent_pipeline_008_source0_endofpacket),                                //                .endofpacket
		.cp_channel              (agent_pipeline_008_source0_channel),                                    //                .channel
		.rf_sink_ready           (fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fmcomms2_spi_ad9361_spi_control_port_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fmcomms2_spi_ad9361_spi_control_port_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fmcomms2_spi_ad9361_spi_control_port_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fmcomms2_spi_ad9361_spi_control_port_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fmcomms2_spi_ad9361_spi_control_port_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (fmcomms2_spi_ad9361_spi_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (fmcomms2_spi_ad9361_spi_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (fmcomms2_spi_ad9361_spi_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fmcomms2_spi_ad9361_spi_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fmcomms2_spi_ad9361_spi_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fmcomms2_spi_ad9361_spi_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                   //       clk.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	ghrd_10as066n2_altera_merlin_router_161_k5cyj4i router (
		.sink_ready         (arria10_hps_h2f_lw_axi_master_agent_write_cp_ready),         //      sink.ready
		.sink_valid         (arria10_hps_h2f_lw_axi_master_agent_write_cp_valid),         //          .valid
		.sink_data          (arria10_hps_h2f_lw_axi_master_agent_write_cp_data),          //          .data
		.sink_startofpacket (arria10_hps_h2f_lw_axi_master_agent_write_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (arria10_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_src_ready),                                           //       src.ready
		.src_valid          (router_src_valid),                                           //          .valid
		.src_data           (router_src_data),                                            //          .data
		.src_channel        (router_src_channel),                                         //          .channel
		.src_startofpacket  (router_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                      //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_cmipw2q router_001 (
		.sink_ready         (arria10_hps_h2f_lw_axi_master_agent_read_cp_ready),         //      sink.ready
		.sink_valid         (arria10_hps_h2f_lw_axi_master_agent_read_cp_valid),         //          .valid
		.sink_data          (arria10_hps_h2f_lw_axi_master_agent_read_cp_data),          //          .data
		.sink_startofpacket (arria10_hps_h2f_lw_axi_master_agent_read_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (arria10_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_001_src_ready),                                      //       src.ready
		.src_valid          (router_001_src_valid),                                      //          .valid
		.src_data           (router_001_src_data),                                       //          .data
		.src_channel        (router_001_src_channel),                                    //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                 //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_mswkbei router_002 (
		.sink_ready         (fpga_m_master_agent_cp_ready),                             //      sink.ready
		.sink_valid         (fpga_m_master_agent_cp_valid),                             //          .valid
		.sink_data          (fpga_m_master_agent_cp_data),                              //          .data
		.sink_startofpacket (fpga_m_master_agent_cp_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (fpga_m_master_agent_cp_endofpacket),                       //          .endofpacket
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                     //       src.ready
		.src_valid          (router_002_src_valid),                                     //          .valid
		.src_data           (router_002_src_data),                                      //          .data
		.src_channel        (router_002_src_channel),                                   //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_b4dw4qi router_003 (
		.sink_ready         (agent_pipeline_002_source0_ready),                           //      sink.ready
		.sink_valid         (agent_pipeline_002_source0_valid),                           //          .valid
		.sink_data          (agent_pipeline_002_source0_data),                            //          .data
		.sink_startofpacket (agent_pipeline_002_source0_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (agent_pipeline_002_source0_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                       //       src.ready
		.src_valid          (router_003_src_valid),                                       //          .valid
		.src_data           (router_003_src_data),                                        //          .data
		.src_channel        (router_003_src_channel),                                     //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                  //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_sgolcmq router_004 (
		.sink_ready         (agent_pipeline_003_source0_ready),                           //      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),                           //          .valid
		.sink_data          (agent_pipeline_003_source0_data),                            //          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                       //       src.ready
		.src_valid          (router_004_src_valid),                                       //          .valid
		.src_data           (router_004_src_data),                                        //          .data
		.src_channel        (router_004_src_channel),                                     //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                  //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_cwrrjzq router_005 (
		.sink_ready         (agent_pipeline_005_source0_ready),                           //      sink.ready
		.sink_valid         (agent_pipeline_005_source0_valid),                           //          .valid
		.sink_data          (agent_pipeline_005_source0_data),                            //          .data
		.sink_startofpacket (agent_pipeline_005_source0_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (agent_pipeline_005_source0_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                       //       src.ready
		.src_valid          (router_005_src_valid),                                       //          .valid
		.src_data           (router_005_src_data),                                        //          .data
		.src_channel        (router_005_src_channel),                                     //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                  //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_4tad2hq router_006 (
		.sink_ready         (agent_pipeline_007_source0_ready),                         //      sink.ready
		.sink_valid         (agent_pipeline_007_source0_valid),                         //          .valid
		.sink_data          (agent_pipeline_007_source0_data),                          //          .data
		.sink_startofpacket (agent_pipeline_007_source0_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (agent_pipeline_007_source0_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                     //       src.ready
		.src_valid          (router_006_src_valid),                                     //          .valid
		.src_data           (router_006_src_data),                                      //          .data
		.src_channel        (router_006_src_channel),                                   //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_cwrrjzq router_007 (
		.sink_ready         (agent_pipeline_009_source0_ready),                           //      sink.ready
		.sink_valid         (agent_pipeline_009_source0_valid),                           //          .valid
		.sink_data          (agent_pipeline_009_source0_data),                            //          .data
		.sink_startofpacket (agent_pipeline_009_source0_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (agent_pipeline_009_source0_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                       //       src.ready
		.src_valid          (router_007_src_valid),                                       //          .valid
		.src_data           (router_007_src_data),                                        //          .data
		.src_channel        (router_007_src_channel),                                     //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                  //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (103),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (101),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (8),
		.PIPELINED                 (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arria10_hps_h2f_lw_axi_master_wr_limiter (
		.clk                    (clk_0_clk_clk),                                                  //       clk.clk
		.reset                  (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                               //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                               //          .valid
		.cmd_sink_data          (router_src_data),                                                //          .data
		.cmd_sink_channel       (router_src_channel),                                             //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                       //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                         //          .endofpacket
		.cmd_src_ready          (arria10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (arria10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (arria10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (arria10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (arria10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (arria10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_valid),         //          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),                             //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),                             //          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),                           //          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),                              //          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),                     //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),                       //          .endofpacket
		.rsp_src_ready          (arria10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (arria10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (arria10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (arria10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (arria10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (arria10_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (103),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (101),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (8),
		.PIPELINED                 (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arria10_hps_h2f_lw_axi_master_rd_limiter (
		.clk                    (clk_0_clk_clk),                                                  //       clk.clk
		.reset                  (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                           //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                           //          .valid
		.cmd_sink_data          (router_001_src_data),                                            //          .data
		.cmd_sink_channel       (router_001_src_channel),                                         //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                   //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                     //          .endofpacket
		.cmd_src_ready          (arria10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (arria10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (arria10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (arria10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (arria10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (arria10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_valid),         //          .valid
		.rsp_sink_ready         (limiter_pipeline_003_source0_ready),                             //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_003_source0_valid),                             //          .valid
		.rsp_sink_channel       (limiter_pipeline_003_source0_channel),                           //          .channel
		.rsp_sink_data          (limiter_pipeline_003_source0_data),                              //          .data
		.rsp_sink_startofpacket (limiter_pipeline_003_source0_startofpacket),                     //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_003_source0_endofpacket),                       //          .endofpacket
		.rsp_src_ready          (arria10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (arria10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (arria10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (arria10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (arria10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (arria10_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fmcomms2_gpio_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                              //       cr0.clk
		.reset                 (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                      //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                       //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                    //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                      //          .ready
		.source0_valid         (fmcomms2_gpio_s1_burst_adapter_source0_valid),               //   source0.valid
		.source0_data          (fmcomms2_gpio_s1_burst_adapter_source0_data),                //          .data
		.source0_channel       (fmcomms2_gpio_s1_burst_adapter_source0_channel),             //          .channel
		.source0_startofpacket (fmcomms2_gpio_s1_burst_adapter_source0_startofpacket),       //          .startofpacket
		.source0_endofpacket   (fmcomms2_gpio_s1_burst_adapter_source0_endofpacket),         //          .endofpacket
		.source0_ready         (fmcomms2_gpio_s1_burst_adapter_source0_ready)                //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pb_lwh2f_s0_burst_adapter (
		.clk                   (clk_0_clk_clk),                                            //       cr0.clk
		.reset                 (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                    //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                     //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                  //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                              //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                    //          .ready
		.source0_valid         (pb_lwh2f_s0_burst_adapter_source0_valid),                  //   source0.valid
		.source0_data          (pb_lwh2f_s0_burst_adapter_source0_data),                   //          .data
		.source0_channel       (pb_lwh2f_s0_burst_adapter_source0_channel),                //          .channel
		.source0_startofpacket (pb_lwh2f_s0_burst_adapter_source0_startofpacket),          //          .startofpacket
		.source0_endofpacket   (pb_lwh2f_s0_burst_adapter_source0_endofpacket),            //          .endofpacket
		.source0_ready         (pb_lwh2f_s0_burst_adapter_source0_ready)                   //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fmcomms2_spi_ad9361_spi_control_port_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                            //       cr0.clk
		.reset                 (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                                    //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                                     //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                                  //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                                              //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                                    //          .ready
		.source0_valid         (fmcomms2_spi_ad9361_spi_control_port_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fmcomms2_spi_ad9361_spi_control_port_burst_adapter_source0_data),          //          .data
		.source0_channel       (fmcomms2_spi_ad9361_spi_control_port_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fmcomms2_spi_ad9361_spi_control_port_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fmcomms2_spi_ad9361_spi_control_port_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fmcomms2_spi_ad9361_spi_control_port_burst_adapter_source0_ready)          //          .ready
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_tkknnwy cmd_demux (
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (limiter_pipeline_source0_ready),                           //      sink.ready
		.sink_channel       (limiter_pipeline_source0_channel),                         //          .channel
		.sink_data          (limiter_pipeline_source0_data),                            //          .data
		.sink_startofpacket (limiter_pipeline_source0_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_source0_endofpacket),                     //          .endofpacket
		.sink_valid         (limiter_pipeline_source0_valid),                           //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                     //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                     //          .valid
		.src0_data          (cmd_demux_src0_data),                                      //          .data
		.src0_channel       (cmd_demux_src0_channel),                                   //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                               //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                     //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                     //          .valid
		.src1_data          (cmd_demux_src1_data),                                      //          .data
		.src1_channel       (cmd_demux_src1_channel),                                   //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                             //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                               //          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                     //      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                     //          .valid
		.src2_data          (cmd_demux_src2_data),                                      //          .data
		.src2_channel       (cmd_demux_src2_channel),                                   //          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                             //          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                               //          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                     //      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                     //          .valid
		.src3_data          (cmd_demux_src3_data),                                      //          .data
		.src3_channel       (cmd_demux_src3_channel),                                   //          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                             //          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket)                                //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_tkknnwy cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (limiter_pipeline_002_source0_ready),                       //      sink.ready
		.sink_channel       (limiter_pipeline_002_source0_channel),                     //          .channel
		.sink_data          (limiter_pipeline_002_source0_data),                        //          .data
		.sink_startofpacket (limiter_pipeline_002_source0_startofpacket),               //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_002_source0_endofpacket),                 //          .endofpacket
		.sink_valid         (limiter_pipeline_002_source0_valid),                       //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                 //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                 //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                  //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                               //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                         //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                           //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                 //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                 //          .valid
		.src1_data          (cmd_demux_001_src1_data),                                  //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                               //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                         //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                           //          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                 //      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                 //          .valid
		.src2_data          (cmd_demux_001_src2_data),                                  //          .data
		.src2_channel       (cmd_demux_001_src2_channel),                               //          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                         //          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                           //          .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                                 //      src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                                 //          .valid
		.src3_data          (cmd_demux_001_src3_data),                                  //          .data
		.src3_channel       (cmd_demux_001_src3_channel),                               //          .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                         //          .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket)                            //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_g6ro4ai cmd_demux_002 (
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                     //      sink.ready
		.sink_channel       (router_002_src_channel),                                   //          .channel
		.sink_data          (router_002_src_data),                                      //          .data
		.sink_startofpacket (router_002_src_startofpacket),                             //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                               //          .endofpacket
		.sink_valid         (router_002_src_valid),                                     //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                                 //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                 //          .valid
		.src0_data          (cmd_demux_002_src0_data),                                  //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                               //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                         //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                            //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_2eajr7q cmd_mux (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                          //       src.ready
		.src_valid           (cmd_mux_src_valid),                                          //          .valid
		.src_data            (cmd_mux_src_data),                                           //          .data
		.src_channel         (cmd_mux_src_channel),                                        //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                    //          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                                 //     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                                 //          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                               //          .channel
		.sink0_data          (mux_pipeline_source0_data),                                  //          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket)                            //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_2eajr7q cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                      //          .valid
		.src_data            (cmd_mux_001_src_data),                                       //          .data
		.src_channel         (cmd_mux_001_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (mux_pipeline_001_source0_ready),                             //     sink0.ready
		.sink0_valid         (mux_pipeline_001_source0_valid),                             //          .valid
		.sink0_channel       (mux_pipeline_001_source0_channel),                           //          .channel
		.sink0_data          (mux_pipeline_001_source0_data),                              //          .data
		.sink0_startofpacket (mux_pipeline_001_source0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_001_source0_endofpacket)                        //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_xweuyaa cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                      //          .valid
		.src_data            (cmd_mux_002_src_data),                                       //          .data
		.src_channel         (cmd_mux_002_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (mux_pipeline_002_source0_ready),                             //     sink0.ready
		.sink0_valid         (mux_pipeline_002_source0_valid),                             //          .valid
		.sink0_channel       (mux_pipeline_002_source0_channel),                           //          .channel
		.sink0_data          (mux_pipeline_002_source0_data),                              //          .data
		.sink0_startofpacket (mux_pipeline_002_source0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_002_source0_endofpacket),                       //          .endofpacket
		.sink1_ready         (mux_pipeline_003_source0_ready),                             //     sink1.ready
		.sink1_valid         (mux_pipeline_003_source0_valid),                             //          .valid
		.sink1_channel       (mux_pipeline_003_source0_channel),                           //          .channel
		.sink1_data          (mux_pipeline_003_source0_data),                              //          .data
		.sink1_startofpacket (mux_pipeline_003_source0_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_003_source0_endofpacket)                        //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_yleiyny cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                            //       clk.clk
		.reset               (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                    //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                    //          .valid
		.src_data            (cmd_mux_003_src_data),                                     //          .data
		.src_channel         (cmd_mux_003_src_channel),                                  //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                            //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                              //          .endofpacket
		.sink0_ready         (mux_pipeline_004_source0_ready),                           //     sink0.ready
		.sink0_valid         (mux_pipeline_004_source0_valid),                           //          .valid
		.sink0_channel       (mux_pipeline_004_source0_channel),                         //          .channel
		.sink0_data          (mux_pipeline_004_source0_data),                            //          .data
		.sink0_startofpacket (mux_pipeline_004_source0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_004_source0_endofpacket),                     //          .endofpacket
		.sink1_ready         (mux_pipeline_005_source0_ready),                           //     sink1.ready
		.sink1_valid         (mux_pipeline_005_source0_valid),                           //          .valid
		.sink1_channel       (mux_pipeline_005_source0_channel),                         //          .channel
		.sink1_data          (mux_pipeline_005_source0_data),                            //          .data
		.sink1_startofpacket (mux_pipeline_005_source0_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_005_source0_endofpacket),                     //          .endofpacket
		.sink2_ready         (mux_pipeline_006_source0_ready),                           //     sink2.ready
		.sink2_valid         (mux_pipeline_006_source0_valid),                           //          .valid
		.sink2_channel       (mux_pipeline_006_source0_channel),                         //          .channel
		.sink2_data          (mux_pipeline_006_source0_data),                            //          .data
		.sink2_startofpacket (mux_pipeline_006_source0_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (mux_pipeline_006_source0_endofpacket)                      //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_xweuyaa cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                      //          .valid
		.src_data            (cmd_mux_004_src_data),                                       //          .data
		.src_channel         (cmd_mux_004_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (mux_pipeline_007_source0_ready),                             //     sink0.ready
		.sink0_valid         (mux_pipeline_007_source0_valid),                             //          .valid
		.sink0_channel       (mux_pipeline_007_source0_channel),                           //          .channel
		.sink0_data          (mux_pipeline_007_source0_data),                              //          .data
		.sink0_startofpacket (mux_pipeline_007_source0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_007_source0_endofpacket),                       //          .endofpacket
		.sink1_ready         (mux_pipeline_008_source0_ready),                             //     sink1.ready
		.sink1_valid         (mux_pipeline_008_source0_valid),                             //          .valid
		.sink1_channel       (mux_pipeline_008_source0_channel),                           //          .channel
		.sink1_data          (mux_pipeline_008_source0_data),                              //          .data
		.sink1_startofpacket (mux_pipeline_008_source0_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_008_source0_endofpacket)                        //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_g6ro4ai rsp_demux (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                       //      sink.ready
		.sink_channel       (router_003_src_channel),                                     //          .channel
		.sink_data          (router_003_src_data),                                        //          .data
		.sink_startofpacket (router_003_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_003_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                       //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                       //          .valid
		.src0_data          (rsp_demux_src0_data),                                        //          .data
		.src0_channel       (rsp_demux_src0_channel),                                     //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                               //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                  //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_g6ro4ai rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                       //      sink.ready
		.sink_channel       (router_004_src_channel),                                     //          .channel
		.sink_data          (router_004_src_data),                                        //          .data
		.sink_startofpacket (router_004_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_004_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                              //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_tnqphuy rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                       //      sink.ready
		.sink_channel       (router_005_src_channel),                                     //          .channel
		.sink_data          (router_005_src_data),                                        //          .data
		.sink_startofpacket (router_005_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_005_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                             //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                                   //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                                   //          .valid
		.src1_data          (rsp_demux_002_src1_data),                                    //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                                 //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                           //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                              //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_xdfrsdq rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                     //      sink.ready
		.sink_channel       (router_006_src_channel),                                   //          .channel
		.sink_data          (router_006_src_data),                                      //          .data
		.sink_startofpacket (router_006_src_startofpacket),                             //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                               //          .endofpacket
		.sink_valid         (router_006_src_valid),                                     //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                 //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                 //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                  //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                               //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                           //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                                 //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                                 //          .valid
		.src1_data          (rsp_demux_003_src1_data),                                  //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                               //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket),                           //          .endofpacket
		.src2_ready         (rsp_demux_003_src2_ready),                                 //      src2.ready
		.src2_valid         (rsp_demux_003_src2_valid),                                 //          .valid
		.src2_data          (rsp_demux_003_src2_data),                                  //          .data
		.src2_channel       (rsp_demux_003_src2_channel),                               //          .channel
		.src2_startofpacket (rsp_demux_003_src2_startofpacket),                         //          .startofpacket
		.src2_endofpacket   (rsp_demux_003_src2_endofpacket)                            //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_tnqphuy rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                       //      sink.ready
		.sink_channel       (router_007_src_channel),                                     //          .channel
		.sink_data          (router_007_src_data),                                        //          .data
		.sink_startofpacket (router_007_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_007_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                             //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                                   //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                                   //          .valid
		.src1_data          (rsp_demux_004_src1_data),                                    //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                                 //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                           //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                              //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_opr7r5q rsp_mux (
		.clk                 (clk_0_clk_clk),                                            //       clk.clk
		.reset               (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                        //       src.ready
		.src_valid           (rsp_mux_src_valid),                                        //          .valid
		.src_data            (rsp_mux_src_data),                                         //          .data
		.src_channel         (rsp_mux_src_channel),                                      //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_009_source0_ready),                           //     sink0.ready
		.sink0_valid         (mux_pipeline_009_source0_valid),                           //          .valid
		.sink0_channel       (mux_pipeline_009_source0_channel),                         //          .channel
		.sink0_data          (mux_pipeline_009_source0_data),                            //          .data
		.sink0_startofpacket (mux_pipeline_009_source0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_009_source0_endofpacket),                     //          .endofpacket
		.sink1_ready         (mux_pipeline_010_source0_ready),                           //     sink1.ready
		.sink1_valid         (mux_pipeline_010_source0_valid),                           //          .valid
		.sink1_channel       (mux_pipeline_010_source0_channel),                         //          .channel
		.sink1_data          (mux_pipeline_010_source0_data),                            //          .data
		.sink1_startofpacket (mux_pipeline_010_source0_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_010_source0_endofpacket),                     //          .endofpacket
		.sink2_ready         (mux_pipeline_011_source0_ready),                           //     sink2.ready
		.sink2_valid         (mux_pipeline_011_source0_valid),                           //          .valid
		.sink2_channel       (mux_pipeline_011_source0_channel),                         //          .channel
		.sink2_data          (mux_pipeline_011_source0_data),                            //          .data
		.sink2_startofpacket (mux_pipeline_011_source0_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (mux_pipeline_011_source0_endofpacket),                     //          .endofpacket
		.sink3_ready         (mux_pipeline_012_source0_ready),                           //     sink3.ready
		.sink3_valid         (mux_pipeline_012_source0_valid),                           //          .valid
		.sink3_channel       (mux_pipeline_012_source0_channel),                         //          .channel
		.sink3_data          (mux_pipeline_012_source0_data),                            //          .data
		.sink3_startofpacket (mux_pipeline_012_source0_startofpacket),                   //          .startofpacket
		.sink3_endofpacket   (mux_pipeline_012_source0_endofpacket)                      //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_opr7r5q rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                            //       clk.clk
		.reset               (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                    //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                    //          .valid
		.src_data            (rsp_mux_001_src_data),                                     //          .data
		.src_channel         (rsp_mux_001_src_channel),                                  //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                            //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                              //          .endofpacket
		.sink0_ready         (mux_pipeline_013_source0_ready),                           //     sink0.ready
		.sink0_valid         (mux_pipeline_013_source0_valid),                           //          .valid
		.sink0_channel       (mux_pipeline_013_source0_channel),                         //          .channel
		.sink0_data          (mux_pipeline_013_source0_data),                            //          .data
		.sink0_startofpacket (mux_pipeline_013_source0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_013_source0_endofpacket),                     //          .endofpacket
		.sink1_ready         (mux_pipeline_014_source0_ready),                           //     sink1.ready
		.sink1_valid         (mux_pipeline_014_source0_valid),                           //          .valid
		.sink1_channel       (mux_pipeline_014_source0_channel),                         //          .channel
		.sink1_data          (mux_pipeline_014_source0_data),                            //          .data
		.sink1_startofpacket (mux_pipeline_014_source0_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_014_source0_endofpacket),                     //          .endofpacket
		.sink2_ready         (mux_pipeline_015_source0_ready),                           //     sink2.ready
		.sink2_valid         (mux_pipeline_015_source0_valid),                           //          .valid
		.sink2_channel       (mux_pipeline_015_source0_channel),                         //          .channel
		.sink2_data          (mux_pipeline_015_source0_data),                            //          .data
		.sink2_startofpacket (mux_pipeline_015_source0_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (mux_pipeline_015_source0_endofpacket),                     //          .endofpacket
		.sink3_ready         (mux_pipeline_016_source0_ready),                           //     sink3.ready
		.sink3_valid         (mux_pipeline_016_source0_valid),                           //          .valid
		.sink3_channel       (mux_pipeline_016_source0_channel),                         //          .channel
		.sink3_data          (mux_pipeline_016_source0_data),                            //          .data
		.sink3_startofpacket (mux_pipeline_016_source0_startofpacket),                   //          .startofpacket
		.sink3_endofpacket   (mux_pipeline_016_source0_endofpacket)                      //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_tgym4hy rsp_mux_002 (
		.clk                 (clk_0_clk_clk),                                            //       clk.clk
		.reset               (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                    //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                    //          .valid
		.src_data            (rsp_mux_002_src_data),                                     //          .data
		.src_channel         (rsp_mux_002_src_channel),                                  //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                            //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                              //          .endofpacket
		.sink0_ready         (mux_pipeline_017_source0_ready),                           //     sink0.ready
		.sink0_valid         (mux_pipeline_017_source0_valid),                           //          .valid
		.sink0_channel       (mux_pipeline_017_source0_channel),                         //          .channel
		.sink0_data          (mux_pipeline_017_source0_data),                            //          .data
		.sink0_startofpacket (mux_pipeline_017_source0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_017_source0_endofpacket)                      //          .endofpacket
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline (
		.clk               (clk_0_clk_clk),                                                  //       cr0.clk
		.reset             (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.in_ready          (arria10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),         //     sink0.ready
		.in_valid          (arria10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_valid),         //          .valid
		.in_startofpacket  (arria10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket), //          .startofpacket
		.in_endofpacket    (arria10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),   //          .endofpacket
		.in_data           (arria10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),          //          .data
		.in_channel        (arria10_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),       //          .channel
		.out_ready         (limiter_pipeline_source0_ready),                                 //   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                                 //          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),                         //          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),                           //          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                                  //          .data
		.out_channel       (limiter_pipeline_source0_channel),                               //          .channel
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_error          (1'b0)                                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_001 (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_mux_src_ready),                                        //     sink0.ready
		.in_valid          (rsp_mux_src_valid),                                        //          .valid
		.in_startofpacket  (rsp_mux_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (rsp_mux_src_endofpacket),                                  //          .endofpacket
		.in_data           (rsp_mux_src_data),                                         //          .data
		.in_channel        (rsp_mux_src_channel),                                      //          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),                       //   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),                       //          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),                 //          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),                        //          .data
		.out_channel       (limiter_pipeline_001_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_002 (
		.clk               (clk_0_clk_clk),                                                  //       cr0.clk
		.reset             (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.in_ready          (arria10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),         //     sink0.ready
		.in_valid          (arria10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_valid),         //          .valid
		.in_startofpacket  (arria10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket), //          .startofpacket
		.in_endofpacket    (arria10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),   //          .endofpacket
		.in_data           (arria10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),          //          .data
		.in_channel        (arria10_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),       //          .channel
		.out_ready         (limiter_pipeline_002_source0_ready),                             //   source0.ready
		.out_valid         (limiter_pipeline_002_source0_valid),                             //          .valid
		.out_startofpacket (limiter_pipeline_002_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (limiter_pipeline_002_source0_endofpacket),                       //          .endofpacket
		.out_data          (limiter_pipeline_002_source0_data),                              //          .data
		.out_channel       (limiter_pipeline_002_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_error          (1'b0)                                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_003 (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_mux_001_src_ready),                                    //     sink0.ready
		.in_valid          (rsp_mux_001_src_valid),                                    //          .valid
		.in_startofpacket  (rsp_mux_001_src_startofpacket),                            //          .startofpacket
		.in_endofpacket    (rsp_mux_001_src_endofpacket),                              //          .endofpacket
		.in_data           (rsp_mux_001_src_data),                                     //          .data
		.in_channel        (rsp_mux_001_src_channel),                                  //          .channel
		.out_ready         (limiter_pipeline_003_source0_ready),                       //   source0.ready
		.out_valid         (limiter_pipeline_003_source0_valid),                       //          .valid
		.out_startofpacket (limiter_pipeline_003_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (limiter_pipeline_003_source0_endofpacket),                 //          .endofpacket
		.out_data          (limiter_pipeline_003_source0_data),                        //          .data
		.out_channel       (limiter_pipeline_003_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_src_ready),                                          //     sink0.ready
		.in_valid          (cmd_mux_src_valid),                                          //          .valid
		.in_startofpacket  (cmd_mux_src_startofpacket),                                  //          .startofpacket
		.in_endofpacket    (cmd_mux_src_endofpacket),                                    //          .endofpacket
		.in_data           (cmd_mux_src_data),                                           //          .data
		.in_channel        (cmd_mux_src_channel),                                        //          .channel
		.out_ready         (agent_pipeline_source0_ready),                               //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                               //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                         //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                                //          .data
		.out_channel       (agent_pipeline_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_001_src_ready),                                      //     sink0.ready
		.in_valid          (cmd_mux_001_src_valid),                                      //          .valid
		.in_startofpacket  (cmd_mux_001_src_startofpacket),                              //          .startofpacket
		.in_endofpacket    (cmd_mux_001_src_endofpacket),                                //          .endofpacket
		.in_data           (cmd_mux_001_src_data),                                       //          .data
		.in_channel        (cmd_mux_001_src_channel),                                    //          .channel
		.out_ready         (agent_pipeline_001_source0_ready),                           //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                           //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),                     //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                            //          .data
		.out_channel       (agent_pipeline_001_source0_channel),                         //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_002 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (sys_cpu_interconnect_s0_agent_write_rp_ready),               //     sink0.ready
		.in_valid          (sys_cpu_interconnect_s0_agent_write_rp_valid),               //          .valid
		.in_startofpacket  (sys_cpu_interconnect_s0_agent_write_rp_startofpacket),       //          .startofpacket
		.in_endofpacket    (sys_cpu_interconnect_s0_agent_write_rp_endofpacket),         //          .endofpacket
		.in_data           (sys_cpu_interconnect_s0_agent_write_rp_data),                //          .data
		.out_ready         (agent_pipeline_002_source0_ready),                           //   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),                           //          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),                     //          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),                            //          .data
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_channel       (),                                                           // (terminated)
		.in_channel        (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_003 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (sys_cpu_interconnect_s0_agent_read_rp_ready),                //     sink0.ready
		.in_valid          (sys_cpu_interconnect_s0_agent_read_rp_valid),                //          .valid
		.in_startofpacket  (sys_cpu_interconnect_s0_agent_read_rp_startofpacket),        //          .startofpacket
		.in_endofpacket    (sys_cpu_interconnect_s0_agent_read_rp_endofpacket),          //          .endofpacket
		.in_data           (sys_cpu_interconnect_s0_agent_read_rp_data),                 //          .data
		.out_ready         (agent_pipeline_003_source0_ready),                           //   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),                           //          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),                     //          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),                            //          .data
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_channel       (),                                                           // (terminated)
		.in_channel        (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_004 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (fmcomms2_gpio_s1_burst_adapter_source0_ready),               //     sink0.ready
		.in_valid          (fmcomms2_gpio_s1_burst_adapter_source0_valid),               //          .valid
		.in_startofpacket  (fmcomms2_gpio_s1_burst_adapter_source0_startofpacket),       //          .startofpacket
		.in_endofpacket    (fmcomms2_gpio_s1_burst_adapter_source0_endofpacket),         //          .endofpacket
		.in_data           (fmcomms2_gpio_s1_burst_adapter_source0_data),                //          .data
		.in_channel        (fmcomms2_gpio_s1_burst_adapter_source0_channel),             //          .channel
		.out_ready         (agent_pipeline_004_source0_ready),                           //   source0.ready
		.out_valid         (agent_pipeline_004_source0_valid),                           //          .valid
		.out_startofpacket (agent_pipeline_004_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (agent_pipeline_004_source0_endofpacket),                     //          .endofpacket
		.out_data          (agent_pipeline_004_source0_data),                            //          .data
		.out_channel       (agent_pipeline_004_source0_channel),                         //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_005 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (fmcomms2_gpio_s1_agent_rp_ready),                            //     sink0.ready
		.in_valid          (fmcomms2_gpio_s1_agent_rp_valid),                            //          .valid
		.in_startofpacket  (fmcomms2_gpio_s1_agent_rp_startofpacket),                    //          .startofpacket
		.in_endofpacket    (fmcomms2_gpio_s1_agent_rp_endofpacket),                      //          .endofpacket
		.in_data           (fmcomms2_gpio_s1_agent_rp_data),                             //          .data
		.out_ready         (agent_pipeline_005_source0_ready),                           //   source0.ready
		.out_valid         (agent_pipeline_005_source0_valid),                           //          .valid
		.out_startofpacket (agent_pipeline_005_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (agent_pipeline_005_source0_endofpacket),                     //          .endofpacket
		.out_data          (agent_pipeline_005_source0_data),                            //          .data
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_channel       (),                                                           // (terminated)
		.in_channel        (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_006 (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (pb_lwh2f_s0_burst_adapter_source0_ready),                  //     sink0.ready
		.in_valid          (pb_lwh2f_s0_burst_adapter_source0_valid),                  //          .valid
		.in_startofpacket  (pb_lwh2f_s0_burst_adapter_source0_startofpacket),          //          .startofpacket
		.in_endofpacket    (pb_lwh2f_s0_burst_adapter_source0_endofpacket),            //          .endofpacket
		.in_data           (pb_lwh2f_s0_burst_adapter_source0_data),                   //          .data
		.in_channel        (pb_lwh2f_s0_burst_adapter_source0_channel),                //          .channel
		.out_ready         (agent_pipeline_006_source0_ready),                         //   source0.ready
		.out_valid         (agent_pipeline_006_source0_valid),                         //          .valid
		.out_startofpacket (agent_pipeline_006_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (agent_pipeline_006_source0_endofpacket),                   //          .endofpacket
		.out_data          (agent_pipeline_006_source0_data),                          //          .data
		.out_channel       (agent_pipeline_006_source0_channel),                       //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_007 (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (pb_lwh2f_s0_agent_rp_ready),                               //     sink0.ready
		.in_valid          (pb_lwh2f_s0_agent_rp_valid),                               //          .valid
		.in_startofpacket  (pb_lwh2f_s0_agent_rp_startofpacket),                       //          .startofpacket
		.in_endofpacket    (pb_lwh2f_s0_agent_rp_endofpacket),                         //          .endofpacket
		.in_data           (pb_lwh2f_s0_agent_rp_data),                                //          .data
		.out_ready         (agent_pipeline_007_source0_ready),                         //   source0.ready
		.out_valid         (agent_pipeline_007_source0_valid),                         //          .valid
		.out_startofpacket (agent_pipeline_007_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (agent_pipeline_007_source0_endofpacket),                   //          .endofpacket
		.out_data          (agent_pipeline_007_source0_data),                          //          .data
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_channel       (),                                                         // (terminated)
		.in_channel        (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_008 (
		.clk               (clk_0_clk_clk),                                                            //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.in_ready          (fmcomms2_spi_ad9361_spi_control_port_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (fmcomms2_spi_ad9361_spi_control_port_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (fmcomms2_spi_ad9361_spi_control_port_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (fmcomms2_spi_ad9361_spi_control_port_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (fmcomms2_spi_ad9361_spi_control_port_burst_adapter_source0_data),          //          .data
		.in_channel        (fmcomms2_spi_ad9361_spi_control_port_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_008_source0_ready),                                         //   source0.ready
		.out_valid         (agent_pipeline_008_source0_valid),                                         //          .valid
		.out_startofpacket (agent_pipeline_008_source0_startofpacket),                                 //          .startofpacket
		.out_endofpacket   (agent_pipeline_008_source0_endofpacket),                                   //          .endofpacket
		.out_data          (agent_pipeline_008_source0_data),                                          //          .data
		.out_channel       (agent_pipeline_008_source0_channel),                                       //          .channel
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_error          (1'b0)                                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_009 (
		.clk               (clk_0_clk_clk),                                               //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (fmcomms2_spi_ad9361_spi_control_port_agent_rp_ready),         //     sink0.ready
		.in_valid          (fmcomms2_spi_ad9361_spi_control_port_agent_rp_valid),         //          .valid
		.in_startofpacket  (fmcomms2_spi_ad9361_spi_control_port_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (fmcomms2_spi_ad9361_spi_control_port_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (fmcomms2_spi_ad9361_spi_control_port_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_009_source0_ready),                            //   source0.ready
		.out_valid         (agent_pipeline_009_source0_valid),                            //          .valid
		.out_startofpacket (agent_pipeline_009_source0_startofpacket),                    //          .startofpacket
		.out_endofpacket   (agent_pipeline_009_source0_endofpacket),                      //          .endofpacket
		.out_data          (agent_pipeline_009_source0_data),                             //          .data
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_channel       (),                                                            // (terminated)
		.in_channel        (1'b0)                                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                       //     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                                       //          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                               //          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                 //          .endofpacket
		.in_data           (cmd_demux_src0_data),                                        //          .data
		.in_channel        (cmd_demux_src0_channel),                                     //          .channel
		.out_ready         (mux_pipeline_source0_ready),                                 //   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                                 //          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),                         //          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),                           //          .endofpacket
		.out_data          (mux_pipeline_source0_data),                                  //          .data
		.out_channel       (mux_pipeline_source0_channel),                               //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_001 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                   //     sink0.ready
		.in_valid          (cmd_demux_001_src0_valid),                                   //          .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                           //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                             //          .endofpacket
		.in_data           (cmd_demux_001_src0_data),                                    //          .data
		.in_channel        (cmd_demux_001_src0_channel),                                 //          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                             //   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                             //          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),                       //          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                              //          .data
		.out_channel       (mux_pipeline_001_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_002 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                       //     sink0.ready
		.in_valid          (cmd_demux_src1_valid),                                       //          .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                               //          .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                                 //          .endofpacket
		.in_data           (cmd_demux_src1_data),                                        //          .data
		.in_channel        (cmd_demux_src1_channel),                                     //          .channel
		.out_ready         (mux_pipeline_002_source0_ready),                             //   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),                             //          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),                       //          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),                              //          .data
		.out_channel       (mux_pipeline_002_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_003 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                                   //     sink0.ready
		.in_valid          (cmd_demux_001_src1_valid),                                   //          .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),                           //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),                             //          .endofpacket
		.in_data           (cmd_demux_001_src1_data),                                    //          .data
		.in_channel        (cmd_demux_001_src1_channel),                                 //          .channel
		.out_ready         (mux_pipeline_003_source0_ready),                             //   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),                             //          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),                       //          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),                              //          .data
		.out_channel       (mux_pipeline_003_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_004 (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src2_ready),                                     //     sink0.ready
		.in_valid          (cmd_demux_src2_valid),                                     //          .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                             //          .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                               //          .endofpacket
		.in_data           (cmd_demux_src2_data),                                      //          .data
		.in_channel        (cmd_demux_src2_channel),                                   //          .channel
		.out_ready         (mux_pipeline_004_source0_ready),                           //   source0.ready
		.out_valid         (mux_pipeline_004_source0_valid),                           //          .valid
		.out_startofpacket (mux_pipeline_004_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (mux_pipeline_004_source0_endofpacket),                     //          .endofpacket
		.out_data          (mux_pipeline_004_source0_data),                            //          .data
		.out_channel       (mux_pipeline_004_source0_channel),                         //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_005 (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src2_ready),                                 //     sink0.ready
		.in_valid          (cmd_demux_001_src2_valid),                                 //          .valid
		.in_startofpacket  (cmd_demux_001_src2_startofpacket),                         //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src2_endofpacket),                           //          .endofpacket
		.in_data           (cmd_demux_001_src2_data),                                  //          .data
		.in_channel        (cmd_demux_001_src2_channel),                               //          .channel
		.out_ready         (mux_pipeline_005_source0_ready),                           //   source0.ready
		.out_valid         (mux_pipeline_005_source0_valid),                           //          .valid
		.out_startofpacket (mux_pipeline_005_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (mux_pipeline_005_source0_endofpacket),                     //          .endofpacket
		.out_data          (mux_pipeline_005_source0_data),                            //          .data
		.out_channel       (mux_pipeline_005_source0_channel),                         //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_006 (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_002_src0_ready),                                 //     sink0.ready
		.in_valid          (cmd_demux_002_src0_valid),                                 //          .valid
		.in_startofpacket  (cmd_demux_002_src0_startofpacket),                         //          .startofpacket
		.in_endofpacket    (cmd_demux_002_src0_endofpacket),                           //          .endofpacket
		.in_data           (cmd_demux_002_src0_data),                                  //          .data
		.in_channel        (cmd_demux_002_src0_channel),                               //          .channel
		.out_ready         (mux_pipeline_006_source0_ready),                           //   source0.ready
		.out_valid         (mux_pipeline_006_source0_valid),                           //          .valid
		.out_startofpacket (mux_pipeline_006_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (mux_pipeline_006_source0_endofpacket),                     //          .endofpacket
		.out_data          (mux_pipeline_006_source0_data),                            //          .data
		.out_channel       (mux_pipeline_006_source0_channel),                         //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_007 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src3_ready),                                       //     sink0.ready
		.in_valid          (cmd_demux_src3_valid),                                       //          .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                               //          .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                                 //          .endofpacket
		.in_data           (cmd_demux_src3_data),                                        //          .data
		.in_channel        (cmd_demux_src3_channel),                                     //          .channel
		.out_ready         (mux_pipeline_007_source0_ready),                             //   source0.ready
		.out_valid         (mux_pipeline_007_source0_valid),                             //          .valid
		.out_startofpacket (mux_pipeline_007_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (mux_pipeline_007_source0_endofpacket),                       //          .endofpacket
		.out_data          (mux_pipeline_007_source0_data),                              //          .data
		.out_channel       (mux_pipeline_007_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_008 (
		.clk               (clk_0_clk_clk),                                              //       cr0.clk
		.reset             (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src3_ready),                                   //     sink0.ready
		.in_valid          (cmd_demux_001_src3_valid),                                   //          .valid
		.in_startofpacket  (cmd_demux_001_src3_startofpacket),                           //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src3_endofpacket),                             //          .endofpacket
		.in_data           (cmd_demux_001_src3_data),                                    //          .data
		.in_channel        (cmd_demux_001_src3_channel),                                 //          .channel
		.out_ready         (mux_pipeline_008_source0_ready),                             //   source0.ready
		.out_valid         (mux_pipeline_008_source0_valid),                             //          .valid
		.out_startofpacket (mux_pipeline_008_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (mux_pipeline_008_source0_endofpacket),                       //          .endofpacket
		.out_data          (mux_pipeline_008_source0_data),                              //          .data
		.out_channel       (mux_pipeline_008_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_009 (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                     //     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                                     //          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                             //          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                               //          .endofpacket
		.in_data           (rsp_demux_src0_data),                                      //          .data
		.in_channel        (rsp_demux_src0_channel),                                   //          .channel
		.out_ready         (mux_pipeline_009_source0_ready),                           //   source0.ready
		.out_valid         (mux_pipeline_009_source0_valid),                           //          .valid
		.out_startofpacket (mux_pipeline_009_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (mux_pipeline_009_source0_endofpacket),                     //          .endofpacket
		.out_data          (mux_pipeline_009_source0_data),                            //          .data
		.out_channel       (mux_pipeline_009_source0_channel),                         //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_010 (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                                 //     sink0.ready
		.in_valid          (rsp_demux_002_src0_valid),                                 //          .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                         //          .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                           //          .endofpacket
		.in_data           (rsp_demux_002_src0_data),                                  //          .data
		.in_channel        (rsp_demux_002_src0_channel),                               //          .channel
		.out_ready         (mux_pipeline_010_source0_ready),                           //   source0.ready
		.out_valid         (mux_pipeline_010_source0_valid),                           //          .valid
		.out_startofpacket (mux_pipeline_010_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (mux_pipeline_010_source0_endofpacket),                     //          .endofpacket
		.out_data          (mux_pipeline_010_source0_data),                            //          .data
		.out_channel       (mux_pipeline_010_source0_channel),                         //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_011 (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                                 //     sink0.ready
		.in_valid          (rsp_demux_003_src0_valid),                                 //          .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                         //          .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                           //          .endofpacket
		.in_data           (rsp_demux_003_src0_data),                                  //          .data
		.in_channel        (rsp_demux_003_src0_channel),                               //          .channel
		.out_ready         (mux_pipeline_011_source0_ready),                           //   source0.ready
		.out_valid         (mux_pipeline_011_source0_valid),                           //          .valid
		.out_startofpacket (mux_pipeline_011_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (mux_pipeline_011_source0_endofpacket),                     //          .endofpacket
		.out_data          (mux_pipeline_011_source0_data),                            //          .data
		.out_channel       (mux_pipeline_011_source0_channel),                         //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_012 (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                                 //     sink0.ready
		.in_valid          (rsp_demux_004_src0_valid),                                 //          .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                         //          .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                           //          .endofpacket
		.in_data           (rsp_demux_004_src0_data),                                  //          .data
		.in_channel        (rsp_demux_004_src0_channel),                               //          .channel
		.out_ready         (mux_pipeline_012_source0_ready),                           //   source0.ready
		.out_valid         (mux_pipeline_012_source0_valid),                           //          .valid
		.out_startofpacket (mux_pipeline_012_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (mux_pipeline_012_source0_endofpacket),                     //          .endofpacket
		.out_data          (mux_pipeline_012_source0_data),                            //          .data
		.out_channel       (mux_pipeline_012_source0_channel),                         //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_013 (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                 //     sink0.ready
		.in_valid          (rsp_demux_001_src0_valid),                                 //          .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                         //          .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                           //          .endofpacket
		.in_data           (rsp_demux_001_src0_data),                                  //          .data
		.in_channel        (rsp_demux_001_src0_channel),                               //          .channel
		.out_ready         (mux_pipeline_013_source0_ready),                           //   source0.ready
		.out_valid         (mux_pipeline_013_source0_valid),                           //          .valid
		.out_startofpacket (mux_pipeline_013_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (mux_pipeline_013_source0_endofpacket),                     //          .endofpacket
		.out_data          (mux_pipeline_013_source0_data),                            //          .data
		.out_channel       (mux_pipeline_013_source0_channel),                         //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_014 (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_002_src1_ready),                                 //     sink0.ready
		.in_valid          (rsp_demux_002_src1_valid),                                 //          .valid
		.in_startofpacket  (rsp_demux_002_src1_startofpacket),                         //          .startofpacket
		.in_endofpacket    (rsp_demux_002_src1_endofpacket),                           //          .endofpacket
		.in_data           (rsp_demux_002_src1_data),                                  //          .data
		.in_channel        (rsp_demux_002_src1_channel),                               //          .channel
		.out_ready         (mux_pipeline_014_source0_ready),                           //   source0.ready
		.out_valid         (mux_pipeline_014_source0_valid),                           //          .valid
		.out_startofpacket (mux_pipeline_014_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (mux_pipeline_014_source0_endofpacket),                     //          .endofpacket
		.out_data          (mux_pipeline_014_source0_data),                            //          .data
		.out_channel       (mux_pipeline_014_source0_channel),                         //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_015 (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_003_src1_ready),                                 //     sink0.ready
		.in_valid          (rsp_demux_003_src1_valid),                                 //          .valid
		.in_startofpacket  (rsp_demux_003_src1_startofpacket),                         //          .startofpacket
		.in_endofpacket    (rsp_demux_003_src1_endofpacket),                           //          .endofpacket
		.in_data           (rsp_demux_003_src1_data),                                  //          .data
		.in_channel        (rsp_demux_003_src1_channel),                               //          .channel
		.out_ready         (mux_pipeline_015_source0_ready),                           //   source0.ready
		.out_valid         (mux_pipeline_015_source0_valid),                           //          .valid
		.out_startofpacket (mux_pipeline_015_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (mux_pipeline_015_source0_endofpacket),                     //          .endofpacket
		.out_data          (mux_pipeline_015_source0_data),                            //          .data
		.out_channel       (mux_pipeline_015_source0_channel),                         //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_016 (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_004_src1_ready),                                 //     sink0.ready
		.in_valid          (rsp_demux_004_src1_valid),                                 //          .valid
		.in_startofpacket  (rsp_demux_004_src1_startofpacket),                         //          .startofpacket
		.in_endofpacket    (rsp_demux_004_src1_endofpacket),                           //          .endofpacket
		.in_data           (rsp_demux_004_src1_data),                                  //          .data
		.in_channel        (rsp_demux_004_src1_channel),                               //          .channel
		.out_ready         (mux_pipeline_016_source0_ready),                           //   source0.ready
		.out_valid         (mux_pipeline_016_source0_valid),                           //          .valid
		.out_startofpacket (mux_pipeline_016_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (mux_pipeline_016_source0_endofpacket),                     //          .endofpacket
		.out_data          (mux_pipeline_016_source0_data),                            //          .data
		.out_channel       (mux_pipeline_016_source0_channel),                         //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (121),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_017 (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_003_src2_ready),                                 //     sink0.ready
		.in_valid          (rsp_demux_003_src2_valid),                                 //          .valid
		.in_startofpacket  (rsp_demux_003_src2_startofpacket),                         //          .startofpacket
		.in_endofpacket    (rsp_demux_003_src2_endofpacket),                           //          .endofpacket
		.in_data           (rsp_demux_003_src2_data),                                  //          .data
		.in_channel        (rsp_demux_003_src2_channel),                               //          .channel
		.out_ready         (mux_pipeline_017_source0_ready),                           //   source0.ready
		.out_valid         (mux_pipeline_017_source0_valid),                           //          .valid
		.out_startofpacket (mux_pipeline_017_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (mux_pipeline_017_source0_endofpacket),                     //          .endofpacket
		.out_data          (mux_pipeline_017_source0_data),                            //          .data
		.out_channel       (mux_pipeline_017_source0_channel),                         //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	ghrd_10as066n2_altera_avalon_st_adapter_161_4hslsya #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fmcomms2_gpio_s1_agent_rdata_fifo_out_data),                 //     in_0.data
		.in_0_valid     (fmcomms2_gpio_s1_agent_rdata_fifo_out_valid),                //         .valid
		.in_0_ready     (fmcomms2_gpio_s1_agent_rdata_fifo_out_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                               //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                              //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                              //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                               //         .error
	);

	ghrd_10as066n2_altera_avalon_st_adapter_161_4hslsya #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (arria10_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pb_lwh2f_s0_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (pb_lwh2f_s0_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (pb_lwh2f_s0_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                         //         .error
	);

	ghrd_10as066n2_altera_avalon_st_adapter_161_4hslsya #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                   // in_clk_0.clk
		.in_rst_0_reset (sys_cpu_interconnect_clk_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (fmcomms2_spi_ad9361_spi_control_port_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                                //         .error
	);

endmodule
