// ghrd_10as066n2_altera_mm_interconnect_161_o7da2nq.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 203

`timescale 1 ps / 1 ps
module ghrd_10as066n2_altera_mm_interconnect_161_o7da2nq (
		input  wire [31:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_awaddr,                                           //                                            fmcomms2_axi_ad9361_adc_dma_m_dest_axi.awaddr
		input  wire [7:0]  fmcomms2_axi_ad9361_adc_dma_m_dest_axi_awlen,                                            //                                                                                  .awlen
		input  wire [2:0]  fmcomms2_axi_ad9361_adc_dma_m_dest_axi_awsize,                                           //                                                                                  .awsize
		input  wire [1:0]  fmcomms2_axi_ad9361_adc_dma_m_dest_axi_awburst,                                          //                                                                                  .awburst
		input  wire [3:0]  fmcomms2_axi_ad9361_adc_dma_m_dest_axi_awcache,                                          //                                                                                  .awcache
		input  wire [2:0]  fmcomms2_axi_ad9361_adc_dma_m_dest_axi_awprot,                                           //                                                                                  .awprot
		input  wire        fmcomms2_axi_ad9361_adc_dma_m_dest_axi_awvalid,                                          //                                                                                  .awvalid
		output wire        fmcomms2_axi_ad9361_adc_dma_m_dest_axi_awready,                                          //                                                                                  .awready
		input  wire [63:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_wdata,                                            //                                                                                  .wdata
		input  wire [7:0]  fmcomms2_axi_ad9361_adc_dma_m_dest_axi_wstrb,                                            //                                                                                  .wstrb
		input  wire        fmcomms2_axi_ad9361_adc_dma_m_dest_axi_wlast,                                            //                                                                                  .wlast
		input  wire        fmcomms2_axi_ad9361_adc_dma_m_dest_axi_wvalid,                                           //                                                                                  .wvalid
		output wire        fmcomms2_axi_ad9361_adc_dma_m_dest_axi_wready,                                           //                                                                                  .wready
		output wire [1:0]  fmcomms2_axi_ad9361_adc_dma_m_dest_axi_bresp,                                            //                                                                                  .bresp
		output wire        fmcomms2_axi_ad9361_adc_dma_m_dest_axi_bvalid,                                           //                                                                                  .bvalid
		input  wire        fmcomms2_axi_ad9361_adc_dma_m_dest_axi_bready,                                           //                                                                                  .bready
		input  wire [31:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_araddr,                                           //                                                                                  .araddr
		input  wire [7:0]  fmcomms2_axi_ad9361_adc_dma_m_dest_axi_arlen,                                            //                                                                                  .arlen
		input  wire [2:0]  fmcomms2_axi_ad9361_adc_dma_m_dest_axi_arsize,                                           //                                                                                  .arsize
		input  wire [1:0]  fmcomms2_axi_ad9361_adc_dma_m_dest_axi_arburst,                                          //                                                                                  .arburst
		input  wire [3:0]  fmcomms2_axi_ad9361_adc_dma_m_dest_axi_arcache,                                          //                                                                                  .arcache
		input  wire [2:0]  fmcomms2_axi_ad9361_adc_dma_m_dest_axi_arprot,                                           //                                                                                  .arprot
		input  wire        fmcomms2_axi_ad9361_adc_dma_m_dest_axi_arvalid,                                          //                                                                                  .arvalid
		output wire        fmcomms2_axi_ad9361_adc_dma_m_dest_axi_arready,                                          //                                                                                  .arready
		output wire [63:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_rdata,                                            //                                                                                  .rdata
		output wire [1:0]  fmcomms2_axi_ad9361_adc_dma_m_dest_axi_rresp,                                            //                                                                                  .rresp
		output wire        fmcomms2_axi_ad9361_adc_dma_m_dest_axi_rvalid,                                           //                                                                                  .rvalid
		input  wire        fmcomms2_axi_ad9361_adc_dma_m_dest_axi_rready,                                           //                                                                                  .rready
		output wire [3:0]  sys_mem_interconnect_axi0_s0_awid,                                                       //                                                      sys_mem_interconnect_axi0_s0.awid
		output wire [31:0] sys_mem_interconnect_axi0_s0_awaddr,                                                     //                                                                                  .awaddr
		output wire [3:0]  sys_mem_interconnect_axi0_s0_awlen,                                                      //                                                                                  .awlen
		output wire [2:0]  sys_mem_interconnect_axi0_s0_awsize,                                                     //                                                                                  .awsize
		output wire [1:0]  sys_mem_interconnect_axi0_s0_awburst,                                                    //                                                                                  .awburst
		output wire [1:0]  sys_mem_interconnect_axi0_s0_awlock,                                                     //                                                                                  .awlock
		output wire [3:0]  sys_mem_interconnect_axi0_s0_awcache,                                                    //                                                                                  .awcache
		output wire [2:0]  sys_mem_interconnect_axi0_s0_awprot,                                                     //                                                                                  .awprot
		output wire        sys_mem_interconnect_axi0_s0_awvalid,                                                    //                                                                                  .awvalid
		input  wire        sys_mem_interconnect_axi0_s0_awready,                                                    //                                                                                  .awready
		output wire [3:0]  sys_mem_interconnect_axi0_s0_wid,                                                        //                                                                                  .wid
		output wire [63:0] sys_mem_interconnect_axi0_s0_wdata,                                                      //                                                                                  .wdata
		output wire [7:0]  sys_mem_interconnect_axi0_s0_wstrb,                                                      //                                                                                  .wstrb
		output wire        sys_mem_interconnect_axi0_s0_wlast,                                                      //                                                                                  .wlast
		output wire        sys_mem_interconnect_axi0_s0_wvalid,                                                     //                                                                                  .wvalid
		input  wire        sys_mem_interconnect_axi0_s0_wready,                                                     //                                                                                  .wready
		input  wire [3:0]  sys_mem_interconnect_axi0_s0_bid,                                                        //                                                                                  .bid
		input  wire [1:0]  sys_mem_interconnect_axi0_s0_bresp,                                                      //                                                                                  .bresp
		input  wire        sys_mem_interconnect_axi0_s0_bvalid,                                                     //                                                                                  .bvalid
		output wire        sys_mem_interconnect_axi0_s0_bready,                                                     //                                                                                  .bready
		output wire [3:0]  sys_mem_interconnect_axi0_s0_arid,                                                       //                                                                                  .arid
		output wire [31:0] sys_mem_interconnect_axi0_s0_araddr,                                                     //                                                                                  .araddr
		output wire [3:0]  sys_mem_interconnect_axi0_s0_arlen,                                                      //                                                                                  .arlen
		output wire [2:0]  sys_mem_interconnect_axi0_s0_arsize,                                                     //                                                                                  .arsize
		output wire [1:0]  sys_mem_interconnect_axi0_s0_arburst,                                                    //                                                                                  .arburst
		output wire [1:0]  sys_mem_interconnect_axi0_s0_arlock,                                                     //                                                                                  .arlock
		output wire [3:0]  sys_mem_interconnect_axi0_s0_arcache,                                                    //                                                                                  .arcache
		output wire [2:0]  sys_mem_interconnect_axi0_s0_arprot,                                                     //                                                                                  .arprot
		output wire        sys_mem_interconnect_axi0_s0_arvalid,                                                    //                                                                                  .arvalid
		input  wire        sys_mem_interconnect_axi0_s0_arready,                                                    //                                                                                  .arready
		input  wire [3:0]  sys_mem_interconnect_axi0_s0_rid,                                                        //                                                                                  .rid
		input  wire [63:0] sys_mem_interconnect_axi0_s0_rdata,                                                      //                                                                                  .rdata
		input  wire [1:0]  sys_mem_interconnect_axi0_s0_rresp,                                                      //                                                                                  .rresp
		input  wire        sys_mem_interconnect_axi0_s0_rlast,                                                      //                                                                                  .rlast
		input  wire        sys_mem_interconnect_axi0_s0_rvalid,                                                     //                                                                                  .rvalid
		output wire        sys_mem_interconnect_axi0_s0_rready,                                                     //                                                                                  .rready
		input  wire        arria10_hps_h2f_user0_clock_clk,                                                         //                                                       arria10_hps_h2f_user0_clock.clk
		input  wire        clk_0_clk_clk,                                                                           //                                                                         clk_0_clk.clk
		input  wire        fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_clk_reset_reset_bridge_in_reset_reset, // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_clk_reset_reset_bridge_in_reset.reset
		input  wire        fmcomms2_mem_rst_reset_bridge_in_reset_reset,                                            //                                            fmcomms2_mem_rst_reset_bridge_in_reset.reset
		input  wire        sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset                          //                         sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset.reset
	);

	wire    [0:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_ruser;          // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:ruser -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_ruser
	wire    [0:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_wuser;          // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_wuser -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:wuser
	wire    [1:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awburst;        // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_awburst -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:awburst
	wire    [3:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arregion;       // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_arregion -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:arregion
	wire    [0:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awuser;         // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_awuser -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:awuser
	wire    [7:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arlen;          // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_arlen -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:arlen
	wire    [3:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arqos;          // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_arqos -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:arqos
	wire    [7:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_wstrb;          // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_wstrb -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:wstrb
	wire          fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_wready;         // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:wready -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_wready
	wire    [0:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_rid;            // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:rid -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_rid
	wire          fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_rready;         // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_rready -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:rready
	wire    [7:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awlen;          // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_awlen -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:awlen
	wire    [3:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awqos;          // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_awqos -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:awqos
	wire    [3:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arcache;        // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_arcache -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:arcache
	wire          fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_wvalid;         // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_wvalid -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:wvalid
	wire   [31:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_araddr;         // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_araddr -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:araddr
	wire    [2:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arprot;         // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_arprot -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:arprot
	wire    [2:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awprot;         // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_awprot -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:awprot
	wire   [63:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_wdata;          // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_wdata -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:wdata
	wire          fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arvalid;        // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_arvalid -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:arvalid
	wire    [3:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awcache;        // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_awcache -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:awcache
	wire    [0:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arid;           // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_arid -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:arid
	wire    [0:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arlock;         // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_arlock -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:arlock
	wire    [0:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awlock;         // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_awlock -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:awlock
	wire   [31:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awaddr;         // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_awaddr -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:awaddr
	wire    [1:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_bresp;          // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:bresp -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_bresp
	wire          fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arready;        // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:arready -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_arready
	wire   [63:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_rdata;          // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:rdata -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_rdata
	wire          fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awready;        // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:awready -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_awready
	wire    [1:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arburst;        // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_arburst -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:arburst
	wire    [2:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arsize;         // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_arsize -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:arsize
	wire          fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_bready;         // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_bready -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:bready
	wire          fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_rlast;          // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:rlast -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_rlast
	wire          fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_wlast;          // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_wlast -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:wlast
	wire    [3:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awregion;       // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_awregion -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:awregion
	wire    [0:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_buser;          // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:buser -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_buser
	wire    [1:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_rresp;          // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:rresp -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_rresp
	wire    [0:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awid;           // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_awid -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:awid
	wire    [0:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_bid;            // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:bid -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_bid
	wire          fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_bvalid;         // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:bvalid -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_bvalid
	wire    [2:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awsize;         // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_awsize -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:awsize
	wire          fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awvalid;        // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_awvalid -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:awvalid
	wire    [0:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_aruser;         // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_aruser -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:aruser
	wire          fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_rvalid;         // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:rvalid -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator:m0_rvalid
	wire          rsp_mux_src_valid;                                                   // rsp_mux:src_valid -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:write_rp_valid
	wire  [156:0] rsp_mux_src_data;                                                    // rsp_mux:src_data -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:write_rp_data
	wire          rsp_mux_src_ready;                                                   // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                 // rsp_mux:src_channel -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                           // rsp_mux:src_startofpacket -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                             // rsp_mux:src_endofpacket -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                               // rsp_mux_001:src_valid -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:read_rp_valid
	wire  [156:0] rsp_mux_001_src_data;                                                // rsp_mux_001:src_data -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                               // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                             // rsp_mux_001:src_channel -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                       // rsp_mux_001:src_startofpacket -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                         // rsp_mux_001:src_endofpacket -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:read_rp_endofpacket
	wire          fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_write_cp_valid;         // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:write_cp_valid -> router:sink_valid
	wire  [156:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_write_cp_data;          // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:write_cp_data -> router:sink_data
	wire          fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_write_cp_ready;         // router:sink_ready -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:write_cp_ready
	wire          fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_write_cp_startofpacket; // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_write_cp_endofpacket;   // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                    // router:src_valid -> cmd_demux:sink_valid
	wire  [156:0] router_src_data;                                                     // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                    // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                  // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                            // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                              // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_read_cp_valid;          // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:read_cp_valid -> router_001:sink_valid
	wire  [156:0] fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_read_cp_data;           // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:read_cp_data -> router_001:sink_data
	wire          fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_read_cp_ready;          // router_001:sink_ready -> fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:read_cp_ready
	wire          fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_read_cp_startofpacket;  // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_read_cp_endofpacket;    // fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [156:0] router_001_src_data;                                                 // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                              // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                        // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                          // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          router_002_src_valid;                                                // router_002:src_valid -> rsp_demux:sink_valid
	wire  [156:0] router_002_src_data;                                                 // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                // rsp_demux:sink_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                              // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                        // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                          // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_003_src_valid;                                                // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [156:0] router_003_src_data;                                                 // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [1:0] router_003_src_channel;                                              // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                        // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                          // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          cmd_mux_src_valid;                                                   // cmd_mux:src_valid -> sys_mem_interconnect_axi0_s0_wr_burst_adapter:sink0_valid
	wire  [156:0] cmd_mux_src_data;                                                    // cmd_mux:src_data -> sys_mem_interconnect_axi0_s0_wr_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                   // sys_mem_interconnect_axi0_s0_wr_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                 // cmd_mux:src_channel -> sys_mem_interconnect_axi0_s0_wr_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                           // cmd_mux:src_startofpacket -> sys_mem_interconnect_axi0_s0_wr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                             // cmd_mux:src_endofpacket -> sys_mem_interconnect_axi0_s0_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                               // cmd_mux_001:src_valid -> sys_mem_interconnect_axi0_s0_rd_burst_adapter:sink0_valid
	wire  [156:0] cmd_mux_001_src_data;                                                // cmd_mux_001:src_data -> sys_mem_interconnect_axi0_s0_rd_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                               // sys_mem_interconnect_axi0_s0_rd_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                             // cmd_mux_001:src_channel -> sys_mem_interconnect_axi0_s0_rd_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                       // cmd_mux_001:src_startofpacket -> sys_mem_interconnect_axi0_s0_rd_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                         // cmd_mux_001:src_endofpacket -> sys_mem_interconnect_axi0_s0_rd_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                                // cmd_demux:src0_valid -> async_fifo:in_valid
	wire  [156:0] cmd_demux_src0_data;                                                 // cmd_demux:src0_data -> async_fifo:in_data
	wire          cmd_demux_src0_ready;                                                // async_fifo:in_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                              // cmd_demux:src0_channel -> async_fifo:in_channel
	wire          cmd_demux_src0_startofpacket;                                        // cmd_demux:src0_startofpacket -> async_fifo:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                          // cmd_demux:src0_endofpacket -> async_fifo:in_endofpacket
	wire          cmd_demux_001_src0_valid;                                            // cmd_demux_001:src0_valid -> async_fifo_001:in_valid
	wire  [156:0] cmd_demux_001_src0_data;                                             // cmd_demux_001:src0_data -> async_fifo_001:in_data
	wire          cmd_demux_001_src0_ready;                                            // async_fifo_001:in_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                          // cmd_demux_001:src0_channel -> async_fifo_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                    // cmd_demux_001:src0_startofpacket -> async_fifo_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                      // cmd_demux_001:src0_endofpacket -> async_fifo_001:in_endofpacket
	wire          rsp_demux_src0_valid;                                                // rsp_demux:src0_valid -> async_fifo_002:in_valid
	wire  [156:0] rsp_demux_src0_data;                                                 // rsp_demux:src0_data -> async_fifo_002:in_data
	wire          rsp_demux_src0_ready;                                                // async_fifo_002:in_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                              // rsp_demux:src0_channel -> async_fifo_002:in_channel
	wire          rsp_demux_src0_startofpacket;                                        // rsp_demux:src0_startofpacket -> async_fifo_002:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                          // rsp_demux:src0_endofpacket -> async_fifo_002:in_endofpacket
	wire          rsp_demux_001_src0_valid;                                            // rsp_demux_001:src0_valid -> async_fifo_003:in_valid
	wire  [156:0] rsp_demux_001_src0_data;                                             // rsp_demux_001:src0_data -> async_fifo_003:in_data
	wire          rsp_demux_001_src0_ready;                                            // async_fifo_003:in_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                                          // rsp_demux_001:src0_channel -> async_fifo_003:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                    // rsp_demux_001:src0_startofpacket -> async_fifo_003:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                      // rsp_demux_001:src0_endofpacket -> async_fifo_003:in_endofpacket
	wire          sys_mem_interconnect_axi0_s0_wr_burst_adapter_source0_valid;         // sys_mem_interconnect_axi0_s0_wr_burst_adapter:source0_valid -> agent_pipeline:in_valid
	wire  [156:0] sys_mem_interconnect_axi0_s0_wr_burst_adapter_source0_data;          // sys_mem_interconnect_axi0_s0_wr_burst_adapter:source0_data -> agent_pipeline:in_data
	wire          sys_mem_interconnect_axi0_s0_wr_burst_adapter_source0_ready;         // agent_pipeline:in_ready -> sys_mem_interconnect_axi0_s0_wr_burst_adapter:source0_ready
	wire    [1:0] sys_mem_interconnect_axi0_s0_wr_burst_adapter_source0_channel;       // sys_mem_interconnect_axi0_s0_wr_burst_adapter:source0_channel -> agent_pipeline:in_channel
	wire          sys_mem_interconnect_axi0_s0_wr_burst_adapter_source0_startofpacket; // sys_mem_interconnect_axi0_s0_wr_burst_adapter:source0_startofpacket -> agent_pipeline:in_startofpacket
	wire          sys_mem_interconnect_axi0_s0_wr_burst_adapter_source0_endofpacket;   // sys_mem_interconnect_axi0_s0_wr_burst_adapter:source0_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                        // agent_pipeline:out_valid -> sys_mem_interconnect_axi0_s0_agent:write_cp_valid
	wire  [156:0] agent_pipeline_source0_data;                                         // agent_pipeline:out_data -> sys_mem_interconnect_axi0_s0_agent:write_cp_data
	wire          agent_pipeline_source0_ready;                                        // sys_mem_interconnect_axi0_s0_agent:write_cp_ready -> agent_pipeline:out_ready
	wire    [1:0] agent_pipeline_source0_channel;                                      // agent_pipeline:out_channel -> sys_mem_interconnect_axi0_s0_agent:write_cp_channel
	wire          agent_pipeline_source0_startofpacket;                                // agent_pipeline:out_startofpacket -> sys_mem_interconnect_axi0_s0_agent:write_cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                  // agent_pipeline:out_endofpacket -> sys_mem_interconnect_axi0_s0_agent:write_cp_endofpacket
	wire          sys_mem_interconnect_axi0_s0_rd_burst_adapter_source0_valid;         // sys_mem_interconnect_axi0_s0_rd_burst_adapter:source0_valid -> agent_pipeline_001:in_valid
	wire  [156:0] sys_mem_interconnect_axi0_s0_rd_burst_adapter_source0_data;          // sys_mem_interconnect_axi0_s0_rd_burst_adapter:source0_data -> agent_pipeline_001:in_data
	wire          sys_mem_interconnect_axi0_s0_rd_burst_adapter_source0_ready;         // agent_pipeline_001:in_ready -> sys_mem_interconnect_axi0_s0_rd_burst_adapter:source0_ready
	wire    [1:0] sys_mem_interconnect_axi0_s0_rd_burst_adapter_source0_channel;       // sys_mem_interconnect_axi0_s0_rd_burst_adapter:source0_channel -> agent_pipeline_001:in_channel
	wire          sys_mem_interconnect_axi0_s0_rd_burst_adapter_source0_startofpacket; // sys_mem_interconnect_axi0_s0_rd_burst_adapter:source0_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          sys_mem_interconnect_axi0_s0_rd_burst_adapter_source0_endofpacket;   // sys_mem_interconnect_axi0_s0_rd_burst_adapter:source0_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                    // agent_pipeline_001:out_valid -> sys_mem_interconnect_axi0_s0_agent:read_cp_valid
	wire  [156:0] agent_pipeline_001_source0_data;                                     // agent_pipeline_001:out_data -> sys_mem_interconnect_axi0_s0_agent:read_cp_data
	wire          agent_pipeline_001_source0_ready;                                    // sys_mem_interconnect_axi0_s0_agent:read_cp_ready -> agent_pipeline_001:out_ready
	wire    [1:0] agent_pipeline_001_source0_channel;                                  // agent_pipeline_001:out_channel -> sys_mem_interconnect_axi0_s0_agent:read_cp_channel
	wire          agent_pipeline_001_source0_startofpacket;                            // agent_pipeline_001:out_startofpacket -> sys_mem_interconnect_axi0_s0_agent:read_cp_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                              // agent_pipeline_001:out_endofpacket -> sys_mem_interconnect_axi0_s0_agent:read_cp_endofpacket
	wire          sys_mem_interconnect_axi0_s0_agent_write_rp_valid;                   // sys_mem_interconnect_axi0_s0_agent:write_rp_valid -> agent_pipeline_002:in_valid
	wire  [156:0] sys_mem_interconnect_axi0_s0_agent_write_rp_data;                    // sys_mem_interconnect_axi0_s0_agent:write_rp_data -> agent_pipeline_002:in_data
	wire          sys_mem_interconnect_axi0_s0_agent_write_rp_ready;                   // agent_pipeline_002:in_ready -> sys_mem_interconnect_axi0_s0_agent:write_rp_ready
	wire          sys_mem_interconnect_axi0_s0_agent_write_rp_startofpacket;           // sys_mem_interconnect_axi0_s0_agent:write_rp_startofpacket -> agent_pipeline_002:in_startofpacket
	wire          sys_mem_interconnect_axi0_s0_agent_write_rp_endofpacket;             // sys_mem_interconnect_axi0_s0_agent:write_rp_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          agent_pipeline_002_source0_valid;                                    // agent_pipeline_002:out_valid -> router_002:sink_valid
	wire  [156:0] agent_pipeline_002_source0_data;                                     // agent_pipeline_002:out_data -> router_002:sink_data
	wire          agent_pipeline_002_source0_ready;                                    // router_002:sink_ready -> agent_pipeline_002:out_ready
	wire          agent_pipeline_002_source0_startofpacket;                            // agent_pipeline_002:out_startofpacket -> router_002:sink_startofpacket
	wire          agent_pipeline_002_source0_endofpacket;                              // agent_pipeline_002:out_endofpacket -> router_002:sink_endofpacket
	wire          sys_mem_interconnect_axi0_s0_agent_read_rp_valid;                    // sys_mem_interconnect_axi0_s0_agent:read_rp_valid -> agent_pipeline_003:in_valid
	wire  [156:0] sys_mem_interconnect_axi0_s0_agent_read_rp_data;                     // sys_mem_interconnect_axi0_s0_agent:read_rp_data -> agent_pipeline_003:in_data
	wire          sys_mem_interconnect_axi0_s0_agent_read_rp_ready;                    // agent_pipeline_003:in_ready -> sys_mem_interconnect_axi0_s0_agent:read_rp_ready
	wire          sys_mem_interconnect_axi0_s0_agent_read_rp_startofpacket;            // sys_mem_interconnect_axi0_s0_agent:read_rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire          sys_mem_interconnect_axi0_s0_agent_read_rp_endofpacket;              // sys_mem_interconnect_axi0_s0_agent:read_rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          agent_pipeline_003_source0_valid;                                    // agent_pipeline_003:out_valid -> router_003:sink_valid
	wire  [156:0] agent_pipeline_003_source0_data;                                     // agent_pipeline_003:out_data -> router_003:sink_data
	wire          agent_pipeline_003_source0_ready;                                    // router_003:sink_ready -> agent_pipeline_003:out_ready
	wire          agent_pipeline_003_source0_startofpacket;                            // agent_pipeline_003:out_startofpacket -> router_003:sink_startofpacket
	wire          agent_pipeline_003_source0_endofpacket;                              // agent_pipeline_003:out_endofpacket -> router_003:sink_endofpacket
	wire          async_fifo_out_valid;                                                // async_fifo:out_valid -> mux_pipeline:in_valid
	wire  [156:0] async_fifo_out_data;                                                 // async_fifo:out_data -> mux_pipeline:in_data
	wire          async_fifo_out_ready;                                                // mux_pipeline:in_ready -> async_fifo:out_ready
	wire    [1:0] async_fifo_out_channel;                                              // async_fifo:out_channel -> mux_pipeline:in_channel
	wire          async_fifo_out_startofpacket;                                        // async_fifo:out_startofpacket -> mux_pipeline:in_startofpacket
	wire          async_fifo_out_endofpacket;                                          // async_fifo:out_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                          // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [156:0] mux_pipeline_source0_data;                                           // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                          // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire    [1:0] mux_pipeline_source0_channel;                                        // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                                  // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                    // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          async_fifo_001_out_valid;                                            // async_fifo_001:out_valid -> mux_pipeline_001:in_valid
	wire  [156:0] async_fifo_001_out_data;                                             // async_fifo_001:out_data -> mux_pipeline_001:in_data
	wire          async_fifo_001_out_ready;                                            // mux_pipeline_001:in_ready -> async_fifo_001:out_ready
	wire    [1:0] async_fifo_001_out_channel;                                          // async_fifo_001:out_channel -> mux_pipeline_001:in_channel
	wire          async_fifo_001_out_startofpacket;                                    // async_fifo_001:out_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          async_fifo_001_out_endofpacket;                                      // async_fifo_001:out_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                      // mux_pipeline_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [156:0] mux_pipeline_001_source0_data;                                       // mux_pipeline_001:out_data -> cmd_mux_001:sink0_data
	wire          mux_pipeline_001_source0_ready;                                      // cmd_mux_001:sink0_ready -> mux_pipeline_001:out_ready
	wire    [1:0] mux_pipeline_001_source0_channel;                                    // mux_pipeline_001:out_channel -> cmd_mux_001:sink0_channel
	wire          mux_pipeline_001_source0_startofpacket;                              // mux_pipeline_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                                // mux_pipeline_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          async_fifo_002_out_valid;                                            // async_fifo_002:out_valid -> mux_pipeline_002:in_valid
	wire  [156:0] async_fifo_002_out_data;                                             // async_fifo_002:out_data -> mux_pipeline_002:in_data
	wire          async_fifo_002_out_ready;                                            // mux_pipeline_002:in_ready -> async_fifo_002:out_ready
	wire    [1:0] async_fifo_002_out_channel;                                          // async_fifo_002:out_channel -> mux_pipeline_002:in_channel
	wire          async_fifo_002_out_startofpacket;                                    // async_fifo_002:out_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          async_fifo_002_out_endofpacket;                                      // async_fifo_002:out_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                                      // mux_pipeline_002:out_valid -> rsp_mux:sink0_valid
	wire  [156:0] mux_pipeline_002_source0_data;                                       // mux_pipeline_002:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_002_source0_ready;                                      // rsp_mux:sink0_ready -> mux_pipeline_002:out_ready
	wire    [1:0] mux_pipeline_002_source0_channel;                                    // mux_pipeline_002:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_002_source0_startofpacket;                              // mux_pipeline_002:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                                // mux_pipeline_002:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          async_fifo_003_out_valid;                                            // async_fifo_003:out_valid -> mux_pipeline_003:in_valid
	wire  [156:0] async_fifo_003_out_data;                                             // async_fifo_003:out_data -> mux_pipeline_003:in_data
	wire          async_fifo_003_out_ready;                                            // mux_pipeline_003:in_ready -> async_fifo_003:out_ready
	wire    [1:0] async_fifo_003_out_channel;                                          // async_fifo_003:out_channel -> mux_pipeline_003:in_channel
	wire          async_fifo_003_out_startofpacket;                                    // async_fifo_003:out_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          async_fifo_003_out_endofpacket;                                      // async_fifo_003:out_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                                      // mux_pipeline_003:out_valid -> rsp_mux_001:sink0_valid
	wire  [156:0] mux_pipeline_003_source0_data;                                       // mux_pipeline_003:out_data -> rsp_mux_001:sink0_data
	wire          mux_pipeline_003_source0_ready;                                      // rsp_mux_001:sink0_ready -> mux_pipeline_003:out_ready
	wire    [1:0] mux_pipeline_003_source0_channel;                                    // mux_pipeline_003:out_channel -> rsp_mux_001:sink0_channel
	wire          mux_pipeline_003_source0_startofpacket;                              // mux_pipeline_003:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                                // mux_pipeline_003:out_endofpacket -> rsp_mux_001:sink0_endofpacket

	altera_merlin_axi_translator #(
		.USE_S0_AWID                       (0),
		.USE_S0_AWREGION                   (0),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (0),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (0),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (0),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (0),
		.USE_S0_ARREGION                   (0),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (0),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (0),
		.USE_S0_RID                        (0),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (0),
		.M0_ID_WIDTH                       (1),
		.DATA_WIDTH                        (64),
		.S0_ID_WIDTH                       (1),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (0),
		.USE_S0_ARUSER                     (0),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4")
	) fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator (
		.aclk        (arria10_hps_h2f_user0_clock_clk),                                                          //       clk.clk
		.aresetn     (~fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset_n
		.m0_awid     (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awid),                                //        m0.awid
		.m0_awaddr   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awaddr),                              //          .awaddr
		.m0_awlen    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awlen),                               //          .awlen
		.m0_awsize   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awsize),                              //          .awsize
		.m0_awburst  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awburst),                             //          .awburst
		.m0_awlock   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awlock),                              //          .awlock
		.m0_awcache  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awcache),                             //          .awcache
		.m0_awprot   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awprot),                              //          .awprot
		.m0_awuser   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awuser),                              //          .awuser
		.m0_awqos    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awqos),                               //          .awqos
		.m0_awregion (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awregion),                            //          .awregion
		.m0_awvalid  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awvalid),                             //          .awvalid
		.m0_awready  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awready),                             //          .awready
		.m0_wdata    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_wdata),                               //          .wdata
		.m0_wstrb    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_wstrb),                               //          .wstrb
		.m0_wlast    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_wlast),                               //          .wlast
		.m0_wvalid   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_wvalid),                              //          .wvalid
		.m0_wuser    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_wuser),                               //          .wuser
		.m0_wready   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_wready),                              //          .wready
		.m0_bid      (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_bid),                                 //          .bid
		.m0_bresp    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_bresp),                               //          .bresp
		.m0_buser    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_buser),                               //          .buser
		.m0_bvalid   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_bvalid),                              //          .bvalid
		.m0_bready   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_bready),                              //          .bready
		.m0_arid     (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arid),                                //          .arid
		.m0_araddr   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_araddr),                              //          .araddr
		.m0_arlen    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arlen),                               //          .arlen
		.m0_arsize   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arsize),                              //          .arsize
		.m0_arburst  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arburst),                             //          .arburst
		.m0_arlock   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arlock),                              //          .arlock
		.m0_arcache  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arcache),                             //          .arcache
		.m0_arprot   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arprot),                              //          .arprot
		.m0_aruser   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_aruser),                              //          .aruser
		.m0_arqos    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arqos),                               //          .arqos
		.m0_arregion (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arregion),                            //          .arregion
		.m0_arvalid  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arvalid),                             //          .arvalid
		.m0_arready  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arready),                             //          .arready
		.m0_rid      (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_rid),                                 //          .rid
		.m0_rdata    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_rdata),                               //          .rdata
		.m0_rresp    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_rresp),                               //          .rresp
		.m0_rlast    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_rlast),                               //          .rlast
		.m0_rvalid   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_rvalid),                              //          .rvalid
		.m0_rready   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_rready),                              //          .rready
		.m0_ruser    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_ruser),                               //          .ruser
		.s0_awaddr   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_awaddr),                                            //        s0.awaddr
		.s0_awlen    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_awlen),                                             //          .awlen
		.s0_awsize   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_awsize),                                            //          .awsize
		.s0_awburst  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_awburst),                                           //          .awburst
		.s0_awcache  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_awcache),                                           //          .awcache
		.s0_awprot   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_awprot),                                            //          .awprot
		.s0_awvalid  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_awvalid),                                           //          .awvalid
		.s0_awready  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_awready),                                           //          .awready
		.s0_wdata    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_wdata),                                             //          .wdata
		.s0_wstrb    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_wstrb),                                             //          .wstrb
		.s0_wlast    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_wlast),                                             //          .wlast
		.s0_wvalid   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_wvalid),                                            //          .wvalid
		.s0_wready   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_wready),                                            //          .wready
		.s0_bresp    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_bresp),                                             //          .bresp
		.s0_bvalid   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_bvalid),                                            //          .bvalid
		.s0_bready   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_bready),                                            //          .bready
		.s0_araddr   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_araddr),                                            //          .araddr
		.s0_arlen    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_arlen),                                             //          .arlen
		.s0_arsize   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_arsize),                                            //          .arsize
		.s0_arburst  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_arburst),                                           //          .arburst
		.s0_arcache  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_arcache),                                           //          .arcache
		.s0_arprot   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_arprot),                                            //          .arprot
		.s0_arvalid  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_arvalid),                                           //          .arvalid
		.s0_arready  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_arready),                                           //          .arready
		.s0_rdata    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_rdata),                                             //          .rdata
		.s0_rresp    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_rresp),                                             //          .rresp
		.s0_rvalid   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_rvalid),                                            //          .rvalid
		.s0_rready   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_rready),                                            //          .rready
		.s0_awid     (1'b0),                                                                                     // (terminated)
		.s0_awlock   (1'b0),                                                                                     // (terminated)
		.s0_awuser   (1'b0),                                                                                     // (terminated)
		.s0_awqos    (4'b0000),                                                                                  // (terminated)
		.s0_awregion (4'b0000),                                                                                  // (terminated)
		.s0_wuser    (1'b0),                                                                                     // (terminated)
		.s0_bid      (),                                                                                         // (terminated)
		.s0_buser    (),                                                                                         // (terminated)
		.s0_arid     (1'b0),                                                                                     // (terminated)
		.s0_arlock   (1'b0),                                                                                     // (terminated)
		.s0_aruser   (1'b0),                                                                                     // (terminated)
		.s0_arqos    (4'b0000),                                                                                  // (terminated)
		.s0_arregion (4'b0000),                                                                                  // (terminated)
		.s0_rid      (),                                                                                         // (terminated)
		.s0_rlast    (),                                                                                         // (terminated)
		.s0_ruser    (),                                                                                         // (terminated)
		.s0_wid      (1'b0),                                                                                     // (terminated)
		.m0_wid      ()                                                                                          // (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (64),
		.WDATA_WIDTH               (64),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.AXI_VERSION               ("AXI4"),
		.WRITE_ISSUING_CAPABILITY  (4),
		.READ_ISSUING_CAPABILITY   (1),
		.PKT_BEGIN_BURST           (137),
		.PKT_CACHE_H               (151),
		.PKT_CACHE_L               (148),
		.PKT_ADDR_SIDEBAND_H       (135),
		.PKT_ADDR_SIDEBAND_L       (135),
		.PKT_PROTECTION_H          (147),
		.PKT_PROTECTION_L          (145),
		.PKT_BURST_SIZE_H          (132),
		.PKT_BURST_SIZE_L          (130),
		.PKT_BURST_TYPE_H          (134),
		.PKT_BURST_TYPE_L          (133),
		.PKT_RESPONSE_STATUS_L     (152),
		.PKT_RESPONSE_STATUS_H     (153),
		.PKT_BURSTWRAP_H           (129),
		.PKT_BURSTWRAP_L           (122),
		.PKT_BYTE_CNT_H            (121),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (142),
		.PKT_SRC_ID_L              (142),
		.PKT_DEST_ID_H             (143),
		.PKT_DEST_ID_L             (143),
		.PKT_THREAD_ID_H           (144),
		.PKT_THREAD_ID_L           (144),
		.PKT_QOS_L                 (138),
		.PKT_QOS_H                 (141),
		.PKT_ORI_BURST_SIZE_L      (154),
		.PKT_ORI_BURST_SIZE_H      (156),
		.PKT_DATA_SIDEBAND_H       (136),
		.PKT_DATA_SIDEBAND_L       (136),
		.ST_DATA_W                 (157),
		.ST_CHANNEL_W              (2),
		.ID                        (0)
	) fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent (
		.aclk                   (arria10_hps_h2f_user0_clock_clk),                                                          //              clk.clk
		.aresetn                (~fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_write_cp_valid),                              //         write_cp.valid
		.write_cp_data          (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_write_cp_data),                               //                 .data
		.write_cp_startofpacket (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_write_cp_startofpacket),                      //                 .startofpacket
		.write_cp_endofpacket   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_write_cp_endofpacket),                        //                 .endofpacket
		.write_cp_ready         (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_write_cp_ready),                              //                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                                                        //         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                                                         //                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                                                      //                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                                                //                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                                                  //                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                                                        //                 .ready
		.read_cp_valid          (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_read_cp_valid),                               //          read_cp.valid
		.read_cp_data           (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_read_cp_data),                                //                 .data
		.read_cp_startofpacket  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_read_cp_startofpacket),                       //                 .startofpacket
		.read_cp_endofpacket    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_read_cp_endofpacket),                         //                 .endofpacket
		.read_cp_ready          (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_read_cp_ready),                               //                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                                                    //          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                                                     //                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                                                  //                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                                                            //                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                                                              //                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                                                    //                 .ready
		.awid                   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awid),                                // altera_axi_slave.awid
		.awaddr                 (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awaddr),                              //                 .awaddr
		.awlen                  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awlen),                               //                 .awlen
		.awsize                 (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awsize),                              //                 .awsize
		.awburst                (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awburst),                             //                 .awburst
		.awlock                 (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awlock),                              //                 .awlock
		.awcache                (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awcache),                             //                 .awcache
		.awprot                 (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awprot),                              //                 .awprot
		.awuser                 (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awuser),                              //                 .awuser
		.awqos                  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awqos),                               //                 .awqos
		.awregion               (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awregion),                            //                 .awregion
		.awvalid                (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awvalid),                             //                 .awvalid
		.awready                (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_awready),                             //                 .awready
		.wdata                  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_wdata),                               //                 .wdata
		.wstrb                  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_wstrb),                               //                 .wstrb
		.wlast                  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_wlast),                               //                 .wlast
		.wvalid                 (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_wvalid),                              //                 .wvalid
		.wuser                  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_wuser),                               //                 .wuser
		.wready                 (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_wready),                              //                 .wready
		.bid                    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_bid),                                 //                 .bid
		.bresp                  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_bresp),                               //                 .bresp
		.buser                  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_buser),                               //                 .buser
		.bvalid                 (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_bvalid),                              //                 .bvalid
		.bready                 (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_bready),                              //                 .bready
		.arid                   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arid),                                //                 .arid
		.araddr                 (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_araddr),                              //                 .araddr
		.arlen                  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arlen),                               //                 .arlen
		.arsize                 (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arsize),                              //                 .arsize
		.arburst                (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arburst),                             //                 .arburst
		.arlock                 (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arlock),                              //                 .arlock
		.arcache                (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arcache),                             //                 .arcache
		.arprot                 (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arprot),                              //                 .arprot
		.aruser                 (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_aruser),                              //                 .aruser
		.arqos                  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arqos),                               //                 .arqos
		.arregion               (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arregion),                            //                 .arregion
		.arvalid                (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arvalid),                             //                 .arvalid
		.arready                (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_arready),                             //                 .arready
		.rid                    (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_rid),                                 //                 .rid
		.rdata                  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_rdata),                               //                 .rdata
		.rresp                  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_rresp),                               //                 .rresp
		.rlast                  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_rlast),                               //                 .rlast
		.rvalid                 (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_rvalid),                              //                 .rvalid
		.rready                 (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_rready),                              //                 .rready
		.ruser                  (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_m0_ruser),                               //                 .ruser
		.wid                    (1'b0)                                                                                      //      (terminated)
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (141),
		.PKT_QOS_L                   (138),
		.PKT_THREAD_ID_H             (144),
		.PKT_THREAD_ID_L             (144),
		.PKT_RESPONSE_STATUS_H       (153),
		.PKT_RESPONSE_STATUS_L       (152),
		.PKT_BEGIN_BURST             (137),
		.PKT_CACHE_H                 (151),
		.PKT_CACHE_L                 (148),
		.PKT_DATA_SIDEBAND_H         (136),
		.PKT_DATA_SIDEBAND_L         (136),
		.PKT_ADDR_SIDEBAND_H         (135),
		.PKT_ADDR_SIDEBAND_L         (135),
		.PKT_BURST_TYPE_H            (134),
		.PKT_BURST_TYPE_L            (133),
		.PKT_PROTECTION_H            (147),
		.PKT_PROTECTION_L            (145),
		.PKT_BURST_SIZE_H            (132),
		.PKT_BURST_SIZE_L            (130),
		.PKT_BURSTWRAP_H             (129),
		.PKT_BURSTWRAP_L             (122),
		.PKT_BYTE_CNT_H              (121),
		.PKT_BYTE_CNT_L              (110),
		.PKT_ADDR_H                  (103),
		.PKT_ADDR_L                  (72),
		.PKT_TRANS_EXCLUSIVE         (109),
		.PKT_TRANS_LOCK              (108),
		.PKT_TRANS_COMPRESSED_READ   (104),
		.PKT_TRANS_POSTED            (105),
		.PKT_TRANS_WRITE             (106),
		.PKT_TRANS_READ              (107),
		.PKT_DATA_H                  (63),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (71),
		.PKT_BYTEEN_L                (64),
		.PKT_SRC_ID_H                (142),
		.PKT_SRC_ID_L                (142),
		.PKT_DEST_ID_H               (143),
		.PKT_DEST_ID_L               (143),
		.PKT_ORI_BURST_SIZE_L        (154),
		.PKT_ORI_BURST_SIZE_H        (156),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (157),
		.ADDR_WIDTH                  (32),
		.RDATA_WIDTH                 (64),
		.WDATA_WIDTH                 (64),
		.ST_CHANNEL_W                (2),
		.AXI_SLAVE_ID_W              (4),
		.PASS_ID_TO_SLAVE            (1),
		.AXI_VERSION                 ("AXI3"),
		.WRITE_ACCEPTANCE_CAPABILITY (16),
		.READ_ACCEPTANCE_CAPABILITY  (16)
	) sys_mem_interconnect_axi0_s0_agent (
		.aclk                   (clk_0_clk_clk),                                                    //        clock_sink.clk
		.aresetn                (~sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), //        reset_sink.reset_n
		.read_cp_valid          (agent_pipeline_001_source0_valid),                                 //           read_cp.valid
		.read_cp_ready          (agent_pipeline_001_source0_ready),                                 //                  .ready
		.read_cp_data           (agent_pipeline_001_source0_data),                                  //                  .data
		.read_cp_channel        (agent_pipeline_001_source0_channel),                               //                  .channel
		.read_cp_startofpacket  (agent_pipeline_001_source0_startofpacket),                         //                  .startofpacket
		.read_cp_endofpacket    (agent_pipeline_001_source0_endofpacket),                           //                  .endofpacket
		.write_cp_ready         (agent_pipeline_source0_ready),                                     //          write_cp.ready
		.write_cp_valid         (agent_pipeline_source0_valid),                                     //                  .valid
		.write_cp_data          (agent_pipeline_source0_data),                                      //                  .data
		.write_cp_channel       (agent_pipeline_source0_channel),                                   //                  .channel
		.write_cp_startofpacket (agent_pipeline_source0_startofpacket),                             //                  .startofpacket
		.write_cp_endofpacket   (agent_pipeline_source0_endofpacket),                               //                  .endofpacket
		.read_rp_ready          (sys_mem_interconnect_axi0_s0_agent_read_rp_ready),                 //           read_rp.ready
		.read_rp_valid          (sys_mem_interconnect_axi0_s0_agent_read_rp_valid),                 //                  .valid
		.read_rp_data           (sys_mem_interconnect_axi0_s0_agent_read_rp_data),                  //                  .data
		.read_rp_startofpacket  (sys_mem_interconnect_axi0_s0_agent_read_rp_startofpacket),         //                  .startofpacket
		.read_rp_endofpacket    (sys_mem_interconnect_axi0_s0_agent_read_rp_endofpacket),           //                  .endofpacket
		.write_rp_ready         (sys_mem_interconnect_axi0_s0_agent_write_rp_ready),                //          write_rp.ready
		.write_rp_valid         (sys_mem_interconnect_axi0_s0_agent_write_rp_valid),                //                  .valid
		.write_rp_data          (sys_mem_interconnect_axi0_s0_agent_write_rp_data),                 //                  .data
		.write_rp_startofpacket (sys_mem_interconnect_axi0_s0_agent_write_rp_startofpacket),        //                  .startofpacket
		.write_rp_endofpacket   (sys_mem_interconnect_axi0_s0_agent_write_rp_endofpacket),          //                  .endofpacket
		.awid                   (sys_mem_interconnect_axi0_s0_awid),                                // altera_axi_master.awid
		.awaddr                 (sys_mem_interconnect_axi0_s0_awaddr),                              //                  .awaddr
		.awlen                  (sys_mem_interconnect_axi0_s0_awlen),                               //                  .awlen
		.awsize                 (sys_mem_interconnect_axi0_s0_awsize),                              //                  .awsize
		.awburst                (sys_mem_interconnect_axi0_s0_awburst),                             //                  .awburst
		.awlock                 (sys_mem_interconnect_axi0_s0_awlock),                              //                  .awlock
		.awcache                (sys_mem_interconnect_axi0_s0_awcache),                             //                  .awcache
		.awprot                 (sys_mem_interconnect_axi0_s0_awprot),                              //                  .awprot
		.awvalid                (sys_mem_interconnect_axi0_s0_awvalid),                             //                  .awvalid
		.awready                (sys_mem_interconnect_axi0_s0_awready),                             //                  .awready
		.wid                    (sys_mem_interconnect_axi0_s0_wid),                                 //                  .wid
		.wdata                  (sys_mem_interconnect_axi0_s0_wdata),                               //                  .wdata
		.wstrb                  (sys_mem_interconnect_axi0_s0_wstrb),                               //                  .wstrb
		.wlast                  (sys_mem_interconnect_axi0_s0_wlast),                               //                  .wlast
		.wvalid                 (sys_mem_interconnect_axi0_s0_wvalid),                              //                  .wvalid
		.wready                 (sys_mem_interconnect_axi0_s0_wready),                              //                  .wready
		.bid                    (sys_mem_interconnect_axi0_s0_bid),                                 //                  .bid
		.bresp                  (sys_mem_interconnect_axi0_s0_bresp),                               //                  .bresp
		.bvalid                 (sys_mem_interconnect_axi0_s0_bvalid),                              //                  .bvalid
		.bready                 (sys_mem_interconnect_axi0_s0_bready),                              //                  .bready
		.arid                   (sys_mem_interconnect_axi0_s0_arid),                                //                  .arid
		.araddr                 (sys_mem_interconnect_axi0_s0_araddr),                              //                  .araddr
		.arlen                  (sys_mem_interconnect_axi0_s0_arlen),                               //                  .arlen
		.arsize                 (sys_mem_interconnect_axi0_s0_arsize),                              //                  .arsize
		.arburst                (sys_mem_interconnect_axi0_s0_arburst),                             //                  .arburst
		.arlock                 (sys_mem_interconnect_axi0_s0_arlock),                              //                  .arlock
		.arcache                (sys_mem_interconnect_axi0_s0_arcache),                             //                  .arcache
		.arprot                 (sys_mem_interconnect_axi0_s0_arprot),                              //                  .arprot
		.arvalid                (sys_mem_interconnect_axi0_s0_arvalid),                             //                  .arvalid
		.arready                (sys_mem_interconnect_axi0_s0_arready),                             //                  .arready
		.rid                    (sys_mem_interconnect_axi0_s0_rid),                                 //                  .rid
		.rdata                  (sys_mem_interconnect_axi0_s0_rdata),                               //                  .rdata
		.rresp                  (sys_mem_interconnect_axi0_s0_rresp),                               //                  .rresp
		.rlast                  (sys_mem_interconnect_axi0_s0_rlast),                               //                  .rlast
		.rvalid                 (sys_mem_interconnect_axi0_s0_rvalid),                              //                  .rvalid
		.rready                 (sys_mem_interconnect_axi0_s0_rready),                              //                  .rready
		.awuser                 (),                                                                 //       (terminated)
		.aruser                 ()                                                                  //       (terminated)
	);

	ghrd_10as066n2_altera_merlin_router_161_y3bawqa router (
		.sink_ready         (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_write_cp_ready),                             //      sink.ready
		.sink_valid         (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_write_cp_valid),                             //          .valid
		.sink_data          (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_write_cp_data),                              //          .data
		.sink_startofpacket (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_write_cp_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_write_cp_endofpacket),                       //          .endofpacket
		.clk                (arria10_hps_h2f_user0_clock_clk),                                                         //       clk.clk
		.reset              (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                                        //       src.ready
		.src_valid          (router_src_valid),                                                                        //          .valid
		.src_data           (router_src_data),                                                                         //          .data
		.src_channel        (router_src_channel),                                                                      //          .channel
		.src_startofpacket  (router_src_startofpacket),                                                                //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                                   //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_f5u5xsy router_001 (
		.sink_ready         (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_read_cp_ready),                              //      sink.ready
		.sink_valid         (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_read_cp_valid),                              //          .valid
		.sink_data          (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_read_cp_data),                               //          .data
		.sink_startofpacket (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_read_cp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_agent_read_cp_endofpacket),                        //          .endofpacket
		.clk                (arria10_hps_h2f_user0_clock_clk),                                                         //       clk.clk
		.reset              (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                                    //       src.ready
		.src_valid          (router_001_src_valid),                                                                    //          .valid
		.src_data           (router_001_src_data),                                                                     //          .data
		.src_channel        (router_001_src_channel),                                                                  //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                                            //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                                               //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_sf3gkfq router_002 (
		.sink_ready         (agent_pipeline_002_source0_ready),                                //      sink.ready
		.sink_valid         (agent_pipeline_002_source0_valid),                                //          .valid
		.sink_data          (agent_pipeline_002_source0_data),                                 //          .data
		.sink_startofpacket (agent_pipeline_002_source0_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (agent_pipeline_002_source0_endofpacket),                          //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                            //       src.ready
		.src_valid          (router_002_src_valid),                                            //          .valid
		.src_data           (router_002_src_data),                                             //          .data
		.src_channel        (router_002_src_channel),                                          //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                       //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_yihgoia router_003 (
		.sink_ready         (agent_pipeline_003_source0_ready),                                //      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),                                //          .valid
		.sink_data          (agent_pipeline_003_source0_data),                                 //          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),                          //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                            //       src.ready
		.src_valid          (router_003_src_valid),                                            //          .valid
		.src_data           (router_003_src_data),                                             //          .data
		.src_channel        (router_003_src_channel),                                          //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                       //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_BEGIN_BURST           (137),
		.PKT_BYTE_CNT_H            (121),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_BURST_SIZE_H          (132),
		.PKT_BURST_SIZE_L          (130),
		.PKT_BURST_TYPE_H          (134),
		.PKT_BURST_TYPE_L          (133),
		.PKT_BURSTWRAP_H           (129),
		.PKT_BURSTWRAP_L           (122),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.OUT_NARROW_SIZE           (1),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (1),
		.OUT_COMPLETE_WRAP         (1),
		.ST_DATA_W                 (157),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (117),
		.OUT_BURSTWRAP_H           (129),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (0),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sys_mem_interconnect_axi0_s0_wr_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                       //       cr0.clk
		.reset                 (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                                   //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                    //          .data
		.sink0_channel         (cmd_mux_src_channel),                                                 //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                             //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                                   //          .ready
		.source0_valid         (sys_mem_interconnect_axi0_s0_wr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sys_mem_interconnect_axi0_s0_wr_burst_adapter_source0_data),          //          .data
		.source0_channel       (sys_mem_interconnect_axi0_s0_wr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sys_mem_interconnect_axi0_s0_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sys_mem_interconnect_axi0_s0_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sys_mem_interconnect_axi0_s0_wr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_BEGIN_BURST           (137),
		.PKT_BYTE_CNT_H            (121),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_BURST_SIZE_H          (132),
		.PKT_BURST_SIZE_L          (130),
		.PKT_BURST_TYPE_H          (134),
		.PKT_BURST_TYPE_L          (133),
		.PKT_BURSTWRAP_H           (129),
		.PKT_BURSTWRAP_L           (122),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.OUT_NARROW_SIZE           (1),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (1),
		.OUT_COMPLETE_WRAP         (1),
		.ST_DATA_W                 (157),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (117),
		.OUT_BURSTWRAP_H           (129),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (0),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sys_mem_interconnect_axi0_s0_rd_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                       //       cr0.clk
		.reset                 (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                               //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                                //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                             //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                         //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                               //          .ready
		.source0_valid         (sys_mem_interconnect_axi0_s0_rd_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sys_mem_interconnect_axi0_s0_rd_burst_adapter_source0_data),          //          .data
		.source0_channel       (sys_mem_interconnect_axi0_s0_rd_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sys_mem_interconnect_axi0_s0_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sys_mem_interconnect_axi0_s0_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sys_mem_interconnect_axi0_s0_rd_burst_adapter_source0_ready)          //          .ready
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_upz5nya cmd_demux (
		.clk                (arria10_hps_h2f_user0_clock_clk),                                                         //       clk.clk
		.reset              (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                                                        //      sink.ready
		.sink_channel       (router_src_channel),                                                                      //          .channel
		.sink_data          (router_src_data),                                                                         //          .data
		.sink_startofpacket (router_src_startofpacket),                                                                //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                                                  //          .endofpacket
		.sink_valid         (router_src_valid),                                                                        //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                                                    //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                                    //          .valid
		.src0_data          (cmd_demux_src0_data),                                                                     //          .data
		.src0_channel       (cmd_demux_src0_channel),                                                                  //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                                            //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                                               //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_upz5nya cmd_demux_001 (
		.clk                (arria10_hps_h2f_user0_clock_clk),                                                         //       clk.clk
		.reset              (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                                                    //      sink.ready
		.sink_channel       (router_001_src_channel),                                                                  //          .channel
		.sink_data          (router_001_src_data),                                                                     //          .data
		.sink_startofpacket (router_001_src_startofpacket),                                                            //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                                              //          .endofpacket
		.sink_valid         (router_001_src_valid),                                                                    //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                                                //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                                                //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                                                 //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                                              //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                                        //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                                           //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_6f2tghi cmd_mux (
		.clk                 (clk_0_clk_clk),                                                   //       clk.clk
		.reset               (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                               //       src.ready
		.src_valid           (cmd_mux_src_valid),                                               //          .valid
		.src_data            (cmd_mux_src_data),                                                //          .data
		.src_channel         (cmd_mux_src_channel),                                             //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                                      //     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                                      //          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                                    //          .channel
		.sink0_data          (mux_pipeline_source0_data),                                       //          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket)                                 //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_6f2tghi cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                                   //       clk.clk
		.reset               (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                           //          .valid
		.src_data            (cmd_mux_001_src_data),                                            //          .data
		.src_channel         (cmd_mux_001_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (mux_pipeline_001_source0_ready),                                  //     sink0.ready
		.sink0_valid         (mux_pipeline_001_source0_valid),                                  //          .valid
		.sink0_channel       (mux_pipeline_001_source0_channel),                                //          .channel
		.sink0_data          (mux_pipeline_001_source0_data),                                   //          .data
		.sink0_startofpacket (mux_pipeline_001_source0_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_001_source0_endofpacket)                             //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_vlpmgzq rsp_demux (
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                            //      sink.ready
		.sink_channel       (router_002_src_channel),                                          //          .channel
		.sink_data          (router_002_src_data),                                             //          .data
		.sink_startofpacket (router_002_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_002_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                            //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                            //          .valid
		.src0_data          (rsp_demux_src0_data),                                             //          .data
		.src0_channel       (rsp_demux_src0_channel),                                          //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                       //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_vlpmgzq rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                            //      sink.ready
		.sink_channel       (router_003_src_channel),                                          //          .channel
		.sink_data          (router_003_src_data),                                             //          .data
		.sink_startofpacket (router_003_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_003_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                   //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_5ctisdy rsp_mux (
		.clk                 (arria10_hps_h2f_user0_clock_clk),                                                         //       clk.clk
		.reset               (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                                       //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                                       //          .valid
		.src_data            (rsp_mux_src_data),                                                                        //          .data
		.src_channel         (rsp_mux_src_channel),                                                                     //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                               //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                                 //          .endofpacket
		.sink0_ready         (mux_pipeline_002_source0_ready),                                                          //     sink0.ready
		.sink0_valid         (mux_pipeline_002_source0_valid),                                                          //          .valid
		.sink0_channel       (mux_pipeline_002_source0_channel),                                                        //          .channel
		.sink0_data          (mux_pipeline_002_source0_data),                                                           //          .data
		.sink0_startofpacket (mux_pipeline_002_source0_startofpacket),                                                  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_002_source0_endofpacket)                                                     //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_5ctisdy rsp_mux_001 (
		.clk                 (arria10_hps_h2f_user0_clock_clk),                                                         //       clk.clk
		.reset               (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                                   //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                                   //          .valid
		.src_data            (rsp_mux_001_src_data),                                                                    //          .data
		.src_channel         (rsp_mux_001_src_channel),                                                                 //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                                           //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                                             //          .endofpacket
		.sink0_ready         (mux_pipeline_003_source0_ready),                                                          //     sink0.ready
		.sink0_valid         (mux_pipeline_003_source0_valid),                                                          //          .valid
		.sink0_channel       (mux_pipeline_003_source0_channel),                                                        //          .channel
		.sink0_data          (mux_pipeline_003_source0_data),                                                           //          .data
		.sink0_startofpacket (mux_pipeline_003_source0_startofpacket),                                                  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_003_source0_endofpacket)                                                     //          .endofpacket
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (157),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (2),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3)
	) async_fifo (
		.in_clk            (arria10_hps_h2f_user0_clock_clk),                                                          //        in_clk.clk
		.in_reset_n        (~fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset_n
		.out_clk           (clk_0_clk_clk),                                                                            //       out_clk.clk
		.out_reset_n       (~sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset),                         // out_clk_reset.reset_n
		.in_data           (cmd_demux_src0_data),                                                                      //            in.data
		.in_valid          (cmd_demux_src0_valid),                                                                     //              .valid
		.in_ready          (cmd_demux_src0_ready),                                                                     //              .ready
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                                             //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                                               //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                                                   //              .channel
		.out_data          (async_fifo_out_data),                                                                      //           out.data
		.out_valid         (async_fifo_out_valid),                                                                     //              .valid
		.out_ready         (async_fifo_out_ready),                                                                     //              .ready
		.out_startofpacket (async_fifo_out_startofpacket),                                                             //              .startofpacket
		.out_endofpacket   (async_fifo_out_endofpacket),                                                               //              .endofpacket
		.out_channel       (async_fifo_out_channel),                                                                   //              .channel
		.in_csr_address    (1'b0),                                                                                     //   (terminated)
		.in_csr_read       (1'b0),                                                                                     //   (terminated)
		.in_csr_write      (1'b0),                                                                                     //   (terminated)
		.in_csr_readdata   (),                                                                                         //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000),                                                     //   (terminated)
		.out_csr_address   (1'b0),                                                                                     //   (terminated)
		.out_csr_read      (1'b0),                                                                                     //   (terminated)
		.out_csr_write     (1'b0),                                                                                     //   (terminated)
		.out_csr_readdata  (),                                                                                         //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000),                                                     //   (terminated)
		.in_empty          (1'b0),                                                                                     //   (terminated)
		.out_empty         (),                                                                                         //   (terminated)
		.in_error          (1'b0),                                                                                     //   (terminated)
		.out_error         (),                                                                                         //   (terminated)
		.space_avail_data  ()                                                                                          //   (terminated)
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (157),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (2),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3)
	) async_fifo_001 (
		.in_clk            (arria10_hps_h2f_user0_clock_clk),                                                          //        in_clk.clk
		.in_reset_n        (~fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset_n
		.out_clk           (clk_0_clk_clk),                                                                            //       out_clk.clk
		.out_reset_n       (~sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset),                         // out_clk_reset.reset_n
		.in_data           (cmd_demux_001_src0_data),                                                                  //            in.data
		.in_valid          (cmd_demux_001_src0_valid),                                                                 //              .valid
		.in_ready          (cmd_demux_001_src0_ready),                                                                 //              .ready
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                                                         //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                                                           //              .endofpacket
		.in_channel        (cmd_demux_001_src0_channel),                                                               //              .channel
		.out_data          (async_fifo_001_out_data),                                                                  //           out.data
		.out_valid         (async_fifo_001_out_valid),                                                                 //              .valid
		.out_ready         (async_fifo_001_out_ready),                                                                 //              .ready
		.out_startofpacket (async_fifo_001_out_startofpacket),                                                         //              .startofpacket
		.out_endofpacket   (async_fifo_001_out_endofpacket),                                                           //              .endofpacket
		.out_channel       (async_fifo_001_out_channel),                                                               //              .channel
		.in_csr_address    (1'b0),                                                                                     //   (terminated)
		.in_csr_read       (1'b0),                                                                                     //   (terminated)
		.in_csr_write      (1'b0),                                                                                     //   (terminated)
		.in_csr_readdata   (),                                                                                         //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000),                                                     //   (terminated)
		.out_csr_address   (1'b0),                                                                                     //   (terminated)
		.out_csr_read      (1'b0),                                                                                     //   (terminated)
		.out_csr_write     (1'b0),                                                                                     //   (terminated)
		.out_csr_readdata  (),                                                                                         //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000),                                                     //   (terminated)
		.in_empty          (1'b0),                                                                                     //   (terminated)
		.out_empty         (),                                                                                         //   (terminated)
		.in_error          (1'b0),                                                                                     //   (terminated)
		.out_error         (),                                                                                         //   (terminated)
		.space_avail_data  ()                                                                                          //   (terminated)
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (157),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (2),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3)
	) async_fifo_002 (
		.in_clk            (clk_0_clk_clk),                                                                            //        in_clk.clk
		.in_reset_n        (~sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset),                         //  in_clk_reset.reset_n
		.out_clk           (arria10_hps_h2f_user0_clock_clk),                                                          //       out_clk.clk
		.out_reset_n       (~fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset_n
		.in_data           (rsp_demux_src0_data),                                                                      //            in.data
		.in_valid          (rsp_demux_src0_valid),                                                                     //              .valid
		.in_ready          (rsp_demux_src0_ready),                                                                     //              .ready
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                                             //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                                               //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                                                   //              .channel
		.out_data          (async_fifo_002_out_data),                                                                  //           out.data
		.out_valid         (async_fifo_002_out_valid),                                                                 //              .valid
		.out_ready         (async_fifo_002_out_ready),                                                                 //              .ready
		.out_startofpacket (async_fifo_002_out_startofpacket),                                                         //              .startofpacket
		.out_endofpacket   (async_fifo_002_out_endofpacket),                                                           //              .endofpacket
		.out_channel       (async_fifo_002_out_channel),                                                               //              .channel
		.in_csr_address    (1'b0),                                                                                     //   (terminated)
		.in_csr_read       (1'b0),                                                                                     //   (terminated)
		.in_csr_write      (1'b0),                                                                                     //   (terminated)
		.in_csr_readdata   (),                                                                                         //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000),                                                     //   (terminated)
		.out_csr_address   (1'b0),                                                                                     //   (terminated)
		.out_csr_read      (1'b0),                                                                                     //   (terminated)
		.out_csr_write     (1'b0),                                                                                     //   (terminated)
		.out_csr_readdata  (),                                                                                         //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000),                                                     //   (terminated)
		.in_empty          (1'b0),                                                                                     //   (terminated)
		.out_empty         (),                                                                                         //   (terminated)
		.in_error          (1'b0),                                                                                     //   (terminated)
		.out_error         (),                                                                                         //   (terminated)
		.space_avail_data  ()                                                                                          //   (terminated)
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (157),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (2),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3)
	) async_fifo_003 (
		.in_clk            (clk_0_clk_clk),                                                                            //        in_clk.clk
		.in_reset_n        (~sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset),                         //  in_clk_reset.reset_n
		.out_clk           (arria10_hps_h2f_user0_clock_clk),                                                          //       out_clk.clk
		.out_reset_n       (~fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset_n
		.in_data           (rsp_demux_001_src0_data),                                                                  //            in.data
		.in_valid          (rsp_demux_001_src0_valid),                                                                 //              .valid
		.in_ready          (rsp_demux_001_src0_ready),                                                                 //              .ready
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                                                         //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                                                           //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                                                               //              .channel
		.out_data          (async_fifo_003_out_data),                                                                  //           out.data
		.out_valid         (async_fifo_003_out_valid),                                                                 //              .valid
		.out_ready         (async_fifo_003_out_ready),                                                                 //              .ready
		.out_startofpacket (async_fifo_003_out_startofpacket),                                                         //              .startofpacket
		.out_endofpacket   (async_fifo_003_out_endofpacket),                                                           //              .endofpacket
		.out_channel       (async_fifo_003_out_channel),                                                               //              .channel
		.in_csr_address    (1'b0),                                                                                     //   (terminated)
		.in_csr_read       (1'b0),                                                                                     //   (terminated)
		.in_csr_write      (1'b0),                                                                                     //   (terminated)
		.in_csr_readdata   (),                                                                                         //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000),                                                     //   (terminated)
		.out_csr_address   (1'b0),                                                                                     //   (terminated)
		.out_csr_read      (1'b0),                                                                                     //   (terminated)
		.out_csr_write     (1'b0),                                                                                     //   (terminated)
		.out_csr_readdata  (),                                                                                         //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000),                                                     //   (terminated)
		.in_empty          (1'b0),                                                                                     //   (terminated)
		.out_empty         (),                                                                                         //   (terminated)
		.in_error          (1'b0),                                                                                     //   (terminated)
		.out_error         (),                                                                                         //   (terminated)
		.space_avail_data  ()                                                                                          //   (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (157),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (clk_0_clk_clk),                                                       //       cr0.clk
		.reset             (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (sys_mem_interconnect_axi0_s0_wr_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (sys_mem_interconnect_axi0_s0_wr_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (sys_mem_interconnect_axi0_s0_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (sys_mem_interconnect_axi0_s0_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (sys_mem_interconnect_axi0_s0_wr_burst_adapter_source0_data),          //          .data
		.in_channel        (sys_mem_interconnect_axi0_s0_wr_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_source0_ready),                                        //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                                        //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                                //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                                  //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                                         //          .data
		.out_channel       (agent_pipeline_source0_channel),                                      //          .channel
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_error          (1'b0)                                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (157),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (clk_0_clk_clk),                                                       //       cr0.clk
		.reset             (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (sys_mem_interconnect_axi0_s0_rd_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (sys_mem_interconnect_axi0_s0_rd_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (sys_mem_interconnect_axi0_s0_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (sys_mem_interconnect_axi0_s0_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (sys_mem_interconnect_axi0_s0_rd_burst_adapter_source0_data),          //          .data
		.in_channel        (sys_mem_interconnect_axi0_s0_rd_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_001_source0_ready),                                    //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                                    //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),                            //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),                              //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                                     //          .data
		.out_channel       (agent_pipeline_001_source0_channel),                                  //          .channel
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_error          (1'b0)                                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (157),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_002 (
		.clk               (clk_0_clk_clk),                                                   //       cr0.clk
		.reset             (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (sys_mem_interconnect_axi0_s0_agent_write_rp_ready),               //     sink0.ready
		.in_valid          (sys_mem_interconnect_axi0_s0_agent_write_rp_valid),               //          .valid
		.in_startofpacket  (sys_mem_interconnect_axi0_s0_agent_write_rp_startofpacket),       //          .startofpacket
		.in_endofpacket    (sys_mem_interconnect_axi0_s0_agent_write_rp_endofpacket),         //          .endofpacket
		.in_data           (sys_mem_interconnect_axi0_s0_agent_write_rp_data),                //          .data
		.out_ready         (agent_pipeline_002_source0_ready),                                //   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),                                //          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket),                        //          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),                          //          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),                                 //          .data
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_channel       (),                                                                // (terminated)
		.in_channel        (1'b0)                                                             // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (157),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_003 (
		.clk               (clk_0_clk_clk),                                                   //       cr0.clk
		.reset             (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (sys_mem_interconnect_axi0_s0_agent_read_rp_ready),                //     sink0.ready
		.in_valid          (sys_mem_interconnect_axi0_s0_agent_read_rp_valid),                //          .valid
		.in_startofpacket  (sys_mem_interconnect_axi0_s0_agent_read_rp_startofpacket),        //          .startofpacket
		.in_endofpacket    (sys_mem_interconnect_axi0_s0_agent_read_rp_endofpacket),          //          .endofpacket
		.in_data           (sys_mem_interconnect_axi0_s0_agent_read_rp_data),                 //          .data
		.out_ready         (agent_pipeline_003_source0_ready),                                //   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),                                //          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket),                        //          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),                          //          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),                                 //          .data
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_channel       (),                                                                // (terminated)
		.in_channel        (1'b0)                                                             // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (157),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline (
		.clk               (clk_0_clk_clk),                                                   //       cr0.clk
		.reset             (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (async_fifo_out_ready),                                            //     sink0.ready
		.in_valid          (async_fifo_out_valid),                                            //          .valid
		.in_startofpacket  (async_fifo_out_startofpacket),                                    //          .startofpacket
		.in_endofpacket    (async_fifo_out_endofpacket),                                      //          .endofpacket
		.in_data           (async_fifo_out_data),                                             //          .data
		.in_channel        (async_fifo_out_channel),                                          //          .channel
		.out_ready         (mux_pipeline_source0_ready),                                      //   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                                      //          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),                              //          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),                                //          .endofpacket
		.out_data          (mux_pipeline_source0_data),                                       //          .data
		.out_channel       (mux_pipeline_source0_channel),                                    //          .channel
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_error          (1'b0)                                                             // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (157),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_001 (
		.clk               (clk_0_clk_clk),                                                   //       cr0.clk
		.reset             (sys_mem_interconnect_axi0_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (async_fifo_001_out_ready),                                        //     sink0.ready
		.in_valid          (async_fifo_001_out_valid),                                        //          .valid
		.in_startofpacket  (async_fifo_001_out_startofpacket),                                //          .startofpacket
		.in_endofpacket    (async_fifo_001_out_endofpacket),                                  //          .endofpacket
		.in_data           (async_fifo_001_out_data),                                         //          .data
		.in_channel        (async_fifo_001_out_channel),                                      //          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                                  //   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                                  //          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),                          //          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),                            //          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                                   //          .data
		.out_channel       (mux_pipeline_001_source0_channel),                                //          .channel
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_error          (1'b0)                                                             // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (157),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_002 (
		.clk               (arria10_hps_h2f_user0_clock_clk),                                                         //       cr0.clk
		.reset             (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (async_fifo_002_out_ready),                                                                //     sink0.ready
		.in_valid          (async_fifo_002_out_valid),                                                                //          .valid
		.in_startofpacket  (async_fifo_002_out_startofpacket),                                                        //          .startofpacket
		.in_endofpacket    (async_fifo_002_out_endofpacket),                                                          //          .endofpacket
		.in_data           (async_fifo_002_out_data),                                                                 //          .data
		.in_channel        (async_fifo_002_out_channel),                                                              //          .channel
		.out_ready         (mux_pipeline_002_source0_ready),                                                          //   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),                                                          //          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),                                                  //          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),                                                    //          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),                                                           //          .data
		.out_channel       (mux_pipeline_002_source0_channel),                                                        //          .channel
		.in_empty          (1'b0),                                                                                    // (terminated)
		.out_empty         (),                                                                                        // (terminated)
		.out_error         (),                                                                                        // (terminated)
		.in_error          (1'b0)                                                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (157),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_003 (
		.clk               (arria10_hps_h2f_user0_clock_clk),                                                         //       cr0.clk
		.reset             (fmcomms2_axi_ad9361_adc_dma_m_dest_axi_translator_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (async_fifo_003_out_ready),                                                                //     sink0.ready
		.in_valid          (async_fifo_003_out_valid),                                                                //          .valid
		.in_startofpacket  (async_fifo_003_out_startofpacket),                                                        //          .startofpacket
		.in_endofpacket    (async_fifo_003_out_endofpacket),                                                          //          .endofpacket
		.in_data           (async_fifo_003_out_data),                                                                 //          .data
		.in_channel        (async_fifo_003_out_channel),                                                              //          .channel
		.out_ready         (mux_pipeline_003_source0_ready),                                                          //   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),                                                          //          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),                                                  //          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),                                                    //          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),                                                           //          .data
		.out_channel       (mux_pipeline_003_source0_channel),                                                        //          .channel
		.in_empty          (1'b0),                                                                                    // (terminated)
		.out_empty         (),                                                                                        // (terminated)
		.out_error         (),                                                                                        // (terminated)
		.in_error          (1'b0)                                                                                     // (terminated)
	);

endmodule
