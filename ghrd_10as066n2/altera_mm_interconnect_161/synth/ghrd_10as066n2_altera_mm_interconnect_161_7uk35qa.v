// ghrd_10as066n2_altera_mm_interconnect_161_7uk35qa.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 203

`timescale 1 ps / 1 ps
module ghrd_10as066n2_altera_mm_interconnect_161_7uk35qa (
		output wire [3:0]   arria10_hps_0_f2sdram0_data_awid,                         //                        arria10_hps_0_f2sdram0_data.awid
		output wire [31:0]  arria10_hps_0_f2sdram0_data_awaddr,                       //                                                   .awaddr
		output wire [3:0]   arria10_hps_0_f2sdram0_data_awlen,                        //                                                   .awlen
		output wire [2:0]   arria10_hps_0_f2sdram0_data_awsize,                       //                                                   .awsize
		output wire [1:0]   arria10_hps_0_f2sdram0_data_awburst,                      //                                                   .awburst
		output wire [1:0]   arria10_hps_0_f2sdram0_data_awlock,                       //                                                   .awlock
		output wire [3:0]   arria10_hps_0_f2sdram0_data_awcache,                      //                                                   .awcache
		output wire [2:0]   arria10_hps_0_f2sdram0_data_awprot,                       //                                                   .awprot
		output wire [4:0]   arria10_hps_0_f2sdram0_data_awuser,                       //                                                   .awuser
		output wire         arria10_hps_0_f2sdram0_data_awvalid,                      //                                                   .awvalid
		input  wire         arria10_hps_0_f2sdram0_data_awready,                      //                                                   .awready
		output wire [3:0]   arria10_hps_0_f2sdram0_data_wid,                          //                                                   .wid
		output wire [127:0] arria10_hps_0_f2sdram0_data_wdata,                        //                                                   .wdata
		output wire [15:0]  arria10_hps_0_f2sdram0_data_wstrb,                        //                                                   .wstrb
		output wire         arria10_hps_0_f2sdram0_data_wlast,                        //                                                   .wlast
		output wire         arria10_hps_0_f2sdram0_data_wvalid,                       //                                                   .wvalid
		input  wire         arria10_hps_0_f2sdram0_data_wready,                       //                                                   .wready
		input  wire [3:0]   arria10_hps_0_f2sdram0_data_bid,                          //                                                   .bid
		input  wire [1:0]   arria10_hps_0_f2sdram0_data_bresp,                        //                                                   .bresp
		input  wire         arria10_hps_0_f2sdram0_data_bvalid,                       //                                                   .bvalid
		output wire         arria10_hps_0_f2sdram0_data_bready,                       //                                                   .bready
		output wire [3:0]   arria10_hps_0_f2sdram0_data_arid,                         //                                                   .arid
		output wire [31:0]  arria10_hps_0_f2sdram0_data_araddr,                       //                                                   .araddr
		output wire [3:0]   arria10_hps_0_f2sdram0_data_arlen,                        //                                                   .arlen
		output wire [2:0]   arria10_hps_0_f2sdram0_data_arsize,                       //                                                   .arsize
		output wire [1:0]   arria10_hps_0_f2sdram0_data_arburst,                      //                                                   .arburst
		output wire [1:0]   arria10_hps_0_f2sdram0_data_arlock,                       //                                                   .arlock
		output wire [3:0]   arria10_hps_0_f2sdram0_data_arcache,                      //                                                   .arcache
		output wire [2:0]   arria10_hps_0_f2sdram0_data_arprot,                       //                                                   .arprot
		output wire [4:0]   arria10_hps_0_f2sdram0_data_aruser,                       //                                                   .aruser
		output wire         arria10_hps_0_f2sdram0_data_arvalid,                      //                                                   .arvalid
		input  wire         arria10_hps_0_f2sdram0_data_arready,                      //                                                   .arready
		input  wire [3:0]   arria10_hps_0_f2sdram0_data_rid,                          //                                                   .rid
		input  wire [127:0] arria10_hps_0_f2sdram0_data_rdata,                        //                                                   .rdata
		input  wire [1:0]   arria10_hps_0_f2sdram0_data_rresp,                        //                                                   .rresp
		input  wire         arria10_hps_0_f2sdram0_data_rlast,                        //                                                   .rlast
		input  wire         arria10_hps_0_f2sdram0_data_rvalid,                       //                                                   .rvalid
		output wire         arria10_hps_0_f2sdram0_data_rready,                       //                                                   .rready
		input  wire         clk_0_clk_clk,                                            //                                          clk_0_clk.clk
		input  wire         arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset, // arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset.reset
		input  wire         f2sdram_m1_clk_reset_reset_bridge_in_reset_reset,         //         f2sdram_m1_clk_reset_reset_bridge_in_reset.reset
		input  wire [31:0]  f2sdram_m1_master_address,                                //                                  f2sdram_m1_master.address
		output wire         f2sdram_m1_master_waitrequest,                            //                                                   .waitrequest
		input  wire [3:0]   f2sdram_m1_master_byteenable,                             //                                                   .byteenable
		input  wire         f2sdram_m1_master_read,                                   //                                                   .read
		output wire [31:0]  f2sdram_m1_master_readdata,                               //                                                   .readdata
		output wire         f2sdram_m1_master_readdatavalid,                          //                                                   .readdatavalid
		input  wire         f2sdram_m1_master_write,                                  //                                                   .write
		input  wire [31:0]  f2sdram_m1_master_writedata                               //                                                   .writedata
	);

	wire          f2sdram_m1_master_translator_avalon_universal_master_0_waitrequest;   // f2sdram_m1_master_agent:av_waitrequest -> f2sdram_m1_master_translator:uav_waitrequest
	wire   [31:0] f2sdram_m1_master_translator_avalon_universal_master_0_readdata;      // f2sdram_m1_master_agent:av_readdata -> f2sdram_m1_master_translator:uav_readdata
	wire          f2sdram_m1_master_translator_avalon_universal_master_0_debugaccess;   // f2sdram_m1_master_translator:uav_debugaccess -> f2sdram_m1_master_agent:av_debugaccess
	wire   [31:0] f2sdram_m1_master_translator_avalon_universal_master_0_address;       // f2sdram_m1_master_translator:uav_address -> f2sdram_m1_master_agent:av_address
	wire          f2sdram_m1_master_translator_avalon_universal_master_0_read;          // f2sdram_m1_master_translator:uav_read -> f2sdram_m1_master_agent:av_read
	wire    [3:0] f2sdram_m1_master_translator_avalon_universal_master_0_byteenable;    // f2sdram_m1_master_translator:uav_byteenable -> f2sdram_m1_master_agent:av_byteenable
	wire          f2sdram_m1_master_translator_avalon_universal_master_0_readdatavalid; // f2sdram_m1_master_agent:av_readdatavalid -> f2sdram_m1_master_translator:uav_readdatavalid
	wire          f2sdram_m1_master_translator_avalon_universal_master_0_lock;          // f2sdram_m1_master_translator:uav_lock -> f2sdram_m1_master_agent:av_lock
	wire          f2sdram_m1_master_translator_avalon_universal_master_0_write;         // f2sdram_m1_master_translator:uav_write -> f2sdram_m1_master_agent:av_write
	wire   [31:0] f2sdram_m1_master_translator_avalon_universal_master_0_writedata;     // f2sdram_m1_master_translator:uav_writedata -> f2sdram_m1_master_agent:av_writedata
	wire    [2:0] f2sdram_m1_master_translator_avalon_universal_master_0_burstcount;    // f2sdram_m1_master_translator:uav_burstcount -> f2sdram_m1_master_agent:av_burstcount
	wire          f2sdram_m1_master_agent_cp_valid;                                     // f2sdram_m1_master_agent:cp_valid -> router:sink_valid
	wire  [119:0] f2sdram_m1_master_agent_cp_data;                                      // f2sdram_m1_master_agent:cp_data -> router:sink_data
	wire          f2sdram_m1_master_agent_cp_ready;                                     // router:sink_ready -> f2sdram_m1_master_agent:cp_ready
	wire          f2sdram_m1_master_agent_cp_startofpacket;                             // f2sdram_m1_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          f2sdram_m1_master_agent_cp_endofpacket;                               // f2sdram_m1_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                     // router:src_valid -> f2sdram_m1_master_limiter:cmd_sink_valid
	wire  [119:0] router_src_data;                                                      // router:src_data -> f2sdram_m1_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                     // f2sdram_m1_master_limiter:cmd_sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                   // router:src_channel -> f2sdram_m1_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                             // router:src_startofpacket -> f2sdram_m1_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                               // router:src_endofpacket -> f2sdram_m1_master_limiter:cmd_sink_endofpacket
	wire          f2sdram_m1_master_limiter_rsp_src_valid;                              // f2sdram_m1_master_limiter:rsp_src_valid -> f2sdram_m1_master_agent:rp_valid
	wire  [119:0] f2sdram_m1_master_limiter_rsp_src_data;                               // f2sdram_m1_master_limiter:rsp_src_data -> f2sdram_m1_master_agent:rp_data
	wire          f2sdram_m1_master_limiter_rsp_src_ready;                              // f2sdram_m1_master_agent:rp_ready -> f2sdram_m1_master_limiter:rsp_src_ready
	wire    [1:0] f2sdram_m1_master_limiter_rsp_src_channel;                            // f2sdram_m1_master_limiter:rsp_src_channel -> f2sdram_m1_master_agent:rp_channel
	wire          f2sdram_m1_master_limiter_rsp_src_startofpacket;                      // f2sdram_m1_master_limiter:rsp_src_startofpacket -> f2sdram_m1_master_agent:rp_startofpacket
	wire          f2sdram_m1_master_limiter_rsp_src_endofpacket;                        // f2sdram_m1_master_limiter:rsp_src_endofpacket -> f2sdram_m1_master_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                    // cmd_mux:src_valid -> arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter:in_valid
	wire  [119:0] cmd_mux_src_data;                                                     // cmd_mux:src_data -> arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                    // arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                  // cmd_mux:src_channel -> arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                            // cmd_mux:src_startofpacket -> arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                              // cmd_mux:src_endofpacket -> arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter:in_endofpacket
	wire          cmd_mux_001_src_valid;                                                // cmd_mux_001:src_valid -> arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter:in_valid
	wire  [119:0] cmd_mux_001_src_data;                                                 // cmd_mux_001:src_data -> arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                                // arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                              // cmd_mux_001:src_channel -> arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                        // cmd_mux_001:src_startofpacket -> arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                          // cmd_mux_001:src_endofpacket -> arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter:in_endofpacket
	wire          router_001_src_valid;                                                 // router_001:src_valid -> arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter:in_valid
	wire  [227:0] router_001_src_data;                                                  // router_001:src_data -> arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter:in_data
	wire          router_001_src_ready;                                                 // arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter:in_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                               // router_001:src_channel -> arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                         // router_001:src_startofpacket -> arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                           // router_001:src_endofpacket -> arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter:in_endofpacket
	wire          arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter_src_valid;           // arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [119:0] arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter_src_data;            // arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter_src_ready;           // rsp_demux:sink_ready -> arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter:out_ready
	wire    [1:0] arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter_src_channel;         // arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter_src_startofpacket;   // arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter_src_endofpacket;     // arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_002_src_valid;                                                 // router_002:src_valid -> arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter:in_valid
	wire  [227:0] router_002_src_data;                                                  // router_002:src_data -> arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                                 // arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                               // router_002:src_channel -> arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                         // router_002:src_startofpacket -> arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                           // router_002:src_endofpacket -> arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter:in_endofpacket
	wire          arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter_src_valid;           // arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [119:0] arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter_src_data;            // arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter_src_ready;           // rsp_demux_001:sink_ready -> arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter:out_ready
	wire    [1:0] arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter_src_channel;         // arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter_src_startofpacket;   // arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter_src_endofpacket;     // arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire    [0:0] f2sdram_m1_master_limiter_cmd_src_valid;                              // f2sdram_m1_master_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [119:0] f2sdram_m1_master_limiter_cmd_src_data;                               // f2sdram_m1_master_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          f2sdram_m1_master_limiter_cmd_src_ready;                              // limiter_pipeline:in_ready -> f2sdram_m1_master_limiter:cmd_src_ready
	wire    [1:0] f2sdram_m1_master_limiter_cmd_src_channel;                            // f2sdram_m1_master_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          f2sdram_m1_master_limiter_cmd_src_startofpacket;                      // f2sdram_m1_master_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          f2sdram_m1_master_limiter_cmd_src_endofpacket;                        // f2sdram_m1_master_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                                       // limiter_pipeline:out_valid -> cmd_demux:sink_valid
	wire  [119:0] limiter_pipeline_source0_data;                                        // limiter_pipeline:out_data -> cmd_demux:sink_data
	wire          limiter_pipeline_source0_ready;                                       // cmd_demux:sink_ready -> limiter_pipeline:out_ready
	wire    [1:0] limiter_pipeline_source0_channel;                                     // limiter_pipeline:out_channel -> cmd_demux:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                               // limiter_pipeline:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                                 // limiter_pipeline:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                    // rsp_mux:src_valid -> limiter_pipeline_001:in_valid
	wire  [119:0] rsp_mux_src_data;                                                     // rsp_mux:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_src_ready;                                                    // limiter_pipeline_001:in_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                  // rsp_mux:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_src_startofpacket;                                            // rsp_mux:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                              // rsp_mux:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                                   // limiter_pipeline_001:out_valid -> f2sdram_m1_master_limiter:rsp_sink_valid
	wire  [119:0] limiter_pipeline_001_source0_data;                                    // limiter_pipeline_001:out_data -> f2sdram_m1_master_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                                   // f2sdram_m1_master_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire    [1:0] limiter_pipeline_001_source0_channel;                                 // limiter_pipeline_001:out_channel -> f2sdram_m1_master_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                           // limiter_pipeline_001:out_startofpacket -> f2sdram_m1_master_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                             // limiter_pipeline_001:out_endofpacket -> f2sdram_m1_master_limiter:rsp_sink_endofpacket
	wire          arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter_src_valid;           // arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter:out_valid -> agent_pipeline:in_valid
	wire  [227:0] arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter_src_data;            // arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter:out_data -> agent_pipeline:in_data
	wire          arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter_src_ready;           // agent_pipeline:in_ready -> arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter:out_ready
	wire    [1:0] arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter_src_channel;         // arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter:out_channel -> agent_pipeline:in_channel
	wire          arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter_src_startofpacket;   // arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter:out_startofpacket -> agent_pipeline:in_startofpacket
	wire          arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter_src_endofpacket;     // arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter:out_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                         // agent_pipeline:out_valid -> arria10_hps_0_f2sdram0_data_agent:write_cp_valid
	wire  [227:0] agent_pipeline_source0_data;                                          // agent_pipeline:out_data -> arria10_hps_0_f2sdram0_data_agent:write_cp_data
	wire          agent_pipeline_source0_ready;                                         // arria10_hps_0_f2sdram0_data_agent:write_cp_ready -> agent_pipeline:out_ready
	wire    [1:0] agent_pipeline_source0_channel;                                       // agent_pipeline:out_channel -> arria10_hps_0_f2sdram0_data_agent:write_cp_channel
	wire          agent_pipeline_source0_startofpacket;                                 // agent_pipeline:out_startofpacket -> arria10_hps_0_f2sdram0_data_agent:write_cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                   // agent_pipeline:out_endofpacket -> arria10_hps_0_f2sdram0_data_agent:write_cp_endofpacket
	wire          arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter_src_valid;           // arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter:out_valid -> agent_pipeline_001:in_valid
	wire  [227:0] arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter_src_data;            // arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter:out_data -> agent_pipeline_001:in_data
	wire          arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter_src_ready;           // agent_pipeline_001:in_ready -> arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter:out_ready
	wire    [1:0] arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter_src_channel;         // arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter:out_channel -> agent_pipeline_001:in_channel
	wire          arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter_src_startofpacket;   // arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter:out_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter_src_endofpacket;     // arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter:out_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                     // agent_pipeline_001:out_valid -> arria10_hps_0_f2sdram0_data_agent:read_cp_valid
	wire  [227:0] agent_pipeline_001_source0_data;                                      // agent_pipeline_001:out_data -> arria10_hps_0_f2sdram0_data_agent:read_cp_data
	wire          agent_pipeline_001_source0_ready;                                     // arria10_hps_0_f2sdram0_data_agent:read_cp_ready -> agent_pipeline_001:out_ready
	wire    [1:0] agent_pipeline_001_source0_channel;                                   // agent_pipeline_001:out_channel -> arria10_hps_0_f2sdram0_data_agent:read_cp_channel
	wire          agent_pipeline_001_source0_startofpacket;                             // agent_pipeline_001:out_startofpacket -> arria10_hps_0_f2sdram0_data_agent:read_cp_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                               // agent_pipeline_001:out_endofpacket -> arria10_hps_0_f2sdram0_data_agent:read_cp_endofpacket
	wire          arria10_hps_0_f2sdram0_data_agent_write_rp_valid;                     // arria10_hps_0_f2sdram0_data_agent:write_rp_valid -> agent_pipeline_002:in_valid
	wire  [227:0] arria10_hps_0_f2sdram0_data_agent_write_rp_data;                      // arria10_hps_0_f2sdram0_data_agent:write_rp_data -> agent_pipeline_002:in_data
	wire          arria10_hps_0_f2sdram0_data_agent_write_rp_ready;                     // agent_pipeline_002:in_ready -> arria10_hps_0_f2sdram0_data_agent:write_rp_ready
	wire          arria10_hps_0_f2sdram0_data_agent_write_rp_startofpacket;             // arria10_hps_0_f2sdram0_data_agent:write_rp_startofpacket -> agent_pipeline_002:in_startofpacket
	wire          arria10_hps_0_f2sdram0_data_agent_write_rp_endofpacket;               // arria10_hps_0_f2sdram0_data_agent:write_rp_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          agent_pipeline_002_source0_valid;                                     // agent_pipeline_002:out_valid -> router_001:sink_valid
	wire  [227:0] agent_pipeline_002_source0_data;                                      // agent_pipeline_002:out_data -> router_001:sink_data
	wire          agent_pipeline_002_source0_ready;                                     // router_001:sink_ready -> agent_pipeline_002:out_ready
	wire          agent_pipeline_002_source0_startofpacket;                             // agent_pipeline_002:out_startofpacket -> router_001:sink_startofpacket
	wire          agent_pipeline_002_source0_endofpacket;                               // agent_pipeline_002:out_endofpacket -> router_001:sink_endofpacket
	wire          arria10_hps_0_f2sdram0_data_agent_read_rp_valid;                      // arria10_hps_0_f2sdram0_data_agent:read_rp_valid -> agent_pipeline_003:in_valid
	wire  [227:0] arria10_hps_0_f2sdram0_data_agent_read_rp_data;                       // arria10_hps_0_f2sdram0_data_agent:read_rp_data -> agent_pipeline_003:in_data
	wire          arria10_hps_0_f2sdram0_data_agent_read_rp_ready;                      // agent_pipeline_003:in_ready -> arria10_hps_0_f2sdram0_data_agent:read_rp_ready
	wire          arria10_hps_0_f2sdram0_data_agent_read_rp_startofpacket;              // arria10_hps_0_f2sdram0_data_agent:read_rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire          arria10_hps_0_f2sdram0_data_agent_read_rp_endofpacket;                // arria10_hps_0_f2sdram0_data_agent:read_rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          agent_pipeline_003_source0_valid;                                     // agent_pipeline_003:out_valid -> router_002:sink_valid
	wire  [227:0] agent_pipeline_003_source0_data;                                      // agent_pipeline_003:out_data -> router_002:sink_data
	wire          agent_pipeline_003_source0_ready;                                     // router_002:sink_ready -> agent_pipeline_003:out_ready
	wire          agent_pipeline_003_source0_startofpacket;                             // agent_pipeline_003:out_startofpacket -> router_002:sink_startofpacket
	wire          agent_pipeline_003_source0_endofpacket;                               // agent_pipeline_003:out_endofpacket -> router_002:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                 // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [119:0] cmd_demux_src0_data;                                                  // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                                 // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                               // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                         // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                           // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                           // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [119:0] mux_pipeline_source0_data;                                            // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                           // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire    [1:0] mux_pipeline_source0_channel;                                         // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                                   // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                     // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                 // cmd_demux:src1_valid -> mux_pipeline_001:in_valid
	wire  [119:0] cmd_demux_src1_data;                                                  // cmd_demux:src1_data -> mux_pipeline_001:in_data
	wire          cmd_demux_src1_ready;                                                 // mux_pipeline_001:in_ready -> cmd_demux:src1_ready
	wire    [1:0] cmd_demux_src1_channel;                                               // cmd_demux:src1_channel -> mux_pipeline_001:in_channel
	wire          cmd_demux_src1_startofpacket;                                         // cmd_demux:src1_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                           // cmd_demux:src1_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                       // mux_pipeline_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [119:0] mux_pipeline_001_source0_data;                                        // mux_pipeline_001:out_data -> cmd_mux_001:sink0_data
	wire          mux_pipeline_001_source0_ready;                                       // cmd_mux_001:sink0_ready -> mux_pipeline_001:out_ready
	wire    [1:0] mux_pipeline_001_source0_channel;                                     // mux_pipeline_001:out_channel -> cmd_mux_001:sink0_channel
	wire          mux_pipeline_001_source0_startofpacket;                               // mux_pipeline_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                                 // mux_pipeline_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                 // rsp_demux:src0_valid -> mux_pipeline_002:in_valid
	wire  [119:0] rsp_demux_src0_data;                                                  // rsp_demux:src0_data -> mux_pipeline_002:in_data
	wire          rsp_demux_src0_ready;                                                 // mux_pipeline_002:in_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                               // rsp_demux:src0_channel -> mux_pipeline_002:in_channel
	wire          rsp_demux_src0_startofpacket;                                         // rsp_demux:src0_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                           // rsp_demux:src0_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                                       // mux_pipeline_002:out_valid -> rsp_mux:sink0_valid
	wire  [119:0] mux_pipeline_002_source0_data;                                        // mux_pipeline_002:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_002_source0_ready;                                       // rsp_mux:sink0_ready -> mux_pipeline_002:out_ready
	wire    [1:0] mux_pipeline_002_source0_channel;                                     // mux_pipeline_002:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_002_source0_startofpacket;                               // mux_pipeline_002:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                                 // mux_pipeline_002:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                             // rsp_demux_001:src0_valid -> mux_pipeline_003:in_valid
	wire  [119:0] rsp_demux_001_src0_data;                                              // rsp_demux_001:src0_data -> mux_pipeline_003:in_data
	wire          rsp_demux_001_src0_ready;                                             // mux_pipeline_003:in_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                                           // rsp_demux_001:src0_channel -> mux_pipeline_003:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                     // rsp_demux_001:src0_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                       // rsp_demux_001:src0_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                                       // mux_pipeline_003:out_valid -> rsp_mux:sink1_valid
	wire  [119:0] mux_pipeline_003_source0_data;                                        // mux_pipeline_003:out_data -> rsp_mux:sink1_data
	wire          mux_pipeline_003_source0_ready;                                       // rsp_mux:sink1_ready -> mux_pipeline_003:out_ready
	wire    [1:0] mux_pipeline_003_source0_channel;                                     // mux_pipeline_003:out_channel -> rsp_mux:sink1_channel
	wire          mux_pipeline_003_source0_startofpacket;                               // mux_pipeline_003:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                                 // mux_pipeline_003:out_endofpacket -> rsp_mux:sink1_endofpacket

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) f2sdram_m1_master_translator (
		.clk                    (clk_0_clk_clk),                                                        //                       clk.clk
		.reset                  (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset),             //                     reset.reset
		.uav_address            (f2sdram_m1_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (f2sdram_m1_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (f2sdram_m1_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (f2sdram_m1_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (f2sdram_m1_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (f2sdram_m1_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (f2sdram_m1_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (f2sdram_m1_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (f2sdram_m1_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (f2sdram_m1_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (f2sdram_m1_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (f2sdram_m1_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (f2sdram_m1_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (f2sdram_m1_master_byteenable),                                         //                          .byteenable
		.av_read                (f2sdram_m1_master_read),                                               //                          .read
		.av_readdata            (f2sdram_m1_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (f2sdram_m1_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (f2sdram_m1_master_write),                                              //                          .write
		.av_writedata           (f2sdram_m1_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                 //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                 //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_QOS_H                 (104),
		.PKT_QOS_L                 (104),
		.PKT_DATA_SIDEBAND_H       (102),
		.PKT_DATA_SIDEBAND_L       (102),
		.PKT_ADDR_SIDEBAND_H       (101),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (114),
		.PKT_CACHE_L               (111),
		.PKT_THREAD_ID_H           (107),
		.PKT_THREAD_ID_L           (107),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (105),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (106),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) f2sdram_m1_master_agent (
		.clk                   (clk_0_clk_clk),                                                        //       clk.clk
		.reset                 (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.av_address            (f2sdram_m1_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (f2sdram_m1_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (f2sdram_m1_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (f2sdram_m1_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (f2sdram_m1_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (f2sdram_m1_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (f2sdram_m1_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (f2sdram_m1_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (f2sdram_m1_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (f2sdram_m1_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (f2sdram_m1_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (f2sdram_m1_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (f2sdram_m1_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (f2sdram_m1_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (f2sdram_m1_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (f2sdram_m1_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (f2sdram_m1_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (f2sdram_m1_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (f2sdram_m1_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (f2sdram_m1_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (f2sdram_m1_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (f2sdram_m1_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (212),
		.PKT_QOS_L                   (212),
		.PKT_THREAD_ID_H             (215),
		.PKT_THREAD_ID_L             (215),
		.PKT_RESPONSE_STATUS_H       (224),
		.PKT_RESPONSE_STATUS_L       (223),
		.PKT_BEGIN_BURST             (211),
		.PKT_CACHE_H                 (222),
		.PKT_CACHE_L                 (219),
		.PKT_DATA_SIDEBAND_H         (210),
		.PKT_DATA_SIDEBAND_L         (210),
		.PKT_ADDR_SIDEBAND_H         (209),
		.PKT_ADDR_SIDEBAND_L         (205),
		.PKT_BURST_TYPE_H            (204),
		.PKT_BURST_TYPE_L            (203),
		.PKT_PROTECTION_H            (218),
		.PKT_PROTECTION_L            (216),
		.PKT_BURST_SIZE_H            (202),
		.PKT_BURST_SIZE_L            (200),
		.PKT_BURSTWRAP_H             (199),
		.PKT_BURSTWRAP_L             (191),
		.PKT_BYTE_CNT_H              (190),
		.PKT_BYTE_CNT_L              (182),
		.PKT_ADDR_H                  (175),
		.PKT_ADDR_L                  (144),
		.PKT_TRANS_EXCLUSIVE         (181),
		.PKT_TRANS_LOCK              (180),
		.PKT_TRANS_COMPRESSED_READ   (176),
		.PKT_TRANS_POSTED            (177),
		.PKT_TRANS_WRITE             (178),
		.PKT_TRANS_READ              (179),
		.PKT_DATA_H                  (127),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (143),
		.PKT_BYTEEN_L                (128),
		.PKT_SRC_ID_H                (213),
		.PKT_SRC_ID_L                (213),
		.PKT_DEST_ID_H               (214),
		.PKT_DEST_ID_L               (214),
		.PKT_ORI_BURST_SIZE_L        (225),
		.PKT_ORI_BURST_SIZE_H        (227),
		.ADDR_USER_WIDTH             (5),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (228),
		.ADDR_WIDTH                  (32),
		.RDATA_WIDTH                 (128),
		.WDATA_WIDTH                 (128),
		.ST_CHANNEL_W                (2),
		.AXI_SLAVE_ID_W              (4),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI3"),
		.WRITE_ACCEPTANCE_CAPABILITY (8),
		.READ_ACCEPTANCE_CAPABILITY  (8)
	) arria10_hps_0_f2sdram0_data_agent (
		.aclk                   (clk_0_clk_clk),                                             //        clock_sink.clk
		.aresetn                (~arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset), //        reset_sink.reset_n
		.read_cp_valid          (agent_pipeline_001_source0_valid),                          //           read_cp.valid
		.read_cp_ready          (agent_pipeline_001_source0_ready),                          //                  .ready
		.read_cp_data           (agent_pipeline_001_source0_data),                           //                  .data
		.read_cp_channel        (agent_pipeline_001_source0_channel),                        //                  .channel
		.read_cp_startofpacket  (agent_pipeline_001_source0_startofpacket),                  //                  .startofpacket
		.read_cp_endofpacket    (agent_pipeline_001_source0_endofpacket),                    //                  .endofpacket
		.write_cp_ready         (agent_pipeline_source0_ready),                              //          write_cp.ready
		.write_cp_valid         (agent_pipeline_source0_valid),                              //                  .valid
		.write_cp_data          (agent_pipeline_source0_data),                               //                  .data
		.write_cp_channel       (agent_pipeline_source0_channel),                            //                  .channel
		.write_cp_startofpacket (agent_pipeline_source0_startofpacket),                      //                  .startofpacket
		.write_cp_endofpacket   (agent_pipeline_source0_endofpacket),                        //                  .endofpacket
		.read_rp_ready          (arria10_hps_0_f2sdram0_data_agent_read_rp_ready),           //           read_rp.ready
		.read_rp_valid          (arria10_hps_0_f2sdram0_data_agent_read_rp_valid),           //                  .valid
		.read_rp_data           (arria10_hps_0_f2sdram0_data_agent_read_rp_data),            //                  .data
		.read_rp_startofpacket  (arria10_hps_0_f2sdram0_data_agent_read_rp_startofpacket),   //                  .startofpacket
		.read_rp_endofpacket    (arria10_hps_0_f2sdram0_data_agent_read_rp_endofpacket),     //                  .endofpacket
		.write_rp_ready         (arria10_hps_0_f2sdram0_data_agent_write_rp_ready),          //          write_rp.ready
		.write_rp_valid         (arria10_hps_0_f2sdram0_data_agent_write_rp_valid),          //                  .valid
		.write_rp_data          (arria10_hps_0_f2sdram0_data_agent_write_rp_data),           //                  .data
		.write_rp_startofpacket (arria10_hps_0_f2sdram0_data_agent_write_rp_startofpacket),  //                  .startofpacket
		.write_rp_endofpacket   (arria10_hps_0_f2sdram0_data_agent_write_rp_endofpacket),    //                  .endofpacket
		.awid                   (arria10_hps_0_f2sdram0_data_awid),                          // altera_axi_master.awid
		.awaddr                 (arria10_hps_0_f2sdram0_data_awaddr),                        //                  .awaddr
		.awlen                  (arria10_hps_0_f2sdram0_data_awlen),                         //                  .awlen
		.awsize                 (arria10_hps_0_f2sdram0_data_awsize),                        //                  .awsize
		.awburst                (arria10_hps_0_f2sdram0_data_awburst),                       //                  .awburst
		.awlock                 (arria10_hps_0_f2sdram0_data_awlock),                        //                  .awlock
		.awcache                (arria10_hps_0_f2sdram0_data_awcache),                       //                  .awcache
		.awprot                 (arria10_hps_0_f2sdram0_data_awprot),                        //                  .awprot
		.awuser                 (arria10_hps_0_f2sdram0_data_awuser),                        //                  .awuser
		.awvalid                (arria10_hps_0_f2sdram0_data_awvalid),                       //                  .awvalid
		.awready                (arria10_hps_0_f2sdram0_data_awready),                       //                  .awready
		.wid                    (arria10_hps_0_f2sdram0_data_wid),                           //                  .wid
		.wdata                  (arria10_hps_0_f2sdram0_data_wdata),                         //                  .wdata
		.wstrb                  (arria10_hps_0_f2sdram0_data_wstrb),                         //                  .wstrb
		.wlast                  (arria10_hps_0_f2sdram0_data_wlast),                         //                  .wlast
		.wvalid                 (arria10_hps_0_f2sdram0_data_wvalid),                        //                  .wvalid
		.wready                 (arria10_hps_0_f2sdram0_data_wready),                        //                  .wready
		.bid                    (arria10_hps_0_f2sdram0_data_bid),                           //                  .bid
		.bresp                  (arria10_hps_0_f2sdram0_data_bresp),                         //                  .bresp
		.bvalid                 (arria10_hps_0_f2sdram0_data_bvalid),                        //                  .bvalid
		.bready                 (arria10_hps_0_f2sdram0_data_bready),                        //                  .bready
		.arid                   (arria10_hps_0_f2sdram0_data_arid),                          //                  .arid
		.araddr                 (arria10_hps_0_f2sdram0_data_araddr),                        //                  .araddr
		.arlen                  (arria10_hps_0_f2sdram0_data_arlen),                         //                  .arlen
		.arsize                 (arria10_hps_0_f2sdram0_data_arsize),                        //                  .arsize
		.arburst                (arria10_hps_0_f2sdram0_data_arburst),                       //                  .arburst
		.arlock                 (arria10_hps_0_f2sdram0_data_arlock),                        //                  .arlock
		.arcache                (arria10_hps_0_f2sdram0_data_arcache),                       //                  .arcache
		.arprot                 (arria10_hps_0_f2sdram0_data_arprot),                        //                  .arprot
		.aruser                 (arria10_hps_0_f2sdram0_data_aruser),                        //                  .aruser
		.arvalid                (arria10_hps_0_f2sdram0_data_arvalid),                       //                  .arvalid
		.arready                (arria10_hps_0_f2sdram0_data_arready),                       //                  .arready
		.rid                    (arria10_hps_0_f2sdram0_data_rid),                           //                  .rid
		.rdata                  (arria10_hps_0_f2sdram0_data_rdata),                         //                  .rdata
		.rresp                  (arria10_hps_0_f2sdram0_data_rresp),                         //                  .rresp
		.rlast                  (arria10_hps_0_f2sdram0_data_rlast),                         //                  .rlast
		.rvalid                 (arria10_hps_0_f2sdram0_data_rvalid),                        //                  .rvalid
		.rready                 (arria10_hps_0_f2sdram0_data_rready)                         //                  .rready
	);

	ghrd_10as066n2_altera_merlin_router_161_23evfkq router (
		.sink_ready         (f2sdram_m1_master_agent_cp_ready),                         //      sink.ready
		.sink_valid         (f2sdram_m1_master_agent_cp_valid),                         //          .valid
		.sink_data          (f2sdram_m1_master_agent_cp_data),                          //          .data
		.sink_startofpacket (f2sdram_m1_master_agent_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (f2sdram_m1_master_agent_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                         //       src.ready
		.src_valid          (router_src_valid),                                         //          .valid
		.src_data           (router_src_data),                                          //          .data
		.src_channel        (router_src_channel),                                       //          .channel
		.src_startofpacket  (router_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                    //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_p6phnay router_001 (
		.sink_ready         (agent_pipeline_002_source0_ready),                         //      sink.ready
		.sink_valid         (agent_pipeline_002_source0_valid),                         //          .valid
		.sink_data          (agent_pipeline_002_source0_data),                          //          .data
		.sink_startofpacket (agent_pipeline_002_source0_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (agent_pipeline_002_source0_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                     //       src.ready
		.src_valid          (router_001_src_valid),                                     //          .valid
		.src_data           (router_001_src_data),                                      //          .data
		.src_channel        (router_001_src_channel),                                   //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_router_161_p6phnay router_002 (
		.sink_ready         (agent_pipeline_003_source0_ready),                         //      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),                         //          .valid
		.sink_data          (agent_pipeline_003_source0_data),                          //          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                     //       src.ready
		.src_valid          (router_002_src_valid),                                     //          .valid
		.src_data           (router_002_src_data),                                      //          .data
		.src_channel        (router_002_src_channel),                                   //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (106),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (105),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (20),
		.PIPELINED                 (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (1),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) f2sdram_m1_master_limiter (
		.clk                    (clk_0_clk_clk),                                            //       clk.clk
		.reset                  (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                         //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                         //          .valid
		.cmd_sink_data          (router_src_data),                                          //          .data
		.cmd_sink_channel       (router_src_channel),                                       //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                 //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                   //          .endofpacket
		.cmd_src_ready          (f2sdram_m1_master_limiter_cmd_src_ready),                  //   cmd_src.ready
		.cmd_src_data           (f2sdram_m1_master_limiter_cmd_src_data),                   //          .data
		.cmd_src_channel        (f2sdram_m1_master_limiter_cmd_src_channel),                //          .channel
		.cmd_src_startofpacket  (f2sdram_m1_master_limiter_cmd_src_startofpacket),          //          .startofpacket
		.cmd_src_endofpacket    (f2sdram_m1_master_limiter_cmd_src_endofpacket),            //          .endofpacket
		.cmd_src_valid          (f2sdram_m1_master_limiter_cmd_src_valid),                  //          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),                       //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),                       //          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),                     //          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),                        //          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),               //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),                 //          .endofpacket
		.rsp_src_ready          (f2sdram_m1_master_limiter_rsp_src_ready),                  //   rsp_src.ready
		.rsp_src_valid          (f2sdram_m1_master_limiter_rsp_src_valid),                  //          .valid
		.rsp_src_data           (f2sdram_m1_master_limiter_rsp_src_data),                   //          .data
		.rsp_src_channel        (f2sdram_m1_master_limiter_rsp_src_channel),                //          .channel
		.rsp_src_startofpacket  (f2sdram_m1_master_limiter_rsp_src_startofpacket),          //          .startofpacket
		.rsp_src_endofpacket    (f2sdram_m1_master_limiter_rsp_src_endofpacket)             //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_vlbffpa cmd_demux (
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (limiter_pipeline_source0_ready),                           //      sink.ready
		.sink_channel       (limiter_pipeline_source0_channel),                         //          .channel
		.sink_data          (limiter_pipeline_source0_data),                            //          .data
		.sink_startofpacket (limiter_pipeline_source0_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_source0_endofpacket),                     //          .endofpacket
		.sink_valid         (limiter_pipeline_source0_valid),                           //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                     //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                     //          .valid
		.src0_data          (cmd_demux_src0_data),                                      //          .data
		.src0_channel       (cmd_demux_src0_channel),                                   //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                               //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                     //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                     //          .valid
		.src1_data          (cmd_demux_src1_data),                                      //          .data
		.src1_channel       (cmd_demux_src1_channel),                                   //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                             //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                                //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_rk5recq cmd_mux (
		.clk                 (clk_0_clk_clk),                                            //       clk.clk
		.reset               (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_src_valid),                                        //          .valid
		.src_data            (cmd_mux_src_data),                                         //          .data
		.src_channel         (cmd_mux_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket)                          //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_rk5recq cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                            //       clk.clk
		.reset               (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                    //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                    //          .valid
		.src_data            (cmd_mux_001_src_data),                                     //          .data
		.src_channel         (cmd_mux_001_src_channel),                                  //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                            //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                              //          .endofpacket
		.sink0_ready         (mux_pipeline_001_source0_ready),                           //     sink0.ready
		.sink0_valid         (mux_pipeline_001_source0_valid),                           //          .valid
		.sink0_channel       (mux_pipeline_001_source0_channel),                         //          .channel
		.sink0_data          (mux_pipeline_001_source0_data),                            //          .data
		.sink0_startofpacket (mux_pipeline_001_source0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_001_source0_endofpacket)                      //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_j54ki5q rsp_demux (
		.clk                (clk_0_clk_clk),                                                      //       clk.clk
		.reset              (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.sink_ready         (arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                               //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                               //          .valid
		.src0_data          (rsp_demux_src0_data),                                                //          .data
		.src0_channel       (rsp_demux_src0_channel),                                             //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                          //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_demultiplexer_161_j54ki5q rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                                      //       clk.clk
		.reset              (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.sink_ready         (arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                           //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                           //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                            //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                         //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                      //          .endofpacket
	);

	ghrd_10as066n2_altera_merlin_multiplexer_161_kblxcwy rsp_mux (
		.clk                 (clk_0_clk_clk),                                            //       clk.clk
		.reset               (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                        //       src.ready
		.src_valid           (rsp_mux_src_valid),                                        //          .valid
		.src_data            (rsp_mux_src_data),                                         //          .data
		.src_channel         (rsp_mux_src_channel),                                      //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_002_source0_ready),                           //     sink0.ready
		.sink0_valid         (mux_pipeline_002_source0_valid),                           //          .valid
		.sink0_channel       (mux_pipeline_002_source0_channel),                         //          .channel
		.sink0_data          (mux_pipeline_002_source0_data),                            //          .data
		.sink0_startofpacket (mux_pipeline_002_source0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_002_source0_endofpacket),                     //          .endofpacket
		.sink1_ready         (mux_pipeline_003_source0_ready),                           //     sink1.ready
		.sink1_valid         (mux_pipeline_003_source0_valid),                           //          .valid
		.sink1_channel       (mux_pipeline_003_source0_channel),                         //          .channel
		.sink1_data          (mux_pipeline_003_source0_data),                            //          .data
		.sink1_startofpacket (mux_pipeline_003_source0_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_003_source0_endofpacket)                      //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (116),
		.IN_PKT_RESPONSE_STATUS_L      (115),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (117),
		.IN_PKT_ORI_BURST_SIZE_H       (119),
		.IN_ST_DATA_W                  (120),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (224),
		.OUT_PKT_RESPONSE_STATUS_L     (223),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (225),
		.OUT_PKT_ORI_BURST_SIZE_H      (227),
		.OUT_ST_DATA_W                 (228),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                      //       clk.clk
		.reset                (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                  //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                            //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                  //          .ready
		.in_data              (cmd_mux_src_data),                                                   //          .data
		.out_endofpacket      (arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (116),
		.IN_PKT_RESPONSE_STATUS_L      (115),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (117),
		.IN_PKT_ORI_BURST_SIZE_H       (119),
		.IN_ST_DATA_W                  (120),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (224),
		.OUT_PKT_RESPONSE_STATUS_L     (223),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (225),
		.OUT_PKT_ORI_BURST_SIZE_H      (227),
		.OUT_ST_DATA_W                 (228),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                      //       clk.clk
		.reset                (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                              //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                            //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                                      //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                        //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                              //          .ready
		.in_data              (cmd_mux_001_src_data),                                               //          .data
		.out_endofpacket      (arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter_src_data),          //          .data
		.out_channel          (arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (224),
		.IN_PKT_RESPONSE_STATUS_L      (223),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (225),
		.IN_PKT_ORI_BURST_SIZE_H       (227),
		.IN_ST_DATA_W                  (228),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (116),
		.OUT_PKT_RESPONSE_STATUS_L     (115),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (117),
		.OUT_PKT_ORI_BURST_SIZE_H      (119),
		.OUT_ST_DATA_W                 (120),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                      //       clk.clk
		.reset                (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_valid             (router_001_src_valid),                                               //      sink.valid
		.in_channel           (router_001_src_channel),                                             //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                         //          .endofpacket
		.in_ready             (router_001_src_ready),                                               //          .ready
		.in_data              (router_001_src_data),                                                //          .data
		.out_endofpacket      (arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (arria10_hps_0_f2sdram0_data_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (224),
		.IN_PKT_RESPONSE_STATUS_L      (223),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (225),
		.IN_PKT_ORI_BURST_SIZE_H       (227),
		.IN_ST_DATA_W                  (228),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (116),
		.OUT_PKT_RESPONSE_STATUS_L     (115),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (117),
		.OUT_PKT_ORI_BURST_SIZE_H      (119),
		.OUT_ST_DATA_W                 (120),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                      //       clk.clk
		.reset                (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_valid             (router_002_src_valid),                                               //      sink.valid
		.in_channel           (router_002_src_channel),                                             //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                         //          .endofpacket
		.in_ready             (router_002_src_ready),                                               //          .ready
		.in_data              (router_002_src_data),                                                //          .data
		.out_endofpacket      (arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (arria10_hps_0_f2sdram0_data_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (120),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (f2sdram_m1_master_limiter_cmd_src_ready),                  //     sink0.ready
		.in_valid          (f2sdram_m1_master_limiter_cmd_src_valid),                  //          .valid
		.in_startofpacket  (f2sdram_m1_master_limiter_cmd_src_startofpacket),          //          .startofpacket
		.in_endofpacket    (f2sdram_m1_master_limiter_cmd_src_endofpacket),            //          .endofpacket
		.in_data           (f2sdram_m1_master_limiter_cmd_src_data),                   //          .data
		.in_channel        (f2sdram_m1_master_limiter_cmd_src_channel),                //          .channel
		.out_ready         (limiter_pipeline_source0_ready),                           //   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                           //          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),                     //          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                            //          .data
		.out_channel       (limiter_pipeline_source0_channel),                         //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (120),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_001 (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_mux_src_ready),                                        //     sink0.ready
		.in_valid          (rsp_mux_src_valid),                                        //          .valid
		.in_startofpacket  (rsp_mux_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (rsp_mux_src_endofpacket),                                  //          .endofpacket
		.in_data           (rsp_mux_src_data),                                         //          .data
		.in_channel        (rsp_mux_src_channel),                                      //          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),                       //   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),                       //          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),                 //          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),                        //          .data
		.out_channel       (limiter_pipeline_001_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (228),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (clk_0_clk_clk),                                                      //       cr0.clk
		.reset             (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.in_ready          (arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter_src_ready),         //     sink0.ready
		.in_valid          (arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter_src_valid),         //          .valid
		.in_startofpacket  (arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_endofpacket    (arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.in_data           (arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter_src_data),          //          .data
		.in_channel        (arria10_hps_0_f2sdram0_data_wr_cmd_width_adapter_src_channel),       //          .channel
		.out_ready         (agent_pipeline_source0_ready),                                       //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                                       //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                               //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                                 //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                                        //          .data
		.out_channel       (agent_pipeline_source0_channel),                                     //          .channel
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_error          (1'b0)                                                                // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (228),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (clk_0_clk_clk),                                                      //       cr0.clk
		.reset             (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.in_ready          (arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter_src_ready),         //     sink0.ready
		.in_valid          (arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter_src_valid),         //          .valid
		.in_startofpacket  (arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_endofpacket    (arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.in_data           (arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter_src_data),          //          .data
		.in_channel        (arria10_hps_0_f2sdram0_data_rd_cmd_width_adapter_src_channel),       //          .channel
		.out_ready         (agent_pipeline_001_source0_ready),                                   //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                                   //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),                           //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),                             //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                                    //          .data
		.out_channel       (agent_pipeline_001_source0_channel),                                 //          .channel
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_error          (1'b0)                                                                // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (228),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_002 (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (arria10_hps_0_f2sdram0_data_agent_write_rp_ready),         //     sink0.ready
		.in_valid          (arria10_hps_0_f2sdram0_data_agent_write_rp_valid),         //          .valid
		.in_startofpacket  (arria10_hps_0_f2sdram0_data_agent_write_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (arria10_hps_0_f2sdram0_data_agent_write_rp_endofpacket),   //          .endofpacket
		.in_data           (arria10_hps_0_f2sdram0_data_agent_write_rp_data),          //          .data
		.out_ready         (agent_pipeline_002_source0_ready),                         //   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),                         //          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),                   //          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),                          //          .data
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_channel       (),                                                         // (terminated)
		.in_channel        (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (228),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_003 (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (arria10_hps_0_f2sdram0_data_agent_read_rp_ready),          //     sink0.ready
		.in_valid          (arria10_hps_0_f2sdram0_data_agent_read_rp_valid),          //          .valid
		.in_startofpacket  (arria10_hps_0_f2sdram0_data_agent_read_rp_startofpacket),  //          .startofpacket
		.in_endofpacket    (arria10_hps_0_f2sdram0_data_agent_read_rp_endofpacket),    //          .endofpacket
		.in_data           (arria10_hps_0_f2sdram0_data_agent_read_rp_data),           //          .data
		.out_ready         (agent_pipeline_003_source0_ready),                         //   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),                         //          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),                   //          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),                          //          .data
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_channel       (),                                                         // (terminated)
		.in_channel        (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (120),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                     //     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                                     //          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                             //          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                               //          .endofpacket
		.in_data           (cmd_demux_src0_data),                                      //          .data
		.in_channel        (cmd_demux_src0_channel),                                   //          .channel
		.out_ready         (mux_pipeline_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_source0_data),                                //          .data
		.out_channel       (mux_pipeline_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (120),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_001 (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                     //     sink0.ready
		.in_valid          (cmd_demux_src1_valid),                                     //          .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                             //          .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                               //          .endofpacket
		.in_data           (cmd_demux_src1_data),                                      //          .data
		.in_channel        (cmd_demux_src1_channel),                                   //          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                           //   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                           //          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),                     //          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                            //          .data
		.out_channel       (mux_pipeline_001_source0_channel),                         //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (120),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_002 (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                     //     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                                     //          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                             //          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                               //          .endofpacket
		.in_data           (rsp_demux_src0_data),                                      //          .data
		.in_channel        (rsp_demux_src0_channel),                                   //          .channel
		.out_ready         (mux_pipeline_002_source0_ready),                           //   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),                           //          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),                     //          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),                            //          .data
		.out_channel       (mux_pipeline_002_source0_channel),                         //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (120),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_003 (
		.clk               (clk_0_clk_clk),                                            //       cr0.clk
		.reset             (arria10_hps_0_f2sdram0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                 //     sink0.ready
		.in_valid          (rsp_demux_001_src0_valid),                                 //          .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                         //          .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                           //          .endofpacket
		.in_data           (rsp_demux_001_src0_data),                                  //          .data
		.in_channel        (rsp_demux_001_src0_channel),                               //          .channel
		.out_ready         (mux_pipeline_003_source0_ready),                           //   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),                           //          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),                     //          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),                            //          .data
		.out_channel       (mux_pipeline_003_source0_channel),                         //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

endmodule
